[
  {
    "db_id": "concert_singer",
    "input_sequence": "我们有多少歌手？ | singer : singer.name , singer.song_name , singer.country , singer.age , singer.singer_id , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | concert : concert.theme , concert.year , concert.concert_name , concert.concert_id , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.song_name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_name",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "歌手的总数是多少？ | singer : singer.name , singer.song_name , singer.singer_id , singer.age , singer.country , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.highest , stadium.average , stadium.capacity , stadium.* | concert : concert.theme , concert.year , concert.concert_name , concert.stadium_id , concert.concert_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.song_name",
      "singer.singer_id",
      "singer.age",
      "singer.country",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.highest",
      "stadium.average",
      "stadium.capacity",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.concert_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "按歌手年龄从最大到最小，显示每个歌手的姓名、国家、年龄。 | singer : singer.name , singer.age , singer.country , singer.is_male , singer.singer_id , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "按年龄降序，每个歌手的名字、国家、年龄是什么？ | singer : singer.name , singer.age , singer.country , singer.is_male , singer.singer_id , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "法国所有歌手的平均年龄、最小年龄和最大年龄是多少？ | singer : singer.age , singer.country , singer.name , singer.is_male , singer.singer_id , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.location , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.age",
      "singer.country",
      "singer.name",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.location",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "所有法国歌手的平均年龄、最小年龄和最大年龄是多少？ | singer : singer.age , singer.country , singer.name , singer.is_male , singer.singer_id , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.location , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.age",
      "singer.country",
      "singer.name",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.location",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示最年轻歌手的歌曲的名字和发行年份。 | singer : singer.song_release_year , singer.song_name , singer.age , singer.is_male , singer.name , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_release_year",
      "singer.song_name",
      "singer.age",
      "singer.is_male",
      "singer.name",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "最年轻歌手的所有歌曲的名字和发行年是多少？ | singer : singer.song_name , singer.song_release_year , singer.age , singer.name , singer.is_male , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.song_release_year",
      "singer.age",
      "singer.name",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "20岁以上的歌手来自哪些不同国家？ | singer : singer.age , singer.country , singer.name , singer.singer_id , singer.is_male , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.age",
      "singer.country",
      "singer.name",
      "singer.singer_id",
      "singer.is_male",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "哪些国家有20岁以上的歌手？ | singer : singer.age , singer.country , singer.name , singer.singer_id , singer.is_male , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.age",
      "singer.country",
      "singer.name",
      "singer.singer_id",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示所有不同国家和每个国家的歌手数量。 | singer : singer.country , singer.name , singer.age , singer.singer_id , singer.song_name , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.location , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.name",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.location",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "每个国家有多少歌手？ | singer : singer.country , singer.name , singer.age , singer.singer_id , singer.song_name , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.country",
      "singer.name",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "列出高于平均年龄的歌手的所有歌名。 | singer : singer.song_name , singer.age , singer.name , singer.country , singer.is_male , singer.* | stadium : stadium.average , stadium.name , stadium.highest , stadium.location , stadium.capacity , stadium.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.age",
      "singer.name",
      "singer.country",
      "singer.is_male",
      "singer.*",
      "stadium.average",
      "stadium.name",
      "stadium.highest",
      "stadium.location",
      "stadium.capacity",
      "stadium.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "年龄高于平均年龄的歌手的所有歌名有哪些? | singer : singer.song_name , singer.age , singer.name , singer.country , singer.singer_id , singer.* | stadium : stadium.name , stadium.highest , stadium.average , stadium.location , stadium.capacity , stadium.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.age",
      "singer.name",
      "singer.country",
      "singer.singer_id",
      "singer.*",
      "stadium.name",
      "stadium.highest",
      "stadium.average",
      "stadium.location",
      "stadium.capacity",
      "stadium.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示容量在5000到10000之间的所有体育场馆的位置和名称。 | stadium : stadium.name , stadium.capacity , stadium.location , stadium.stadium_id , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "容量在5000到10000之间的所有体育场的位置和名称是什么？ | stadium : stadium.name , stadium.capacity , stadium.location , stadium.stadium_id , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "所有体育场的平均容量和最大容量是多少？ | stadium : stadium.capacity , stadium.average , stadium.highest , stadium.name , stadium.stadium_id , stadium.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.average",
      "stadium.highest",
      "stadium.name",
      "stadium.stadium_id",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "所有体育场的平均容量和最大容量是多少？ | stadium : stadium.capacity , stadium.average , stadium.highest , stadium.name , stadium.stadium_id , stadium.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.average",
      "stadium.highest",
      "stadium.name",
      "stadium.stadium_id",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "平均到场率最高的体育场名称和容量是多少？ | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.average",
      "stadium.highest",
      "stadium.stadium_id",
      "stadium.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "平均到场率最高的体育场的名称是什么，有多少容量？ | stadium : stadium.name , stadium.capacity , stadium.average , stadium.highest , stadium.stadium_id , stadium.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.average",
      "stadium.highest",
      "stadium.stadium_id",
      "stadium.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "2014或2015年有多少演唱会？ | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.name , stadium.location , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "有多少演唱会在2014或2015年？ | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.name , stadium.location , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示体育场的名称和每个体育场举办音乐会的数量。 | stadium : stadium.name , stadium.stadium_id , stadium.location , stadium.highest , stadium.capacity , stadium.* | concert : concert.stadium_id , concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.age , singer.country , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.stadium_id",
      "stadium.location",
      "stadium.highest",
      "stadium.capacity",
      "stadium.*",
      "concert.stadium_id",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "每个体育场有多少场音乐会？ | concert : concert.stadium_id , concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.* | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.stadium_id",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "在2014年或之后举办的音乐会最多的体育场的名称和容量。 | stadium : stadium.name , stadium.capacity , stadium.location , stadium.stadium_id , stadium.average , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.average",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "在2013年以后音乐会最多的体育场名称和容量是多少？ | stadium : stadium.name , stadium.capacity , stadium.location , stadium.stadium_id , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_id , concert.concert_name , concert.theme , concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.capacity",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.highest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.concert_id",
      "concert.concert_name",
      "concert.theme",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "哪一年音乐会最多？ | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.location , stadium.* | singer : singer.name , singer.age , singer.country , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.concert_name",
      "concert.concert_id",
      "concert.theme",
      "concert.stadium_id",
      "concert.*",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.location",
      "stadium.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "音乐会最多的是哪一年？ | concert : concert.year , concert.concert_name , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.highest , stadium.average , stadium.capacity , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.* | singer : singer.name , singer.age , singer.country , singer.song_name , singer.is_male , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.concert_name",
      "concert.concert_id",
      "concert.theme",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.highest",
      "stadium.average",
      "stadium.capacity",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.song_name",
      "singer.is_male",
      "singer.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "没有音乐会的体育场的名称。 | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.singer_id , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.singer_id",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "没有音乐会的体育场名称是什么？ | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.lowest , stadium.highest , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.theme , concert.year , concert.concert_id , concert.* | singer : singer.name , singer.country , singer.age , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.lowest",
      "stadium.highest",
      "stadium.*",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示40岁以上和30岁以下的歌手所来自的国家。 | singer : singer.age , singer.country , singer.is_male , singer.name , singer.singer_id , singer.* | concert : concert.theme , concert.year , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.age",
      "singer.country",
      "singer.is_male",
      "singer.name",
      "singer.singer_id",
      "singer.*",
      "concert.theme",
      "concert.year",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示除了2014年有音乐会的场馆外的所有体育场的名称。 | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | singer : singer.name , singer.age , singer.country , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "2014年没有举办音乐会的所有体育场名称是什么？ | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.lowest , stadium.highest , stadium.* | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | singer : singer.name , singer.age , singer.country , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.lowest",
      "stadium.highest",
      "stadium.*",
      "concert.year",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "显示所有音乐会的名称和主题以及每场音乐会的歌手人数。 | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | singer : singer.name , singer.age , singer.singer_id , singer.song_name , singer.country , singer.* | stadium : stadium.name , stadium.location , stadium.capacity , stadium.highest , stadium.average , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.year",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "singer.name",
      "singer.age",
      "singer.singer_id",
      "singer.song_name",
      "singer.country",
      "singer.*",
      "stadium.name",
      "stadium.location",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "每场演唱会的名称、主题和歌手数量是多少？ | concert : concert.concert_name , concert.theme , concert.concert_id , concert.year , concert.stadium_id , concert.* | singer : singer.name , singer.song_name , singer.singer_id , singer.age , singer.country , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.name , stadium.location , stadium.capacity , stadium.highest , stadium.average , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.year",
      "concert.stadium_id",
      "concert.*",
      "singer.name",
      "singer.song_name",
      "singer.singer_id",
      "singer.age",
      "singer.country",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "列出歌手的名字和每个歌手的演唱会的次数。 | singer : singer.name , singer.singer_id , singer.is_male , singer.song_name , singer.age , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.is_male",
      "singer.song_name",
      "singer.age",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "每个歌手的名字和演唱会的数量是多少？ | singer : singer.name , singer.singer_id , singer.is_male , singer.song_name , singer.country , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | concert : concert.concert_name , concert.year , concert.concert_id , concert.theme , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.is_male",
      "singer.song_name",
      "singer.country",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "concert.concert_name",
      "concert.year",
      "concert.concert_id",
      "concert.theme",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "列出2014年音乐会上所有歌手的名字。 | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer : singer.name , singer.singer_id , singer.song_name , singer.country , singer.song_release_year , singer.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.name , stadium.location , stadium.capacity , stadium.highest , stadium.average , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "singer.name",
      "singer.singer_id",
      "singer.song_name",
      "singer.country",
      "singer.song_release_year",
      "singer.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "2014年在演唱会上演唱的歌手的名字是什么？ | singer : singer.name , singer.song_name , singer.song_release_year , singer.singer_id , singer.is_male , singer.* | concert : concert.year , concert.concert_name , concert.theme , concert.concert_id , concert.stadium_id , concert.* | singer_in_concert : singer_in_concert.singer_id , singer_in_concert.concert_id , singer_in_concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.song_name",
      "singer.song_release_year",
      "singer.singer_id",
      "singer.is_male",
      "singer.*",
      "concert.year",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.stadium_id",
      "concert.*",
      "singer_in_concert.singer_id",
      "singer_in_concert.concert_id",
      "singer_in_concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "有首歌名含有'你'的歌手的名字和国籍是什么？ | singer : singer.song_name , singer.country , singer.name , singer.is_male , singer.singer_id , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.country",
      "singer.name",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "歌名中有'你'这个词的所有歌手的姓名和原籍国是什么？ | singer : singer.song_name , singer.country , singer.name , singer.is_male , singer.singer_id , singer.* | concert : concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.stadium_id , concert.* | stadium : stadium.location , stadium.name , stadium.capacity , stadium.highest , stadium.average , stadium.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.song_name",
      "singer.country",
      "singer.name",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.stadium_id",
      "concert.*",
      "stadium.location",
      "stadium.name",
      "stadium.capacity",
      "stadium.highest",
      "stadium.average",
      "stadium.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "找出同时在2014年和2015年举办音乐会的场馆的名称和地点。 | concert : concert.year , concert.stadium_id , concert.theme , concert.concert_name , concert.concert_id , concert.* | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | singer : singer.name , singer.age , singer.country , singer.is_male , singer.singer_id , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.stadium_id",
      "concert.theme",
      "concert.concert_name",
      "concert.concert_id",
      "concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.is_male",
      "singer.singer_id",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "在2014年和2015年同时举办音乐会的场馆名称和地点有哪些？ | concert : concert.year , concert.stadium_id , concert.concert_name , concert.theme , concert.concert_id , concert.* | stadium : stadium.name , stadium.location , stadium.stadium_id , stadium.capacity , stadium.highest , stadium.* | singer : singer.name , singer.country , singer.age , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "concert.year",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.theme",
      "concert.concert_id",
      "concert.*",
      "stadium.name",
      "stadium.location",
      "stadium.stadium_id",
      "stadium.capacity",
      "stadium.highest",
      "stadium.*",
      "singer.name",
      "singer.country",
      "singer.age",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "找出有着最大容量的体育场举办的音乐会数量。 | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.average , stadium.* | concert : concert.stadium_id , concert.concert_name , concert.year , concert.concert_id , concert.theme , concert.* | singer : singer.name , singer.age , singer.country , singer.song_name , singer.is_male , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.highest",
      "stadium.stadium_id",
      "stadium.name",
      "stadium.average",
      "stadium.*",
      "concert.stadium_id",
      "concert.concert_name",
      "concert.year",
      "concert.concert_id",
      "concert.theme",
      "concert.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.song_name",
      "singer.is_male",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "concert_singer",
    "input_sequence": "在容量最大的体育场里有多少场音乐会？ | stadium : stadium.capacity , stadium.highest , stadium.stadium_id , stadium.name , stadium.location , stadium.* | concert : concert.stadium_id , concert.year , concert.theme , concert.concert_id , concert.concert_name , concert.* | singer : singer.name , singer.age , singer.country , singer.singer_id , singer.song_name , singer.* | singer_in_concert : singer_in_concert.concert_id , singer_in_concert.singer_id , singer_in_concert.*",
    "output_sequence": " | ",
    "tc_original": [
      "stadium.capacity",
      "stadium.highest",
      "stadium.stadium_id",
      "stadium.name",
      "stadium.location",
      "stadium.*",
      "concert.stadium_id",
      "concert.year",
      "concert.theme",
      "concert.concert_id",
      "concert.concert_name",
      "concert.*",
      "singer.name",
      "singer.age",
      "singer.country",
      "singer.singer_id",
      "singer.song_name",
      "singer.*",
      "singer_in_concert.concert_id",
      "singer_in_concert.singer_id",
      "singer_in_concert.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出体重大于10的宠物的数量。 | pets : pets.weight , pets.petid , pets.pet_age , pets.pettype , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.pettype",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "有多少宠物的体重比10大？ | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找到最年轻的狗的体重。 | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "最年轻的狗有多重？ | pets : pets.pet_age , pets.weight , pets.pettype , pets.petid , pets.* | student : student.age , student.sex , student.major , student.fname , student.stuid , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.pettype",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.fname",
      "student.stuid",
      "student.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出每种宠物的最大重量。列出最大重量和宠物类型。 | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.lname , student.fname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.lname",
      "student.fname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "列出每种宠物的最大重量和类型。 | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.lname , student.fname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.lname",
      "student.fname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出20岁以上学生拥有的宠物数量。 | student : student.age , student.stuid , student.sex , student.major , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "年龄大于20岁的学生拥有多少宠物？ | student : student.age , student.stuid , student.sex , student.major , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出由女学生（性别为'女'）养的宠物狗的数量。 | student : student.sex , student.stuid , student.age , student.major , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.petid , pets.pettype , pets.weight , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.sex",
      "student.stuid",
      "student.age",
      "student.major",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.petid",
      "pets.pettype",
      "pets.weight",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "女学生养了多少只宠物狗？ | student : student.sex , student.stuid , student.age , student.major , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.sex",
      "student.stuid",
      "student.age",
      "student.major",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出不同类型宠物的数量。 | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.lname , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.lname",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "有多少种不同类型的宠物？ | pets : pets.pettype , pets.weight , pets.pet_age , pets.petid , pets.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.sex , student.major , student.age , student.lname , student.fname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.pet_age",
      "pets.petid",
      "pets.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "student.sex",
      "student.major",
      "student.age",
      "student.lname",
      "student.fname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "查找有猫狗宠物的学生的名字。 | student : student.fname , student.lname , student.stuid , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "每一个养猫或狗的学生的名字是什么？ | student : student.fname , student.lname , student.stuid , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出既有猫又有狗的学生的名字。 | student : student.fname , student.lname , student.stuid , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "有猫又有狗的学生名字是什么？ | student : student.fname , student.lname , student.stuid , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.lname",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找到没有宠物猫的学生的专业和年龄。 | student : student.age , student.major , student.stuid , student.fname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.major",
      "student.stuid",
      "student.fname",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "每个不养猫的学生都学什么专业？他们多大了？ | student : student.age , student.major , student.fname , student.stuid , student.lname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.pet_age , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.major",
      "student.fname",
      "student.stuid",
      "student.lname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.pet_age",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找到没有宠物猫的学生的ID。 | student : student.stuid , student.age , student.fname , student.sex , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.stuid",
      "student.age",
      "student.fname",
      "student.sex",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "那些没有猫的学生的ID是什么？ | student : student.stuid , student.age , student.sex , student.fname , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.stuid",
      "student.age",
      "student.sex",
      "student.fname",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出有狗但没有猫的学生的名字和年龄。 | student : student.fname , student.age , student.lname , student.stuid , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.age",
      "student.lname",
      "student.stuid",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "养狗但没有养猫的学生的名字是什么？ | student : student.fname , student.lname , student.stuid , student.sex , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.lname",
      "student.stuid",
      "student.sex",
      "student.age",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出最年轻的宠物的类型和体重。 | pets : pets.pet_age , pets.pettype , pets.weight , pets.petid , pets.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "最年轻的宠物是什么类型的，它的重量是多少？ | pets : pets.pettype , pets.pet_age , pets.weight , pets.petid , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出所有年龄大于1岁的宠物的ID和体重。 | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "每一个1岁以上的宠物的ID和体重是多少？ | pets : pets.pet_age , pets.petid , pets.weight , pets.pettype , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.petid",
      "pets.weight",
      "pets.pettype",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出每种宠物的平均年龄和最大年龄。 | pets : pets.pet_age , pets.pettype , pets.petid , pets.weight , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "每种宠物的平均年龄和最大年龄是多少？ | pets : pets.pet_age , pets.pettype , pets.petid , pets.weight , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pet_age",
      "pets.pettype",
      "pets.petid",
      "pets.weight",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找到每种宠物类型的平均体重。 | pets : pets.pettype , pets.weight , pets.petid , pets.pet_age , pets.* | student : student.age , student.sex , student.major , student.lname , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.pettype",
      "pets.weight",
      "pets.petid",
      "pets.pet_age",
      "pets.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.lname",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "每种宠物的平均体重是多少？ | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | has_pet : has_pet.petid , has_pet.stuid , has_pet.* | student : student.age , student.sex , student.major , student.stuid , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*",
      "has_pet.petid",
      "has_pet.stuid",
      "has_pet.*",
      "student.age",
      "student.sex",
      "student.major",
      "student.stuid",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出有宠物的学生的名字和年龄。 | student : student.fname , student.age , student.lname , student.stuid , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.age",
      "student.lname",
      "student.stuid",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "有宠物的学生有哪些不同的名字和年龄？ | student : student.fname , student.age , student.lname , student.stuid , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.age",
      "student.lname",
      "student.stuid",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出有宠物而且姓为'琳'的学生的ID。 | student : student.lname , student.stuid , student.fname , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.stuid",
      "student.fname",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "那个姓'琳'而且有宠物的学生的ID是什么？ | student : student.lname , student.stuid , student.fname , student.age , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.stuid",
      "student.fname",
      "student.age",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出每个有宠物的学生的ID和宠物数量。 | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.* | student : student.stuid , student.age , student.sex , student.major , student.lname , student.*",
    "output_sequence": " | ",
    "tc_original": [
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*",
      "student.stuid",
      "student.age",
      "student.sex",
      "student.major",
      "student.lname",
      "student.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "对于有宠物的学生，每个学生有多少宠物？ | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | student : student.stuid , student.fname , student.lname , student.age , student.sex , student.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "student.stuid",
      "student.fname",
      "student.lname",
      "student.age",
      "student.sex",
      "student.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出拥有不止一只宠物的学生的名字和性别。 | student : student.fname , student.sex , student.stuid , student.lname , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.sex",
      "student.stuid",
      "student.lname",
      "student.age",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "所有拥有多只宠物的学生的名和性别是什么？ | student : student.fname , student.sex , student.lname , student.stuid , student.age , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.weight , pets.petid , pets.pettype , pets.pet_age , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.fname",
      "student.sex",
      "student.lname",
      "student.stuid",
      "student.age",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.pet_age",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出有一只3岁猫的学生的姓氏。 | student : student.lname , student.age , student.stuid , student.fname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.age",
      "student.stuid",
      "student.fname",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "有一只3岁猫的学生的姓氏是什么？ | student : student.lname , student.age , student.stuid , student.fname , student.sex , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.lname",
      "student.age",
      "student.stuid",
      "student.fname",
      "student.sex",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "找出没有宠物的学生的平均年龄。 | student : student.age , student.stuid , student.sex , student.major , student.fname , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.petid , pets.pettype , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.major",
      "student.fname",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.petid",
      "pets.pettype",
      "pets.*"
    ]
  },
  {
    "db_id": "pets_1",
    "input_sequence": "所有没有宠物的学生平均年龄是多少？ | student : student.age , student.stuid , student.sex , student.fname , student.major , student.* | has_pet : has_pet.stuid , has_pet.petid , has_pet.* | pets : pets.pet_age , pets.weight , pets.pettype , pets.petid , pets.*",
    "output_sequence": " | ",
    "tc_original": [
      "student.age",
      "student.stuid",
      "student.sex",
      "student.fname",
      "student.major",
      "student.*",
      "has_pet.stuid",
      "has_pet.petid",
      "has_pet.*",
      "pets.pet_age",
      "pets.weight",
      "pets.pettype",
      "pets.petid",
      "pets.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少大洲？ | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "大洲的数量是多少？ | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryid , countries.countryname , countries.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "countries.continent",
      "countries.countryid",
      "countries.countryname",
      "countries.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个洲有多少个国家？列出大洲ID、大洲名称和国家数目。 | countries : countries.continent , countries.countryname , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "对于每个大洲，列出它的ID、名字和它有多少个国家？ | countries : countries.continent , countries.countryname , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "列出了多少国家？ | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少国家存在？ | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个汽车制造商生产多少种型号的汽车？列出制造商姓名，ID和号码。 | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country , car_makers.* | car_names : car_names.model , car_names.makeid , car_names.make , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "car_names.model",
      "car_names.makeid",
      "car_names.make",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个汽车制造商的全名，ID以及生产多少种型号的汽车？ | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | car_names : car_names.model , car_names.makeid , car_names.make , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.*",
      "car_names.model",
      "car_names.makeid",
      "car_names.make",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪个车型的马力最小？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "最小马力的汽车的型号是什么？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.horsepower , cars_data.mpg , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.horsepower",
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "找出重量低于平均重量的汽车的型号。 | cars_data : cars_data.weight , cars_data.edispl , cars_data.id , cars_data.year , cars_data.cylinders , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.year",
      "cars_data.cylinders",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "重量小于平均值的汽车的型号是什么？ | cars_data : cars_data.weight , cars_data.edispl , cars_data.id , cars_data.year , cars_data.mpg , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "找出'1970'年生产汽车的制造商的名字。 | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | cars_data : cars_data.year , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.mpg",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "'1970'年生产过汽车的不同汽车制造商的名字是什么？ | cars_data : cars_data.year , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.mpg , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.mpg",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "找出最早一年生产的汽车的制造和生产时间？ | cars_data : cars_data.year , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.cylinders , cars_data.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.cylinders",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "最早生产汽车的制造商是什么，在哪一年？ | cars_data : cars_data.year , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.mpg",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "1980年后生产出哪些不同车型？ | cars_data : cars_data.year , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.mpg",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪些不同的车型在1980年后被生产出来？ | cars_data : cars_data.year , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.mpg",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个大洲有多少汽车制造商？列出大洲名称和数量。 | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个大洲的名称是什么？每个大洲有多少汽车制造商？ | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | countries : countries.continent , countries.countryname , countries.countryid , countries.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪个国家拥有最多的汽车制造商？列出国家名称。 | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "汽车制造商最多的国家叫什么名字？ | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个制造商生产多少种车型？列出数量和制造商的全名。 | car_makers : car_makers.fullname , car_makers.maker , car_makers.id , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每个制造商生产的车型数量是多少？每个制造商的ID和全名是什么？ | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.model , car_names.makeid , car_names.make , car_names.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.makeid",
      "car_names.make",
      "car_names.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "'科迈罗'的加速度是多少？ | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.edispl , cars_data.mpg , cars_data.id , cars_data.* | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | continents : continents.continent , continents.contid , continents.* | countries : countries.countryname , countries.continent , countries.countryid , countries.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.*",
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "'科迈罗'的加速度有多大？ | cars_data : cars_data.accelerate , cars_data.horsepower , cars_data.edispl , cars_data.mpg , cars_data.id , cars_data.* | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | continents : continents.continent , continents.contid , continents.* | countries : countries.countryname , countries.continent , countries.countryid , countries.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.*",
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "法国有多少汽车制造商？ | car_makers : car_makers.country , car_makers.maker , car_makers.fullname , car_makers.id , car_makers.* | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "法国的汽车制造商有多少？ | car_makers : car_makers.country , car_makers.maker , car_makers.fullname , car_makers.id , car_makers.* | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "美国生产了多少款车？ | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | countries : countries.countryname , countries.continent , countries.countryid , countries.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在美国生产的车型有多少？ | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | countries : countries.continent , countries.countryname , countries.countryid , countries.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "4缸汽车每加仑汽油能行驶的平均英里数是多少？ | cars_data : cars_data.cylinders , cars_data.mpg , cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.mpg",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "所有4缸汽车每加仑汽油能行驶的平均英里数是多少？ | cars_data : cars_data.cylinders , cars_data.mpg , cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.mpg",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在1974年的8缸汽车的最小重量是多少？ | cars_data : cars_data.cylinders , cars_data.year , cars_data.weight , cars_data.edispl , cars_data.id , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.year",
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "1974年所生产的8缸汽车的最小重量是多少？ | cars_data : cars_data.cylinders , cars_data.weight , cars_data.year , cars_data.edispl , cars_data.id , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "所有的制造商和汽车型号是什么？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "制造商和汽车型号是什么？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪些国家至少拥有一家汽车制造商？列出名称和ID。 | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | countries : countries.countryname , countries.countryid , countries.continent , countries.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "拥有至少一家汽车制造商的所有国家的名称和ID是什么？ | car_makers : car_makers.id , car_makers.country , car_makers.maker , car_makers.fullname , car_makers.* | countries : countries.countryname , countries.countryid , countries.continent , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.id",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "马力超过150的汽车的数量是多少？ | cars_data : cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少汽车的马力大于150？ | cars_data : cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每年汽车的平均重量是多少？ | cars_data : cars_data.year , cars_data.weight , cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "每年的平均重量和年份是多少？ | cars_data : cars_data.weight , cars_data.year , cars_data.edispl , cars_data.id , cars_data.mpg , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.mpg",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "欧洲哪些国家至少有3家汽车制造商？ | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "拥有至少3家制造商的所有欧洲国家的名称是什么？ | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "3缸的汽车型号的最大的马力和牌子是什么？ | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "3缸车型的最大马力是多少？是什么牌子的？ | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪种型号的车最省油？也就是说，每加仑汽油能行驶的英里数最大。 | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.mpg , cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.mpg",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "最高MPG的汽车型号是什么？ | cars_data : cars_data.mpg , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "汽车在1980年之前的平均马力是多少？ | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.year",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在1980之前生产的所有品牌汽车的平均马力是多少？ | cars_data : cars_data.horsepower , cars_data.year , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.year",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "car_names.make",
      "car_names.makeid",
      "car_names.model",
      "car_names.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "'吉利'汽车的平均EDISL是多少？ | cars_data : cars_data.edispl , cars_data.id , cars_data.mpg , cars_data.cylinders , cars_data.year , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.mpg",
      "cars_data.cylinders",
      "cars_data.year",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "car_names.make",
      "car_names.makeid",
      "car_names.model",
      "car_names.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "所有'吉利'汽车的平均EDISCL是多少？ | cars_data : cars_data.edispl , cars_data.id , cars_data.year , cars_data.mpg , cars_data.cylinders , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.cylinders",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "对于不同数量的气缸的车，最大加速度是多少？ | cars_data : cars_data.cylinders , cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "不同气缸的车的最大加速度是多少？ | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.edispl , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪种车型的汽车版本最多？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "什么型号的汽车有最多不同的版本？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少辆车有4个以上的气缸？ | cars_data : cars_data.cylinders , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "4缸以上的汽车数量是多少？ | cars_data : cars_data.cylinders , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "1980年生产了多少辆车？ | cars_data : cars_data.year , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.mpg , cars_data.* | car_makers : car_makers.country , car_makers.maker , car_makers.fullname , car_makers.id , car_makers.* | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.mpg",
      "cars_data.*",
      "car_makers.country",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在1980年，多少辆车生产出来了？ | cars_data : cars_data.year , cars_data.edispl , cars_data.weight , cars_data.id , cars_data.mpg , cars_data.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | countries : countries.continent , countries.countryname , countries.countryid , countries.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.id",
      "cars_data.mpg",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "countries.continent",
      "countries.countryname",
      "countries.countryid",
      "countries.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "全名为'一汽'的制造商生产了多少种车型？ | car_makers : car_makers.fullname , car_makers.maker , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "名为'一汽'的汽车制造商生产的不同汽车型号是多少？ | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪些制造商设计了超过3种车型？列出全名和ID。 | car_makers : car_makers.fullname , car_makers.id , car_makers.maker , car_makers.country , car_makers.* | model_list : model_list.maker , model_list.modelid , model_list.model , model_list.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.*",
      "model_list.maker",
      "model_list.modelid",
      "model_list.model",
      "model_list.*",
      "car_names.makeid",
      "car_names.model",
      "car_names.make",
      "car_names.*",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "生产超过3种型号汽车的所有制造商的名称和ID是什么？ | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country , car_makers.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | model_list : model_list.model , model_list.modelid , model_list.maker , model_list.* | cars_data : cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "car_names.makeid",
      "car_names.model",
      "car_names.make",
      "car_names.*",
      "model_list.model",
      "model_list.modelid",
      "model_list.maker",
      "model_list.*",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪些车型是'上汽'公司生产的，或者重量超过3500？ | cars_data : cars_data.weight , cars_data.edispl , cars_data.id , cars_data.horsepower , cars_data.year , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.year",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "'上汽'公司生产或重量超过3500的不同车型有哪些？ | cars_data : cars_data.weight , cars_data.edispl , cars_data.id , cars_data.horsepower , cars_data.year , cars_data.* | car_makers : car_makers.maker , car_makers.fullname , car_makers.country , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.year",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪一年生产的汽车重量不小于3000，也不超过4000？ | cars_data : cars_data.weight , cars_data.year , cars_data.edispl , cars_data.id , cars_data.cylinders , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.weight",
      "cars_data.year",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.cylinders",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有哪些年份既生产了重量小于4000的汽车，又生产了重量大于3000的汽车？ | cars_data : cars_data.year , cars_data.weight , cars_data.edispl , cars_data.id , cars_data.horsepower , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.year",
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.horsepower",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "最大加速度的汽车的马力是多少？ | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.edispl , cars_data.id , cars_data.mpg , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.mpg",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "加速度最大的汽车的马力是多少？ | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.edispl , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "对于'吉利'车型来说，最小加速度的汽车有多少个气缸？ | cars_data : cars_data.cylinders , cars_data.accelerate , cars_data.horsepower , cars_data.id , cars_data.mpg , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.mpg",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "加速度最小的'吉利'车型有多少个汽缸？ | cars_data : cars_data.cylinders , cars_data.accelerate , cars_data.horsepower , cars_data.mpg , cars_data.id , cars_data.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.mpg",
      "cars_data.id",
      "cars_data.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少车比最大马力的汽车有更大的加速度？ | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "加速度比马力最大的汽车更大的汽车有多少辆？ | cars_data : cars_data.horsepower , cars_data.accelerate , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.horsepower",
      "cars_data.accelerate",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少国家拥有超过2家汽车制造商？ | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "拥有超过2家汽车制造商的国家有多少？ | car_makers : car_makers.country , car_makers.maker , car_makers.id , car_makers.fullname , car_makers.* | countries : countries.countryname , countries.continent , countries.countryid , countries.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.country",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "有多少辆车超过6个汽缸？ | cars_data : cars_data.cylinders , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "超过6个气缸的汽车的数量是多少？ | cars_data : cars_data.cylinders , cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | continents : continents.continent , continents.contid , continents.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "对于有4个汽缸的汽车，哪个型号的车的马力最大？ | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪种型号的四缸汽车的马力最大？ | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.edispl , cars_data.weight , cars_data.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在高于最低马力的车中，哪些没有超过3个汽缸？列出汽车制造商的ID和名称。 | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.mpg , cars_data.edispl , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.mpg",
      "cars_data.edispl",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "car_names.makeid",
      "car_names.model",
      "car_names.make",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在不是最小马力的汽车中，那些少于4个汽缸的汽车制造商的ID和名称是什么？ | cars_data : cars_data.cylinders , cars_data.horsepower , cars_data.id , cars_data.weight , cars_data.year , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "8缸或1980年前生产的汽车每加仑汽油的最大里程是多少？ | cars_data : cars_data.cylinders , cars_data.mpg , cars_data.year , cars_data.accelerate , cars_data.horsepower , cars_data.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.make , car_names.model , car_names.makeid , car_names.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.mpg",
      "cars_data.year",
      "cars_data.accelerate",
      "cars_data.horsepower",
      "cars_data.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "在1980年之前生产或8缸的汽车最大MPG是多少？ | cars_data : cars_data.cylinders , cars_data.mpg , cars_data.year , cars_data.horsepower , cars_data.edispl , cars_data.* | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | continents : continents.continent , continents.contid , continents.*",
    "output_sequence": " | ",
    "tc_original": [
      "cars_data.cylinders",
      "cars_data.mpg",
      "cars_data.year",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "continents.continent",
      "continents.contid",
      "continents.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪些型号的车比3500轻并且不是'广汽'制造？ | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | cars_data : cars_data.weight , cars_data.edispl , cars_data.horsepower , cars_data.id , cars_data.year , cars_data.* | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "cars_data.weight",
      "cars_data.edispl",
      "cars_data.horsepower",
      "cars_data.id",
      "cars_data.year",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "不是'广汽'制造的车中，哪些型号的车比3500轻？ | car_names : car_names.make , car_names.model , car_names.makeid , car_names.* | cars_data : cars_data.weight , cars_data.horsepower , cars_data.edispl , cars_data.id , cars_data.year , cars_data.* | car_makers : car_makers.maker , car_makers.country , car_makers.fullname , car_makers.id , car_makers.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_names.make",
      "car_names.model",
      "car_names.makeid",
      "car_names.*",
      "cars_data.weight",
      "cars_data.horsepower",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.year",
      "cars_data.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.id",
      "car_makers.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "没有一个汽车制造商的国家的名字是什么？ | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "没有汽车制造商的国家的名字是什么？ | countries : countries.countryname , countries.continent , countries.countryid , countries.* | car_makers : car_makers.maker , car_makers.country , car_makers.id , car_makers.fullname , car_makers.* | continents : continents.continent , continents.contid , continents.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.continent",
      "countries.countryid",
      "countries.*",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.*",
      "continents.continent",
      "continents.contid",
      "continents.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪家汽车制造商生产至少2种型号的汽车和3种以上的汽车品牌？列出ID和制造商。 | car_makers : car_makers.maker , car_makers.id , car_makers.country , car_makers.fullname , car_makers.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | cars_data : cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.id",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "car_names.makeid",
      "car_names.model",
      "car_names.make",
      "car_names.*",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "所有生产至少2种车型、生产超过3种汽车品牌的汽车制造商的ID和制造商是什么？ | car_makers : car_makers.maker , car_makers.id , car_makers.fullname , car_makers.country , car_makers.* | car_names : car_names.makeid , car_names.model , car_names.make , car_names.* | model_list : model_list.maker , model_list.model , model_list.modelid , model_list.* | cars_data : cars_data.edispl , cars_data.id , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.maker",
      "car_makers.id",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "car_names.makeid",
      "car_names.model",
      "car_names.make",
      "car_names.*",
      "model_list.maker",
      "model_list.model",
      "model_list.modelid",
      "model_list.*",
      "cars_data.edispl",
      "cars_data.id",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "拥有3家以上汽车制造商或生产'荣威'车型的国家的ID和名称是什么？ | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_makers : car_makers.id , car_makers.maker , car_makers.country , car_makers.fullname , car_makers.* | car_names : car_names.model , car_names.make , car_names.makeid , car_names.* | model_list : model_list.model , model_list.maker , model_list.modelid , model_list.*",
    "output_sequence": " | ",
    "tc_original": [
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_makers.id",
      "car_makers.maker",
      "car_makers.country",
      "car_makers.fullname",
      "car_makers.*",
      "car_names.model",
      "car_names.make",
      "car_names.makeid",
      "car_names.*",
      "model_list.model",
      "model_list.maker",
      "model_list.modelid",
      "model_list.*"
    ]
  },
  {
    "db_id": "car_1",
    "input_sequence": "哪些国家有3种以上汽车制造商或生产'荣威'，它们的ID和名称是什么？ | car_makers : car_makers.id , car_makers.maker , car_makers.fullname , car_makers.country , car_makers.* | countries : countries.countryname , countries.countryid , countries.continent , countries.* | car_names : car_names.make , car_names.makeid , car_names.model , car_names.* | cars_data : cars_data.id , cars_data.edispl , cars_data.weight , cars_data.year , cars_data.mpg , cars_data.*",
    "output_sequence": " | ",
    "tc_original": [
      "car_makers.id",
      "car_makers.maker",
      "car_makers.fullname",
      "car_makers.country",
      "car_makers.*",
      "countries.countryname",
      "countries.countryid",
      "countries.continent",
      "countries.*",
      "car_names.make",
      "car_names.makeid",
      "car_names.model",
      "car_names.*",
      "cars_data.id",
      "cars_data.edispl",
      "cars_data.weight",
      "cars_data.year",
      "cars_data.mpg",
      "cars_data.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'深圳航空公司'航空公司属于哪个国家？ | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'深圳航空公司'航空公司隶属于哪个国家？ | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.country , airports.city , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.destairport , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "航空公司'深圳航空公司'的缩写是什么？ | airlines : airlines.abbreviation , airlines.airline , airlines.uid , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪一个缩写对应于'深圳航空公司'航空公司？ | airlines : airlines.abbreviation , airlines.airline , airlines.uid , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "列出所有'美国'的航空公司的名字和缩写。 | airlines : airlines.airline , airlines.abbreviation , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "美国所有航空公司的航空公司名称和缩写是什么？ | airlines : airlines.airline , airlines.abbreviation , airlines.country , airlines.uid , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.country",
      "airlines.uid",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "列出'拉萨'市的机场代码和名称。 | airports : airports.airportname , airports.airportcode , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.airline , flights.sourceairport , flights.destairport , flights.flightno , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出与城市'拉萨'对应的机场代码和机场名称。 | airports : airports.airportname , airports.airportcode , airports.city , airports.country , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "我们有多少家航空公司？ | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.country , airports.city , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "航空公司的总数是多少？ | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.country , airports.city , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "我们有多少个机场？ | airports : airports.airportname , airports.country , airports.countryabbrev , airports.city , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.countryabbrev",
      "airports.city",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回机场的数量。 | airports : airports.airportname , airports.country , airports.countryabbrev , airports.airportcode , airports.city , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.city",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "我们有多少次航班？ | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.country , airports.city , airports.countryabbrev , airports.airportcode , airports.airportname , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.airportname",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回航班次的数量。 | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.country , airports.city , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪家航空公司的缩写是'UAL'？ | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.uid , airlines.country , airlines.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出缩写为'UAL'的航空公司。 | airlines : airlines.abbreviation ( UAL ) , airlines.airline , airlines.uid , airlines.country , airlines.* | airports : airports.country , airports.city , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "有多少航空公司来自美国？ | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | flights : flights.airline , flights.sourceairport , flights.destairport , flights.flightno , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回美国航空公司的数量。 | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | airports : airports.country , airports.city , airports.airportcode , airports.airportname , airports.countryabbrev , airports.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "airports.country",
      "airports.city",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'东方'机场在哪个城市和哪个国家？ | airports : airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出'东方'机场所属的城市和国家。 | airports : airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'AKO'机场的名称是什么？ | airports : airports.airportname , airports.airportcode ( AKO ) , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.sourceairport ( AKO ) , flights.destairport ( AKO ) , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回代号为'AKO'的机场名称。 | airports : airports.airportname , airports.airportcode ( AKO ) , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.airline , flights.flightno , flights.destairport ( AKO ) , flights.sourceairport ( AKO ) , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'哈尔滨'市的机场名称是什么？ | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "在'哈尔滨'的机场名称是什么？ | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "有多少航班从'长沙'出发？ | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "统计从'长沙'起飞的航班数。 | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "目的地是'天津'有多少航班？ | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "统计到达'天津'的航班数。 | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "从'哈尔滨'市起飞的有多少班次？ | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回从'哈尔滨'起飞的航班数。 | flights : flights.sourceairport , flights.flightno , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "到'哈尔滨'市有多少班次？ | flights : flights.destairport , flights.flightno , flights.airline , flights.sourceairport , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回抵达'哈尔滨'市的航班数量。 | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "有多少航班从'哈尔滨'起飞，到达'西安'？ | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.sourceairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "从'哈尔滨'飞往'西安'有多少班机？ | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.sourceairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'深圳航空公司'航空公司有多少航班？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出'深圳航空公司'航空公司航班的数量。 | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "有多少'南方航空'航空公司的航班飞往'虹桥'？ | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "统计'南方航空'航空公司航班抵达'虹桥'机场的数量。 | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.airline , flights.sourceairport , flights.flightno , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.airline",
      "flights.sourceairport",
      "flights.flightno",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "有多少'南方航空'航班从'浦东'机场起飞？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.airportname , airports.city , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.airline , flights.flightno , flights.destairport , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.airportname",
      "airports.city",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "返回从'浦东'机场起飞的'南方航空'航空公司航班的数量。 | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.sourceairport , flights.airline , flights.flightno , flights.destairport , flights.* | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.*",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "有多少'南方航空'航空公司的航班飞往'哈尔滨'？ | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "统计到达'哈尔滨'的'南方航空'航空公司航班的数量。 | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪个城市有最多的抵达航班？ | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪个城市有最频繁的目的地机场？ | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.flightno , flights.sourceairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪个城市离开的航班最多？ | flights : flights.sourceairport , flights.destairport , flights.flightno , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪个城市的机场中起飞航班是最频繁的？ | airports : airports.airportname , airports.city , airports.airportcode , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.city",
      "airports.airportcode",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "最多航班数的机场代码是多少？ | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportcode",
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "航班数量最多的机场的代码是多少？ | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportcode",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "航班最少的机场代码是什么？ | airports : airports.airportcode , airports.airportname , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportcode",
      "airports.airportname",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出最少的航班数的机场代码。 | airports : airports.airportcode , airports.airportname , airports.city , airports.country , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportcode",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪家航空公司的航班最多？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.country , airports.city , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪家航空公司提供最多的航班？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.country , airports.city , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找到航班最少的航空公司的缩写和国家。 | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "航班最少的航空公司的缩写是什么？它在哪个国家？ | airlines : airlines.abbreviation , airlines.country , airlines.airline , airlines.uid , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.abbreviation",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航空公司有从'浦东'机场出发的航班？ | flights : flights.airline , flights.sourceairport , flights.destairport , flights.flightno , flights.* | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "从'浦东'机场出发的航班的航空公司有哪些？ | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航空公司有到达'浦东'机场的航班？ | flights : flights.destairport , flights.airline , flights.flightno , flights.sourceairport , flights.* | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.*",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航空公司有目的机场是'浦东'的航班？ | flights : flights.destairport , flights.airline , flights.sourceairport , flights.flightno , flights.* | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.destairport",
      "flights.airline",
      "flights.sourceairport",
      "flights.flightno",
      "flights.*",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找出有从'长沙'和'白云'机场出发的航班的所有航空公司。 | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.airline , flights.sourceairport , flights.destairport , flights.flightno , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航空公司有从'长沙'和'白云'机场起飞的航班？ | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.sourceairport , flights.airline , flights.destairport , flights.flightno , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找出有从'白云'机场出发，但不从'长沙'机场出发的航班的所有航空公司。 | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.airline , flights.flightno , flights.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.flightno",
      "flights.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航空公司有航班从'白云'起飞，而不是从'长沙'机场起飞？ | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.airline , airlines.country , airlines.uid , airlines.abbreviation , airlines.* | flights : flights.airline , flights.sourceairport , flights.destairport , flights.flightno , flights.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.airline",
      "airlines.country",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.flightno",
      "flights.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找出所有至少有10个航班的航空公司。 | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪家航空公司至少有10次航班？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找出所有少于200个航班的航空公司。 | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.sourceairport , flights.destairport , flights.* | airports : airports.country , airports.city , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航空公司的航班少于200？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.airline , flights.flightno , flights.destairport , flights.sourceairport , flights.* | airports : airports.country , airports.city , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.airline",
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.*",
      "airports.country",
      "airports.city",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "'南方航空'航空公司的航班号是多少？ | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些航班号对应'南方航空'航空公司的航班？ | flights : flights.flightno , flights.airline , flights.sourceairport , flights.destairport , flights.* | airlines : airlines.airline , airlines.uid , airlines.country , airlines.abbreviation , airlines.* | airports : airports.city , airports.country , airports.airportcode , airports.airportname , airports.countryabbrev , airports.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.airline",
      "flights.sourceairport",
      "flights.destairport",
      "flights.*",
      "airlines.airline",
      "airlines.uid",
      "airlines.country",
      "airlines.abbreviation",
      "airlines.*",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "从'长沙'机场起飞的航班的航班号是多少？ | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出从'长沙'起飞的航班的航班号。 | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "到达'长沙'机场的航班的航班号是多少？ | flights : flights.flightno , flights.destairport , flights.sourceairport , flights.airline , flights.* | airports : airports.airportname , airports.city , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.airportname",
      "airports.city",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出在'长沙'降落的航班的航班号。 | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "从'哈尔滨'起飞的航班的航班号是多少？ | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出从'哈尔滨'起飞的航班的航班号。 | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "到达'哈尔滨'市的航班的航班号是多少？ | flights : flights.flightno , flights.destairport , flights.airline , flights.sourceairport , flights.* | airports : airports.city , airports.country , airports.airportname , airports.countryabbrev , airports.airportcode , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.destairport",
      "flights.airline",
      "flights.sourceairport",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.countryabbrev",
      "airports.airportcode",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "给出到达'哈尔滨'航班的航班号。 | flights : flights.flightno , flights.destairport , flights.sourceairport , flights.airline , flights.* | airports : airports.city , airports.country , airports.airportname , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.destairport",
      "flights.sourceairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.country",
      "airports.airportname",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找出在'哈尔滨'或'长春'降落的航班的航班号。 | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "在'哈尔滨'或'长春'有多少航班？ | airports : airports.city , airports.airportname , airports.country , airports.airportcode , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.airline , flights.destairport , flights.* | airlines : airlines.country , airlines.airline , airlines.uid , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.city",
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.airline",
      "flights.destairport",
      "flights.*",
      "airlines.country",
      "airlines.airline",
      "airlines.uid",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "找出没有任何起落航班的机场名称。 | airports : airports.airportname , airports.airportcode , airports.country , airports.city , airports.countryabbrev , airports.* | flights : flights.flightno , flights.sourceairport , flights.destairport , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.airportcode",
      "airports.country",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.flightno",
      "flights.sourceairport",
      "flights.destairport",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "flight_2",
    "input_sequence": "哪些机场没有起飞或到达的航班？ | airports : airports.airportname , airports.country , airports.airportcode , airports.city , airports.countryabbrev , airports.* | flights : flights.destairport , flights.sourceairport , flights.flightno , flights.airline , flights.* | airlines : airlines.country , airlines.uid , airlines.airline , airlines.abbreviation , airlines.*",
    "output_sequence": " | ",
    "tc_original": [
      "airports.airportname",
      "airports.country",
      "airports.airportcode",
      "airports.city",
      "airports.countryabbrev",
      "airports.*",
      "flights.destairport",
      "flights.sourceairport",
      "flights.flightno",
      "flights.airline",
      "flights.*",
      "airlines.country",
      "airlines.uid",
      "airlines.airline",
      "airlines.abbreviation",
      "airlines.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "那里有多少员工？ | employee : employee.name , employee.employee_id , employee.city , employee.age , employee.* | hiring : hiring.employee_id , hiring.start_from , hiring.shop_id , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.number_products , shop.manager_name , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.city",
      "employee.age",
      "employee.*",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.shop_id",
      "hiring.is_full_time",
      "hiring.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.manager_name",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "统计员工人数。 | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | hiring : hiring.employee_id , hiring.start_from , hiring.shop_id , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.number_products , shop.manager_name , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.shop_id",
      "hiring.is_full_time",
      "hiring.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.manager_name",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "按年龄升序排列员工的姓名。 | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.age",
      "employee.employee_id",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "按年龄升序，列出员工姓名。 | employee : employee.name , employee.age , employee.employee_id , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.age",
      "employee.employee_id",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "每个城市的雇员人数是多少？ | employee : employee.city , employee.name , employee.employee_id , employee.age , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.city",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "统计每个城市的雇员数量。 | employee : employee.city , employee.name , employee.employee_id , employee.age , employee.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.city",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪些城市30岁以下的员工多于一个人？ | employee : employee.age , employee.city , employee.name , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.age",
      "employee.city",
      "employee.name",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "找出那些拥有不止一个30岁以下员工的城市。 | employee : employee.age , employee.city , employee.employee_id , employee.name , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.name",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "找出每个地方的商店的数量。 | shop : shop.district , shop.location , shop.name , shop.number_products , shop.shop_id , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.district",
      "shop.location",
      "shop.name",
      "shop.number_products",
      "shop.shop_id",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "每个地方有多少商店？ | shop : shop.district , shop.location , shop.name , shop.number_products , shop.shop_id , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.district",
      "shop.location",
      "shop.name",
      "shop.number_products",
      "shop.shop_id",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "找出产品数量最大的商店的经理姓名和所在地区。 | shop : shop.manager_name , shop.number_products , shop.district , shop.location , shop.name , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.manager_name",
      "shop.number_products",
      "shop.district",
      "shop.location",
      "shop.name",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "销售数量最多的商店的经理姓名和地区是什么？ | shop : shop.manager_name , shop.district , shop.number_products , shop.name , shop.location , shop.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.manager_name",
      "shop.district",
      "shop.number_products",
      "shop.name",
      "shop.location",
      "shop.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查找所有商店的最小和最大产品数量。 | shop : shop.number_products , shop.name , shop.location , shop.shop_id , shop.district , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.location",
      "shop.shop_id",
      "shop.district",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "所有商店的最小和最大产品数量是多少？ | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "按照产品数量的降序返回所有商店的名称、位置和区域。 | shop : shop.number_products , shop.name , shop.district , shop.location , shop.shop_id , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.district",
      "shop.location",
      "shop.shop_id",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "按产品编号降序对所有商店进行排序，并返回每个商店的名称、位置和区域。 | shop : shop.number_products , shop.name , shop.district , shop.location , shop.shop_id , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.district",
      "shop.location",
      "shop.shop_id",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查找产品数量超过平均产品数量的商店的名称。 | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪些商店的产品数量高于平均水平？把店名给我。 | shop : shop.number_products , shop.name , shop.shop_id , shop.location , shop.district , shop.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查找在评审中被奖励最多次数的员工的名字。 | employee : employee.name , employee.employee_id , employee.city , employee.age , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.city",
      "employee.age",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪位员工在评审中获得最多奖项？给我员工的名字。 | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.bonus",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查找获得最高奖金的员工的名字。 | employee : employee.name , employee.employee_id , employee.city , employee.age , employee.* | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.city",
      "employee.age",
      "employee.*",
      "evaluation.bonus",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪位员工获得最大奖金？给我员工的名字。 | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "找到那些从未在评审中获奖的员工的名字。 | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.year_awarded , evaluation.employee_id , evaluation.bonus , evaluation.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.bonus",
      "evaluation.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "那些从未接受过评估的员工的名字是什么？ | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.employee_id , evaluation.bonus , evaluation.year_awarded , evaluation.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.*",
    "output_sequence": " | ",
    "tc_original": [
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.employee_id",
      "evaluation.bonus",
      "evaluation.year_awarded",
      "evaluation.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "员工人数最多的商店名称是什么？ | shop : shop.name , shop.shop_id , shop.location , shop.number_products , shop.manager_name , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.employee_id , employee.name , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.number_products",
      "shop.manager_name",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.employee_id",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪个商店的员工最多？把店名给我。 | shop : shop.name , shop.shop_id , shop.location , shop.manager_name , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.manager_name",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查询不雇佣任何雇员的商店名称。 | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪些商店没有员工？查找店铺名称 | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查询每个商店雇佣的员工数量；并且显示商店名称。 | shop : shop.name , shop.shop_id , shop.location , shop.district , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.shop_id",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "对于每个商店，返回在那里工作的雇员人数和店名。 | shop : shop.name , shop.location , shop.shop_id , shop.district , shop.number_products , shop.* | hiring : hiring.employee_id , hiring.shop_id , hiring.start_from , hiring.is_full_time , hiring.* | employee : employee.name , employee.employee_id , employee.age , employee.city , employee.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.name",
      "shop.location",
      "shop.shop_id",
      "shop.district",
      "shop.number_products",
      "shop.*",
      "hiring.employee_id",
      "hiring.shop_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*",
      "employee.name",
      "employee.employee_id",
      "employee.age",
      "employee.city",
      "employee.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "所有评审中给出的总奖金是多少？ | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.bonus",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查询所有评审中所给出的奖金总额。 | evaluation : evaluation.bonus , evaluation.year_awarded , evaluation.employee_id , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.shop_id , shop.number_products , shop.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "evaluation.bonus",
      "evaluation.year_awarded",
      "evaluation.employee_id",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "给我有关招聘的所有信息。 | hiring : hiring.employee_id , hiring.is_full_time , hiring.start_from , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.number_products , shop.manager_name , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "hiring.employee_id",
      "hiring.is_full_time",
      "hiring.start_from",
      "hiring.shop_id",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.manager_name",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "招聘的所有信息是什么？ | hiring : hiring.employee_id , hiring.is_full_time , hiring.start_from , hiring.shop_id , hiring.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | shop : shop.name , shop.location , shop.district , shop.number_products , shop.manager_name , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.*",
    "output_sequence": " | ",
    "tc_original": [
      "hiring.employee_id",
      "hiring.is_full_time",
      "hiring.start_from",
      "hiring.shop_id",
      "hiring.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "shop.name",
      "shop.location",
      "shop.district",
      "shop.number_products",
      "shop.manager_name",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "哪个地区有少于3000种产品的商店和多于10000种产品的商店？ | shop : shop.number_products , shop.district , shop.location , shop.name , shop.shop_id , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.district",
      "shop.location",
      "shop.name",
      "shop.shop_id",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "查询那些既有卖不到3000件产品的商店又有卖超过1000件产品的商店的地区。 | shop : shop.number_products , shop.district , shop.location , shop.name , shop.shop_id , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.number_products",
      "shop.district",
      "shop.location",
      "shop.name",
      "shop.shop_id",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "有多少个不同的商店位置？ | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.city , employee.age , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.location",
      "shop.name",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.city",
      "employee.age",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "employee_hire_evaluation",
    "input_sequence": "计算不同商店位置的数量。 | shop : shop.location , shop.name , shop.district , shop.shop_id , shop.number_products , shop.* | evaluation : evaluation.bonus , evaluation.employee_id , evaluation.year_awarded , evaluation.* | employee : employee.name , employee.age , employee.city , employee.employee_id , employee.* | hiring : hiring.shop_id , hiring.employee_id , hiring.start_from , hiring.is_full_time , hiring.*",
    "output_sequence": " | ",
    "tc_original": [
      "shop.location",
      "shop.name",
      "shop.district",
      "shop.shop_id",
      "shop.number_products",
      "shop.*",
      "evaluation.bonus",
      "evaluation.employee_id",
      "evaluation.year_awarded",
      "evaluation.*",
      "employee.name",
      "employee.age",
      "employee.city",
      "employee.employee_id",
      "employee.*",
      "hiring.shop_id",
      "hiring.employee_id",
      "hiring.start_from",
      "hiring.is_full_time",
      "hiring.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "我们有多少份文件？ | documents : documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.template_id , documents.* | paragraphs : paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.version_number , templates.template_details , templates.template_id , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.template_id",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.version_number",
      "templates.template_details",
      "templates.template_id",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算文件的数量。 | documents : documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.template_id , documents.* | paragraphs : paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.version_number , templates.template_details , templates.template_id , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.template_id",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.version_number",
      "templates.template_details",
      "templates.template_id",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "列出所有文档的文档ID、文档名称和文档描述。 | documents : documents.document_description , documents.document_name , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_description",
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "所有文档的ID、名称和描述是什么？ | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "描述中带有字母'w'的文档名称和模板id是什么？ | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.template_details , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回描述中包含字母'w'的文档的名称和模板ID。 | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.template_details , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "'罗超的简历'文档的文档ID、模板id和描述是什么？ | documents : documents.document_description , documents.document_name , documents.template_id , documents.document_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_description",
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回名称为'罗超的简历'的文档的文档ID、模板id和描述。 | documents : documents.document_description , documents.document_name , documents.template_id , documents.document_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_description",
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "所有文档使用的不同模板有多少？ | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算文档中使用的不同模板的数量。 | documents : documents.template_id , documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "有多少文档使用'PPT'类型的模板？ | templates : templates.template_type_code ( PPT ) , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.template_id , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( PPT ) , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算使用'PPT'类型的模板的文档数。 | templates : templates.template_type_code ( PPT ) , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.template_id , documents.document_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( PPT ) , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有被使用的模板ID和每个模板被文档使用次数。 | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_to",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "文档中使用的所有不同的模板ID是什么，以及每个模板被使用了多少次？ | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "被文档使用次数最多的模板的ID和类型代码是什么？ | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回被文档所使用次数最多的模板的ID和类型代码。 | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_to",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有不止一次被文档使用的模板的ID。 | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_to , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_to",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "在不止一个文档中使用的模板的ID是什么？ | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有没被文档所使用过的模板的ID。 | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "在任何文档中都没被使用的模板的ID是什么？ | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.document_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "我们有多少模板？ | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.other_details , documents.document_id , documents.document_name , documents.document_description , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | paragraphs : paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.other_details",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算模板的数量。 | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.other_details , documents.document_id , documents.document_name , documents.document_description , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.other_details",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有模板的ID、版本号和模板类型代码。 | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "每个模板的ID、版本号和类型代码是什么？ | templates : templates.version_number , templates.template_type_code , templates.template_id , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有不同的模板类型代码。 | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.other_details , documents.document_name , documents.document_description , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.document_name",
      "documents.document_description",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "不同的模板类型代码是什么？ | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "模板类型代码是'PP'或'PPT'的模板ID是什么？ | templates : templates.template_id , templates.template_type_code ( PP , PPT ) , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.template_type_description , ref_template_types.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回具有代码'PP'或'PPT'的模板的ID。 | templates : templates.template_id , templates.template_type_code ( PP , PPT ) , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code ( PP , PPT ) , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_id",
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "有多少个模板的模板类型代码为'简历'？ | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | paragraphs : paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算'简历'类型的模板数。 | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | documents : documents.template_id , documents.document_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "documents.template_id",
      "documents.document_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "版本号晚于5的模板的版本号和模板类型代码是什么？ | templates : templates.template_type_code , templates.version_number , templates.date_effective_from , templates.date_effective_to , templates.template_id , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.date_effective_to",
      "templates.template_id",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回版本号大于5的模板的版本号和模板类型代码。 | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.template_details , templates.date_effective_to , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_to",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有模板类型代码和每个模板的模板数。 | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "不同的模板类型代码是什么，每个模板类型对应多少个模板？ | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "哪个模板类型代码对应的模板数量最多？ | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回数量最多的模板所属的模板类型的类型代码。 | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示少于三个模板的所有模板类型代码。 | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "少于3个模板的模板类型代码是什么？ | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.document_description , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.other_details",
      "documents.document_description",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "最小版本号及其模板类型代码是什么？ | templates : templates.template_type_code , templates.version_number , templates.template_id , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回最低版本号及其对应的模板类型代码。 | templates : templates.version_number , templates.template_type_code , templates.template_id , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "名称为'数据库'的文档所使用的模板的模板类型代码是什么？ | documents : documents.document_name , documents.document_description , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回名为'数据库'的文档使用的模板的模板类型代码。 | documents : documents.document_name , documents.template_id , documents.document_description , documents.document_id , documents.other_details , documents.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有使用模板类型代码为'BK'的文档名称。 | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "使用模板代码为'BK'的文档的名称是什么？ | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | templates : templates.template_type_code ( BK ) , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code ( BK ) , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有模板类型代码和使用每个类型的文档的数量。 | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "不同的模板类型代码是什么？以及每个类型被多少个文档使用？ | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "哪种模板类型代码被文档使用的最多？ | templates : templates.template_type_code , templates.template_id , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回文档中最常用的模板类型的代码。 | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示任何文档都没使用过的所有模板类型代码。 | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "任何文档都没使用过的的模板类型代码有哪些？ | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有模板类型代码和说明。 | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.other_details , documents.document_description , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.other_details",
      "documents.document_description",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "所有模板类型的类型代码和描述是什么？ | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "模板类型代码'广告'的模板类型说明是什么？ | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.other_details , documents.document_id , documents.document_description , documents.* | paragraphs : paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.other_details",
      "documents.document_id",
      "documents.document_description",
      "documents.*",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回模板类型代码是'广告'的模板类型描述。 | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.template_id , documents.document_name , documents.other_details , documents.document_id , documents.document_description , documents.* | paragraphs : paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.template_id",
      "documents.document_name",
      "documents.other_details",
      "documents.document_id",
      "documents.document_description",
      "documents.*",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "模板类型描述是'书本'的模板类型代码是什么？ | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_id , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回描述是'书'的模板类型的类型代码。 | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "对于任何文档使用过的模板，都有哪些不同的模板类型描述？ | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_type_code , templates.template_details , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_type_code",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回文档中使用过的模板的不同描述。 | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | documents : documents.document_description , documents.document_name , documents.template_id , documents.document_id , documents.other_details , documents.* | templates : templates.template_details , templates.template_type_code , templates.template_id , templates.version_number , templates.date_effective_from , templates.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "documents.document_description",
      "documents.document_name",
      "documents.template_id",
      "documents.document_id",
      "documents.other_details",
      "documents.*",
      "templates.template_details",
      "templates.template_type_code",
      "templates.template_id",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "模板类型描述是'演示'的模板ID是什么？ | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_type_code , templates.template_details , templates.version_number , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.template_details",
      "templates.version_number",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回对应描述为'演示'的模板的ID。 | ref_template_types : ref_template_types.template_type_description , ref_template_types.template_type_code , ref_template_types.* | templates : templates.template_id , templates.template_type_code , templates.version_number , templates.template_details , templates.date_effective_from , templates.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.paragraph_text , paragraphs.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_template_types.template_type_description",
      "ref_template_types.template_type_code",
      "ref_template_types.*",
      "templates.template_id",
      "templates.template_type_code",
      "templates.version_number",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.paragraph_text",
      "paragraphs.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "总共有多少段落？ | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.other_details , documents.document_id , documents.template_id , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.document_id",
      "documents.template_id",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算段落数。 | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.other_details , documents.document_id , documents.template_id , documents.document_description , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_type_code , templates.template_details , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.other_details",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.template_details",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "名为'夏日游览'的文件有多少段落？ | documents : documents.document_name , documents.document_description , documents.document_id , documents.other_details , documents.template_id , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.other_details",
      "documents.template_id",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "计算名为'夏日游览'的文件的段落数。 | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.template_details , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.template_details",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示包含文本'韩文'的段落的详细内容。 | paragraphs : paragraphs.paragraph_text , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | documents : documents.other_details , documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.*",
      "documents.other_details",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "包含'韩文'一词的段落的详细内容是什么？ | paragraphs : paragraphs.paragraph_text , paragraphs.other_details , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.* | documents : documents.document_name , documents.document_description , documents.other_details , documents.document_id , documents.template_id , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.document_id",
      "documents.template_id",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示名称为'欢迎来到纽约'的文件的所有段落ID和文本。 | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "在名称为'欢迎来到纽约'的文件中，段落的ID和文本是什么？ | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示名称为'客户评论'的文档的所有段落文本。 | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_description , documents.document_id , documents.template_id , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_description",
      "documents.document_id",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "名称为'客户评论'的文档中的段落文本是什么？ | documents : documents.document_name , documents.document_id , documents.document_description , documents.template_id , documents.other_details , documents.* | paragraphs : paragraphs.paragraph_text , paragraphs.paragraph_id , paragraphs.document_id , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_details , templates.template_id , templates.version_number , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.document_description",
      "documents.template_id",
      "documents.other_details",
      "documents.*",
      "paragraphs.paragraph_text",
      "paragraphs.paragraph_id",
      "paragraphs.document_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_details",
      "templates.template_id",
      "templates.version_number",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "按文件ID排序，显示所有文档ID和每个文档中的段落数。 | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "按id排序，返回不同的文档id以及每个文档对应的段落数量。 | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示所有文档ID、名称和每个文档中的段落数。 | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "每个文档的id和名称是什么，以及每个文档中的段落数量是多少？ | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "列出至少包含两个段落的所有文档的ID。 | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "有2个或更多段落的文档的ID是什么？ | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "段落数量最多的文档的ID和名称是什么？ | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回拥有最多段落数量的文档的ID和名称。 | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "段落数量最少的文档的ID是多少？ | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "返回段落数量最少的文档的ID。 | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "有1个或2个段落的文档ID是什么？ | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.template_id , documents.document_name , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.template_id",
      "documents.document_name",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "给出包含一到两个段落的文档的ID。 | paragraphs : paragraphs.document_id , paragraphs.paragraph_id , paragraphs.paragraph_text , paragraphs.other_details , paragraphs.* | documents : documents.document_id , documents.document_name , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.paragraph_text",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_id",
      "documents.document_name",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "显示段落包含文本'巴西'和'爱尔兰'的文档的ID。 | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "cre_Doc_Template_Mgt",
    "input_sequence": "段落包含文本'巴西'和'爱尔兰'的文档的ID是什么？ | paragraphs : paragraphs.paragraph_text , paragraphs.document_id , paragraphs.paragraph_id , paragraphs.other_details , paragraphs.* | documents : documents.document_name , documents.document_id , documents.template_id , documents.document_description , documents.other_details , documents.* | ref_template_types : ref_template_types.template_type_code , ref_template_types.template_type_description , ref_template_types.* | templates : templates.template_id , templates.version_number , templates.template_details , templates.template_type_code , templates.date_effective_from , templates.*",
    "output_sequence": " | ",
    "tc_original": [
      "paragraphs.paragraph_text",
      "paragraphs.document_id",
      "paragraphs.paragraph_id",
      "paragraphs.other_details",
      "paragraphs.*",
      "documents.document_name",
      "documents.document_id",
      "documents.template_id",
      "documents.document_description",
      "documents.other_details",
      "documents.*",
      "ref_template_types.template_type_code",
      "ref_template_types.template_type_description",
      "ref_template_types.*",
      "templates.template_id",
      "templates.version_number",
      "templates.template_details",
      "templates.template_type_code",
      "templates.date_effective_from",
      "templates.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "有多少老师？ | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.staring_date , course.course_id , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "教师总数是多少？ | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.staring_date , course.course_id , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "按年龄递增顺序列出教师姓名。 | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "按照年龄递增排序，老师的姓名是什么？ | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.staring_date , course.course_id , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "教师的年龄和家乡是什么？ | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.age",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "每个老师的年龄和家乡是什么？ | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.age",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "列出家乡不是'小杠杆市区'的教师的姓名。 | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "家乡不是'小杠杆城区'的老师叫什么名字？ | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "显示32岁或33岁的教师姓名。 | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "32岁或33岁的老师的名字是什么？ | teacher : teacher.name , teacher.age , teacher.teacher_id , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "最年轻的老师的家乡是哪里？ | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.age",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "最年轻的老师来自哪里？ | teacher : teacher.hometown , teacher.age , teacher.name , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.age",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "展示来自不同家乡的教师和来自每个家乡的教师数量。 | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "每一个家乡对应有多少老师？ | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "列出最常见的教师的家乡。 | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "最常见的教师的家乡是哪里？ | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "展示至少有两位老师来自的家乡。 | teacher : teacher.hometown , teacher.name , teacher.teacher_id , teacher.age , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "至少有两位教师来自的家乡是哪些？ | teacher : teacher.hometown , teacher.name , teacher.age , teacher.teacher_id , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.hometown",
      "teacher.name",
      "teacher.age",
      "teacher.teacher_id",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "展示老师的名字和安排他们教的课程。 | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.* | course : course.course , course.staring_date , course.course_id , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "每个老师的名字是什么？他们教什么课程？ | course : course.course , course.course_id , course.staring_date , course.* | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "按照老师名字的字母升序排列，显示老师的名字和安排他们教的课程。 | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.* | course : course.course , course.staring_date , course.course_id , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.grade",
      "course_arrange.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "将老师姓名按字母顺序升序排列，老师的姓名和他们教的课程是什么？ | course : course.course , course.course_id , course.staring_date , course.* | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "展示数学课的老师的名字。 | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.staring_date , course.course_id , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "教数学课的老师的名字是什么？ | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.course_id , course_arrange.teacher_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.teacher_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "显示教师姓名和他们教的课程数量。 | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "老师的名字是什么？他们教了多少门课？ | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "显示至少教两门课的教师的姓名。 | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.grade , course_arrange.course_id , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.teacher_id",
      "course_arrange.grade",
      "course_arrange.course_id",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "教至少两门课程的老师的名字是什么？ | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course : course.course , course.course_id , course.staring_date , course.* | course_arrange : course_arrange.teacher_id , course_arrange.course_id , course_arrange.grade , course_arrange.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course.course",
      "course.course_id",
      "course.staring_date",
      "course.*",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.grade",
      "course_arrange.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "列出没有被安排上课的老师的名字。 | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.* | course : course.course , course.staring_date , course.course_id , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "course_teach",
    "input_sequence": "没有被安排教课的老师的名字是什么？ | teacher : teacher.name , teacher.teacher_id , teacher.age , teacher.hometown , teacher.* | course_arrange : course_arrange.grade , course_arrange.teacher_id , course_arrange.course_id , course_arrange.* | course : course.course , course.staring_date , course.course_id , course.*",
    "output_sequence": " | ",
    "tc_original": [
      "teacher.name",
      "teacher.teacher_id",
      "teacher.age",
      "teacher.hometown",
      "teacher.*",
      "course_arrange.grade",
      "course_arrange.teacher_id",
      "course_arrange.course_id",
      "course_arrange.*",
      "course.course",
      "course.staring_date",
      "course.course_id",
      "course.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "30岁以下的游客有多少？ | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.total_spent , visit.museum_id , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.age",
      "visitor.name",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.museum_id",
      "visit.num_of_ticket",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "查找会员级别高于4的游客的姓名，并将结果按级别从高到低排序。 | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.museum_id , visit.visitor_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "会员级别不高于4的游客的平均年龄是多少？ | visitor : visitor.level_of_membership , visitor.age , visitor.name , visitor.id , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.age",
      "visitor.name",
      "visitor.id",
      "visitor.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "查找会员级别高于4的游客的姓名和会员级别，并按年龄从高到低进行排序。 | visitor : visitor.level_of_membership , visitor.name , visitor.age , visitor.id , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "找到员工人数最多的博物馆的ID和名称？ | museum : museum.num_of_staff , museum.museum_id , museum.name , museum.open_year , museum.* | visit : visit.museum_id , visit.visitor_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.num_of_staff",
      "museum.museum_id",
      "museum.name",
      "museum.open_year",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "查找在2009年之前开放的博物馆的平均工作人员数量。 | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visit : visit.museum_id , visit.visitor_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.num_of_staff",
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.age",
      "visitor.name",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "名称是'国家艺术馆'的博物馆的开馆年和员工人数是多少？ | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visit : visit.museum_id , visit.visitor_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.age , visitor.name , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.num_of_staff",
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.age",
      "visitor.name",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "查找工作人员人数超过2010年后开馆的博物馆的最少工作人员人数的博物馆的名称。 | museum : museum.num_of_staff , museum.open_year , museum.name , museum.museum_id , museum.* | visit : visit.museum_id , visit.visitor_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.num_of_staff",
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "找到不止一次参观博物馆的游客的id、姓名和年龄。 | visitor : visitor.id , visitor.age , visitor.name , visitor.level_of_membership , visitor.* | visit : visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.id",
      "visitor.age",
      "visitor.name",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "在所有的博物馆门票中，花钱最多的游客的id、姓名和会员级别是多少？ | visitor : visitor.level_of_membership , visitor.id , visitor.name , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.id",
      "visitor.name",
      "visitor.age",
      "visitor.*",
      "visit.total_spent",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.museum_id",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "被参观次数最多的博物馆的ID和名称是什么时候？ | museum : museum.museum_id , museum.open_year , museum.name , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.museum_id",
      "museum.open_year",
      "museum.name",
      "museum.num_of_staff",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "至今没有游客的博物馆叫什么名字？ | museum : museum.name , museum.open_year , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.name",
      "museum.open_year",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "找出一次买下最多票的游客的姓名和年龄。 | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.* | visit : visit.num_of_ticket , visit.visitor_id , visit.museum_id , visit.total_spent , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*",
      "visit.num_of_ticket",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "在所有的游玩中，购买的平均票数和最大票数是多少？ | visit : visit.num_of_ticket , visit.total_spent , visit.visitor_id , visit.museum_id , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "会员级别为'1'的游客的门票总费用是多少？ | visitor : visitor.level_of_membership , visitor.name , visitor.id , visitor.age , visitor.* | visit : visit.total_spent , visit.visitor_id , visit.num_of_ticket , visit.museum_id , visit.* | museum : museum.name , museum.museum_id , museum.open_year , museum.num_of_staff , museum.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.level_of_membership",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.*",
      "visit.total_spent",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.museum_id",
      "visit.*",
      "museum.name",
      "museum.museum_id",
      "museum.open_year",
      "museum.num_of_staff",
      "museum.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "既参观过2009年之前开放的博物馆又参观过2011年之后开放的博物馆的游客的名字是什么？ | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.* | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.museum_id , visit.num_of_ticket , visit.total_spent , visit.*",
    "output_sequence": " | ",
    "tc_original": [
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.*",
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "找到没有参观过2010年开放的博物馆的游客的人数。 | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.visitor_id , visit.museum_id , visit.total_spent , visit.num_of_ticket , visit.* | visitor : visitor.name , visitor.id , visitor.age , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.*",
      "visit.visitor_id",
      "visit.museum_id",
      "visit.total_spent",
      "visit.num_of_ticket",
      "visit.*",
      "visitor.name",
      "visitor.id",
      "visitor.age",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "museum_visit",
    "input_sequence": "2008年前或2013年后开放的博物馆有多少？ | museum : museum.open_year , museum.name , museum.museum_id , museum.num_of_staff , museum.* | visit : visit.museum_id , visit.visitor_id , visit.num_of_ticket , visit.total_spent , visit.* | visitor : visitor.name , visitor.age , visitor.id , visitor.level_of_membership , visitor.*",
    "output_sequence": " | ",
    "tc_original": [
      "museum.open_year",
      "museum.name",
      "museum.museum_id",
      "museum.num_of_staff",
      "museum.*",
      "visit.museum_id",
      "visit.visitor_id",
      "visit.num_of_ticket",
      "visit.total_spent",
      "visit.*",
      "visitor.name",
      "visitor.age",
      "visitor.id",
      "visitor.level_of_membership",
      "visitor.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出球员总数。 | players : players.player_id , players.first_name , players.last_name , players.country_code , players.hand , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.score , matches.minutes , matches.round , matches.year , matches.surface , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.country_code",
      "players.hand",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.score",
      "matches.minutes",
      "matches.round",
      "matches.year",
      "matches.surface",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "有多少球员？ | players : players.first_name , players.last_name , players.country_code , players.hand , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.year , matches.winner_name , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.country_code",
      "players.hand",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.year",
      "matches.winner_name",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出比赛的总数。 | matches : matches.match_num , matches.tourney_name , matches.round , matches.tourney_id , matches.tourney_date , matches.* | players : players.last_name , players.first_name , players.hand , players.player_id , players.country_code , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.match_num",
      "matches.tourney_name",
      "matches.round",
      "matches.tourney_id",
      "matches.tourney_date",
      "matches.*",
      "players.last_name",
      "players.first_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "计算比赛的数量。 | matches : matches.tourney_name , matches.match_num , matches.round , matches.score , matches.tourney_id , matches.* | players : players.last_name , players.first_name , players.hand , players.player_id , players.country_code , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.match_num",
      "matches.round",
      "matches.score",
      "matches.tourney_id",
      "matches.*",
      "players.last_name",
      "players.first_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "列出来自国家代码为'中国'的所有球员的名字和生日。 | players : players.country_code , players.first_name , players.birth_date , players.last_name , players.hand , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.birth_date",
      "players.last_name",
      "players.hand",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "来自'中国'的选手的名字和出生日期是什么？ | players : players.first_name , players.birth_date , players.country_code , players.last_name , players.player_id , players.* | matches : matches.winner_name , matches.minutes , matches.score , matches.round , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.birth_date",
      "players.country_code",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.winner_name",
      "matches.minutes",
      "matches.score",
      "matches.round",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出所有比赛的失败者和胜利者的平均年龄。 | matches : matches.loser_age , matches.winner_age , matches.loser_entry , matches.winner_entry , matches.winner_name , matches.* | players : players.hand , players.last_name , players.player_id , players.first_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_age",
      "matches.winner_age",
      "matches.loser_entry",
      "matches.winner_entry",
      "matches.winner_name",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "所有比赛中输家和赢家的平均年龄是多少？ | matches : matches.loser_age , matches.winner_age , matches.loser_entry , matches.winner_name , matches.winner_entry , matches.* | players : players.hand , players.last_name , players.first_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_age",
      "matches.winner_age",
      "matches.loser_entry",
      "matches.winner_name",
      "matches.winner_entry",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.first_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出所有比赛中胜利者的平均排名。 | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.winner_rank , matches.winner_name , matches.winner_entry , matches.winner_hand , matches.winner_rank_points , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.country_code , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.winner_rank",
      "matches.winner_name",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.winner_rank_points",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在所有比赛中胜利者平均排名是多少？ | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.winner_rank , matches.winner_name , matches.winner_rank_points , matches.winner_entry , matches.winner_hand , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.country_code , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.winner_rank",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出所有比赛中失败者的最高排名。 | rankings : rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.player_id , rankings.tours , rankings.* | matches : matches.winner_rank , matches.loser_rank , matches.winner_name , matches.winner_rank_points , matches.winner_entry , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.country_code , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.tours",
      "rankings.*",
      "matches.winner_rank",
      "matches.loser_rank",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.winner_entry",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在所有比赛中输家的最好的排名是多少？ | matches : matches.loser_rank , matches.winner_rank , matches.loser_name , matches.loser_entry , matches.winner_name , matches.* | rankings : rankings.ranking , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.player_id , rankings.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.country_code , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_rank",
      "matches.winner_rank",
      "matches.loser_name",
      "matches.loser_entry",
      "matches.winner_name",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出所有球员所属的不同的国家代码的数量。 | players : players.country_code , players.hand , players.first_name , players.player_id , players.last_name , players.* | matches : matches.minutes , matches.round , matches.score , matches.year , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.first_name",
      "players.player_id",
      "players.last_name",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.year",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "球员来自多少个不同的国家？ | players : players.country_code , players.first_name , players.hand , players.last_name , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.hand",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出不同的失败者姓名的数量。 | matches : matches.loser_name , matches.winner_name , matches.loser_rank , matches.loser_rank_points , matches.loser_seed , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.winner_name",
      "matches.loser_rank",
      "matches.loser_rank_points",
      "matches.loser_seed",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "失败者有多少不同的的名字？ | matches : matches.loser_name , matches.winner_name , matches.loser_rank , matches.winner_rank , matches.loser_rank_points , matches.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.country_code , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.winner_name",
      "matches.loser_rank",
      "matches.winner_rank",
      "matches.loser_rank_points",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.country_code",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找到有超过10场比赛的联赛的名称。 | matches : matches.tourney_name , matches.tourney_id , matches.tourney_level , matches.match_num , matches.tourney_date , matches.* | players : players.hand , players.last_name , players.player_id , players.first_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.tourney_id",
      "matches.tourney_level",
      "matches.match_num",
      "matches.tourney_date",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "有超过10场比赛的联赛名称是什么？ | matches : matches.tourney_name , matches.match_num , matches.tourney_id , matches.tourney_level , matches.tourney_date , matches.* | players : players.hand , players.last_name , players.player_id , players.first_name , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.match_num",
      "matches.tourney_id",
      "matches.tourney_level",
      "matches.tourney_date",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "列出所有在2013年和2016年中获胜者的名字。 | matches : matches.winner_name , matches.year , matches.loser_name , matches.winner_rank , matches.winner_rank_points , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.year",
      "matches.loser_name",
      "matches.winner_rank",
      "matches.winner_rank_points",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在2013年和2016年中获胜的球员的名字是什么？ | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | matches : matches.year , matches.winner_name , matches.loser_name , matches.winner_rank_points , matches.winner_hand , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.ranking_date , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.birth_date",
      "players.*",
      "matches.year",
      "matches.winner_name",
      "matches.loser_name",
      "matches.winner_rank_points",
      "matches.winner_hand",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "列出所有在2013年或2016年中的比赛的数量。 | matches : matches.year , matches.tourney_date , matches.tourney_name , matches.tourney_id , matches.match_num , matches.* | players : players.hand , players.last_name , players.first_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.tourney_date",
      "matches.tourney_name",
      "matches.tourney_id",
      "matches.match_num",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.first_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在2013年或2016年中有多少场比赛？ | matches : matches.year , matches.match_num , matches.minutes , matches.round , matches.score , matches.* | players : players.hand , players.last_name , players.first_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.first_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在'WTA锦标赛'和'澳大利亚公开赛'中都取胜的球员的国家代码和名字是什么？ | players : players.country_code , players.first_name , players.last_name , players.player_id , players.hand , players.* | matches : matches.tourney_name , matches.winner_name , matches.winner_hand , matches.loser_name , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.*",
      "matches.tourney_name",
      "matches.winner_name",
      "matches.winner_hand",
      "matches.loser_name",
      "matches.tourney_date",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "获得'WTA锦标赛'和'澳大利亚公开赛冠军'的球员的名字和国家代码是什么？ | players : players.first_name , players.country_code , players.last_name , players.player_id , players.hand , players.* | matches : matches.tourney_name , matches.winner_name , matches.winner_rank , matches.tourney_level , matches.winner_entry , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.*",
      "matches.tourney_name",
      "matches.winner_name",
      "matches.winner_rank",
      "matches.tourney_level",
      "matches.winner_entry",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "查找最老的球员的名字和国家代码。 | players : players.first_name , players.country_code , players.birth_date , players.last_name , players.player_id , players.* | matches : matches.loser_age , matches.winner_age , matches.year , matches.minutes , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.birth_date",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.loser_age",
      "matches.winner_age",
      "matches.year",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "最老的球员的名字和国家代码是什么？ | players : players.country_code , players.first_name , players.birth_date , players.last_name , players.player_id , players.* | matches : matches.loser_age , matches.winner_age , matches.year , matches.minutes , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.birth_date",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.loser_age",
      "matches.winner_age",
      "matches.year",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "按出生日期顺序列出所有球员的名字和姓氏。 | players : players.last_name , players.first_name , players.birth_date , players.hand , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.last_name",
      "players.first_name",
      "players.birth_date",
      "players.hand",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "按出生日期排序，所有球员的全名是什么？ | players : players.first_name , players.last_name , players.birth_date , players.hand , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.hand",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "按照出生日期的顺序列出左手球员的名字和姓氏。 | players : players.last_name , players.first_name , players.birth_date , players.hand , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.last_name",
      "players.first_name",
      "players.birth_date",
      "players.hand",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "根据出生日期顺序，所有左手球员的全名是什么？ | players : players.last_name , players.first_name , players.birth_date , players.hand , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.last_name",
      "players.first_name",
      "players.birth_date",
      "players.hand",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出巡回比赛次数最多的球员的名字和国家代码。 | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | matches : matches.round , matches.tourney_id , matches.winner_name , matches.match_num , matches.tourney_date , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.player_id",
      "players.last_name",
      "players.hand",
      "players.*",
      "matches.round",
      "matches.tourney_id",
      "matches.winner_name",
      "matches.match_num",
      "matches.tourney_date",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "巡回次数最多的球员的名字和国家代码是什么？ | players : players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.* | rankings : rankings.tours , rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.* | matches : matches.round , matches.tourney_id , matches.winner_name , matches.tourney_date , matches.match_num , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.country_code",
      "players.player_id",
      "players.last_name",
      "players.hand",
      "players.*",
      "rankings.tours",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.ranking_date",
      "rankings.*",
      "matches.round",
      "matches.tourney_id",
      "matches.winner_name",
      "matches.tourney_date",
      "matches.match_num",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出比赛数量最多的一年。 | matches : matches.year , matches.tourney_date , matches.tourney_name , matches.match_num , matches.tourney_id , matches.* | players : players.hand , players.last_name , players.first_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.tourney_date",
      "matches.tourney_name",
      "matches.match_num",
      "matches.tourney_id",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.first_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "哪一年的比赛最多？ | matches : matches.year , matches.tourney_date , matches.tourney_name , matches.match_num , matches.tourney_id , matches.* | players : players.hand , players.last_name , players.first_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.tourney_date",
      "matches.tourney_name",
      "matches.match_num",
      "matches.tourney_id",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.first_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出获胜次数最多的获胜者的名字和排名积分。 | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | players : players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.* | matches : matches.winner_name , matches.winner_rank_points , matches.loser_name , matches.loser_rank_points , matches.winner_rank , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*",
      "players.first_name",
      "players.player_id",
      "players.last_name",
      "players.hand",
      "players.birth_date",
      "players.*",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.loser_name",
      "matches.loser_rank_points",
      "matches.winner_rank",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "赢得比赛最多的赢家的名字是什么？这些球员的排名积分是多少？ | rankings : rankings.ranking_points , rankings.player_id , rankings.ranking , rankings.ranking_date , rankings.tours , rankings.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | matches : matches.winner_name , matches.loser_name , matches.winner_rank_points , matches.loser_rank_points , matches.winner_rank , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.birth_date",
      "players.*",
      "matches.winner_name",
      "matches.loser_name",
      "matches.winner_rank_points",
      "matches.loser_rank_points",
      "matches.winner_rank",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出那些排名积分最高的并且参加过'澳大利亚公开赛'的获胜者的名字。 | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.winner_name , matches.loser_name , matches.tourney_name , matches.winner_rank_points , matches.loser_rank_points , matches.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.country_code , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.winner_name",
      "matches.loser_name",
      "matches.tourney_name",
      "matches.winner_rank_points",
      "matches.loser_rank_points",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.country_code",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "参加'澳大利亚公开赛'的排名积分最高的获胜者叫什么名字？ | matches : matches.winner_name , matches.tourney_name , matches.loser_name , matches.winner_rank_points , matches.winner_rank , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.country_code , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.tourney_name",
      "matches.loser_name",
      "matches.winner_rank_points",
      "matches.winner_rank",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.country_code",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出比赛时间最长的输家和赢家的名字。 | matches : matches.loser_name , matches.minutes , matches.winner_name , matches.loser_rank_points , matches.winner_entry , matches.* | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.minutes",
      "matches.winner_name",
      "matches.loser_rank_points",
      "matches.winner_entry",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "比赛时间最长的胜利者和失败者的名字是什么？ | matches : matches.loser_name , matches.minutes , matches.winner_name , matches.round , matches.loser_rank_points , matches.* | players : players.first_name , players.last_name , players.hand , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.loser_name",
      "matches.minutes",
      "matches.winner_name",
      "matches.round",
      "matches.loser_rank_points",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.hand",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出每个球员的平均排名和他们的名字。 | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.winner_name , matches.winner_rank , matches.minutes , matches.round , matches.score , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.winner_name",
      "matches.winner_rank",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "所有球员的名字以及他们的平均排名是什么？ | players : players.first_name , players.last_name , players.player_id , players.hand , players.country_code , players.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.winner_rank , matches.winner_name , matches.winner_rank_points , matches.year , matches.minutes , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.country_code",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.winner_rank",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.year",
      "matches.minutes",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出每个球员的总排名得分和他们的名字。 | players : players.first_name , players.last_name , players.player_id , players.hand , players.birth_date , players.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.* | matches : matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.score , matches.minutes , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.birth_date",
      "players.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.winner_rank",
      "matches.score",
      "matches.minutes",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "所有球员的名字，以及他们的总排名积分是什么？ | players : players.first_name , players.last_name , players.player_id , players.hand , players.country_code , players.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | matches : matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.score , matches.year , matches.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.hand",
      "players.country_code",
      "players.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*",
      "matches.winner_rank_points",
      "matches.winner_name",
      "matches.winner_rank",
      "matches.score",
      "matches.year",
      "matches.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出每个国家的球员数量。 | players : players.country_code , players.hand , players.first_name , players.last_name , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.year , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.year",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "每个国家有多少球员？ | players : players.country_code , players.hand , players.first_name , players.last_name , players.player_id , players.* | matches : matches.minutes , matches.round , matches.score , matches.surface , matches.year , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.surface",
      "matches.year",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找到拥有球员数量最多的国家的代码。 | players : players.country_code , players.player_id , players.first_name , players.hand , players.last_name , players.* | matches : matches.minutes , matches.round , matches.score , matches.year , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.first_name",
      "players.hand",
      "players.last_name",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.year",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "拥有最多球员的国家的代码是什么？ | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | matches : matches.minutes , matches.round , matches.score , matches.year , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.*",
      "matches.minutes",
      "matches.round",
      "matches.score",
      "matches.year",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出拥有超过50名球员的国家的代码。 | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | matches : matches.score , matches.year , matches.minutes , matches.round , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.*",
      "matches.score",
      "matches.year",
      "matches.minutes",
      "matches.round",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "拥有超过50名球员的国家的代码是什么？ | players : players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.* | matches : matches.score , matches.year , matches.minutes , matches.round , matches.surface , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.player_id",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.*",
      "matches.score",
      "matches.year",
      "matches.minutes",
      "matches.round",
      "matches.surface",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "查找每个排名日期的巡回比赛的总数。 | rankings : rankings.ranking_date , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.* | matches : matches.tourney_date , matches.round , matches.tourney_name , matches.tourney_id , matches.match_num , matches.* | players : players.hand , players.last_name , players.player_id , players.first_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_date",
      "rankings.ranking",
      "rankings.tours",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.*",
      "matches.tourney_date",
      "matches.round",
      "matches.tourney_name",
      "matches.tourney_id",
      "matches.match_num",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "每个排名日期总共有多少次巡回比赛？ | rankings : rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.* | matches : matches.tourney_date , matches.round , matches.minutes , matches.score , matches.surface , matches.* | players : players.hand , players.last_name , players.player_id , players.first_name , players.birth_date , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.*",
      "matches.tourney_date",
      "matches.round",
      "matches.minutes",
      "matches.score",
      "matches.surface",
      "matches.*",
      "players.hand",
      "players.last_name",
      "players.player_id",
      "players.first_name",
      "players.birth_date",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出每年进行的比赛次数。 | matches : matches.year , matches.tourney_name , matches.match_num , matches.tourney_date , matches.tourney_id , matches.* | players : players.last_name , players.hand , players.first_name , players.player_id , players.country_code , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.tourney_name",
      "matches.match_num",
      "matches.tourney_date",
      "matches.tourney_id",
      "matches.*",
      "players.last_name",
      "players.hand",
      "players.first_name",
      "players.player_id",
      "players.country_code",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "每年有多少场比赛？ | matches : matches.year , matches.tourney_name , matches.match_num , matches.minutes , matches.round , matches.* | players : players.last_name , players.hand , players.first_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_date , rankings.ranking_points , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.year",
      "matches.tourney_name",
      "matches.match_num",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "players.last_name",
      "players.hand",
      "players.first_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出所有比赛中3个最年轻的获胜者的名字和排名。 | matches : matches.winner_name , matches.winner_age , matches.loser_name , matches.winner_seed , matches.winner_rank , matches.* | rankings : rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.* | players : players.first_name , players.last_name , players.birth_date , players.player_id , players.hand , players.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.winner_age",
      "matches.loser_name",
      "matches.winner_seed",
      "matches.winner_rank",
      "matches.*",
      "rankings.ranking",
      "rankings.ranking_points",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.player_id",
      "players.hand",
      "players.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在所有比赛中，三个最年轻的获胜者的名字和等级是什么？ | matches : matches.winner_name , matches.winner_age , matches.winner_rank , matches.loser_name , matches.loser_rank , matches.* | players : players.first_name , players.last_name , players.birth_date , players.hand , players.player_id , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.winner_name",
      "matches.winner_age",
      "matches.winner_rank",
      "matches.loser_name",
      "matches.loser_rank",
      "matches.*",
      "players.first_name",
      "players.last_name",
      "players.birth_date",
      "players.hand",
      "players.player_id",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "有多少不同的获胜者都参加了'WTA锦标赛'，并且都是左撇子？ | matches : matches.tourney_name , matches.winner_entry , matches.winner_hand , matches.winner_name , matches.winner_id , matches.* | players : players.hand , players.first_name , players.last_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.winner_name",
      "matches.winner_id",
      "matches.*",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出参加'WTA锦标赛'的左撇子获胜者的数目。 | matches : matches.tourney_name , matches.winner_entry , matches.winner_hand , matches.loser_seed , matches.winner_name , matches.* | players : players.hand , players.first_name , players.last_name , players.player_id , players.birth_date , players.* | rankings : rankings.ranking , rankings.ranking_date , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "matches.tourney_name",
      "matches.winner_entry",
      "matches.winner_hand",
      "matches.loser_seed",
      "matches.winner_name",
      "matches.*",
      "players.hand",
      "players.first_name",
      "players.last_name",
      "players.player_id",
      "players.birth_date",
      "players.*",
      "rankings.ranking",
      "rankings.ranking_date",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出在所有比赛中排名积分最高的获胜者的姓名、国家代码和生日。 | players : players.country_code , players.first_name , players.birth_date , players.last_name , players.player_id , players.* | matches : matches.winner_name , matches.winner_rank_points , matches.loser_name , matches.winner_rank , matches.loser_rank_points , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.birth_date",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.winner_name",
      "matches.winner_rank_points",
      "matches.loser_name",
      "matches.winner_rank",
      "matches.loser_rank_points",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "在所有比赛中得分最高的选手的名字、国家代码和生日是什么？ | players : players.country_code , players.first_name , players.birth_date , players.last_name , players.player_id , players.* | matches : matches.winner_name , matches.score , matches.winner_rank_points , matches.winner_rank , matches.winner_seed , matches.* | rankings : rankings.ranking_points , rankings.ranking , rankings.player_id , rankings.ranking_date , rankings.tours , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.country_code",
      "players.first_name",
      "players.birth_date",
      "players.last_name",
      "players.player_id",
      "players.*",
      "matches.winner_name",
      "matches.score",
      "matches.winner_rank_points",
      "matches.winner_rank",
      "matches.winner_seed",
      "matches.*",
      "rankings.ranking_points",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_date",
      "rankings.tours",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "找出每个手型的球员数。 | players : players.hand , players.player_id , players.first_name , players.last_name , players.country_code , players.* | matches : matches.winner_hand , matches.year , matches.loser_hand , matches.minutes , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.country_code",
      "players.*",
      "matches.winner_hand",
      "matches.year",
      "matches.loser_hand",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "wta_1",
    "input_sequence": "每一种手型有多少球员？ | players : players.hand , players.player_id , players.first_name , players.last_name , players.country_code , players.* | matches : matches.winner_hand , matches.loser_hand , matches.year , matches.minutes , matches.round , matches.* | rankings : rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date , rankings.*",
    "output_sequence": " | ",
    "tc_original": [
      "players.hand",
      "players.player_id",
      "players.first_name",
      "players.last_name",
      "players.country_code",
      "players.*",
      "matches.winner_hand",
      "matches.loser_hand",
      "matches.year",
      "matches.minutes",
      "matches.round",
      "matches.*",
      "rankings.ranking",
      "rankings.player_id",
      "rankings.ranking_points",
      "rankings.tours",
      "rankings.ranking_date",
      "rankings.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "有多少艘船最终被'俘虏'？ | ship : ship.lost_in_battle , ship.id , ship.name , ship.disposition_of_ship , ship.ship_type , ship.* | battle : battle.result , battle.name , battle.id , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.lost_in_battle",
      "ship.id",
      "ship.name",
      "ship.disposition_of_ship",
      "ship.ship_type",
      "ship.*",
      "battle.result",
      "battle.name",
      "battle.id",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "按名称的字母顺序降序列出名称和吨位。 | ship : ship.tonnage , ship.name , ship.disposition_of_ship , ship.ship_type , ship.id , ship.* | battle : battle.id , battle.name , battle.date , battle.result , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.tonnage",
      "ship.name",
      "ship.disposition_of_ship",
      "ship.ship_type",
      "ship.id",
      "ship.*",
      "battle.id",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "列出每一场战斗的名称、日期和结果。 | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.location , ship.tonnage , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.id",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.name",
      "ship.id",
      "ship.location",
      "ship.tonnage",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "每一次造成的最大和最小死亡人数是多少？ | death : death.killed , death.caused_by_ship_id , death.id , death.injured , death.note , death.* | battle : battle.name , battle.result , battle.id , battle.date , battle.bulgarian_commander , battle.* | ship : ship.id , ship.name , ship.location , ship.tonnage , ship.ship_type , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.killed",
      "death.caused_by_ship_id",
      "death.id",
      "death.injured",
      "death.note",
      "death.*",
      "battle.name",
      "battle.result",
      "battle.id",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.tonnage",
      "ship.ship_type",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "平均每次受伤次数是多少？ | death : death.injured , death.id , death.caused_by_ship_id , death.killed , death.note , death.* | battle : battle.name , battle.date , battle.id , battle.result , battle.bulgarian_commander , battle.* | ship : ship.name , ship.id , ship.location , ship.tonnage , ship.ship_type , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.injured",
      "death.id",
      "death.caused_by_ship_id",
      "death.killed",
      "death.note",
      "death.*",
      "battle.name",
      "battle.date",
      "battle.id",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*",
      "ship.name",
      "ship.id",
      "ship.location",
      "ship.tonnage",
      "ship.ship_type",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "吨位为'T'的船舶造成的伤亡事故是什么？ | ship : ship.tonnage , ship.lost_in_battle , ship.name , ship.ship_type , ship.id , ship.* | death : death.caused_by_ship_id , death.injured , death.killed , death.id , death.note , death.* | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.tonnage",
      "ship.lost_in_battle",
      "ship.name",
      "ship.ship_type",
      "ship.id",
      "ship.*",
      "death.caused_by_ship_id",
      "death.injured",
      "death.killed",
      "death.id",
      "death.note",
      "death.*",
      "battle.id",
      "battle.name",
      "battle.result",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "当保加利亚的指挥官不是'博瑞尔'时，战争的名称和结果是什么？ | battle : battle.bulgarian_commander , battle.result , battle.name , battle.date , battle.id , battle.* | ship : ship.id , ship.name , ship.location , ship.tonnage , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.caused_by_ship_id , death.injured , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.bulgarian_commander",
      "battle.result",
      "battle.name",
      "battle.date",
      "battle.id",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.tonnage",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.caused_by_ship_id",
      "death.injured",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "损失过'帆船'船只的战斗的不同的id和名称是什么？ | ship : ship.ship_type , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.* | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.caused_by_ship_id , death.injured , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.ship_type",
      "ship.lost_in_battle",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.*",
      "battle.id",
      "battle.name",
      "battle.result",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.caused_by_ship_id",
      "death.injured",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "导致总共超过10人死亡的战斗的ID和名称是什么？ | battle : battle.id , battle.name , battle.result , battle.date , battle.bulgarian_commander , battle.* | death : death.killed , death.caused_by_ship_id , death.id , death.note , death.injured , death.* | ship : ship.id , ship.name , ship.location , ship.lost_in_battle , ship.tonnage , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.id",
      "battle.name",
      "battle.result",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "death.killed",
      "death.caused_by_ship_id",
      "death.id",
      "death.note",
      "death.injured",
      "death.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.lost_in_battle",
      "ship.tonnage",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "造成总伤害最多的船的ID和名称是什么？ | ship : ship.id , ship.name , ship.ship_type , ship.lost_in_battle , ship.location , ship.* | death : death.caused_by_ship_id , death.injured , death.id , death.killed , death.note , death.* | battle : battle.id , battle.result , battle.name , battle.date , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.id",
      "ship.name",
      "ship.ship_type",
      "ship.lost_in_battle",
      "ship.location",
      "ship.*",
      "death.caused_by_ship_id",
      "death.injured",
      "death.id",
      "death.killed",
      "death.note",
      "death.*",
      "battle.id",
      "battle.result",
      "battle.name",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "在保加利亚指挥官'卡洛扬'和拉丁指挥官'鲍德温一世'之间，有哪些不同的战斗名称？ | battle : battle.name , battle.latin_commander , battle.bulgarian_commander , battle.result , battle.id , battle.* | ship : ship.id , ship.name , ship.location , ship.tonnage , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.injured , death.caused_by_ship_id , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.name",
      "battle.latin_commander",
      "battle.bulgarian_commander",
      "battle.result",
      "battle.id",
      "battle.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.tonnage",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "战斗共有多少不同的结果？ | battle : battle.result , battle.name , battle.id , battle.date , battle.bulgarian_commander , battle.* | death : death.id , death.killed , death.note , death.injured , death.caused_by_ship_id , death.* | ship : ship.id , ship.name , ship.location , ship.ship_type , ship.lost_in_battle , ship.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.result",
      "battle.name",
      "battle.id",
      "battle.date",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.killed",
      "death.note",
      "death.injured",
      "death.caused_by_ship_id",
      "death.*",
      "ship.id",
      "ship.name",
      "ship.location",
      "ship.ship_type",
      "ship.lost_in_battle",
      "ship.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "有多少次战斗没有失去吨位为'225'的船只？ | ship : ship.tonnage , ship.lost_in_battle , ship.name , ship.ship_type , ship.id , ship.* | battle : battle.name , battle.result , battle.date , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.caused_by_ship_id , death.injured , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.tonnage",
      "ship.lost_in_battle",
      "ship.name",
      "ship.ship_type",
      "ship.id",
      "ship.*",
      "battle.name",
      "battle.result",
      "battle.date",
      "battle.id",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.caused_by_ship_id",
      "death.injured",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "列出失去'远征'号和'长征号'号战舰的战斗的名称和日期。 | ship : ship.lost_in_battle , ship.name , ship.ship_type , ship.id , ship.location , ship.* | battle : battle.name , battle.date , battle.result , battle.id , battle.bulgarian_commander , battle.* | death : death.id , death.note , death.killed , death.caused_by_ship_id , death.injured , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "ship.lost_in_battle",
      "ship.name",
      "ship.ship_type",
      "ship.id",
      "ship.location",
      "ship.*",
      "battle.name",
      "battle.date",
      "battle.result",
      "battle.id",
      "battle.bulgarian_commander",
      "battle.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.caused_by_ship_id",
      "death.injured",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "显示在'英吉利海峡'中没有船只损失的战斗的名称、结果和保加利亚指挥官。 | battle : battle.bulgarian_commander , battle.name , battle.result , battle.id , battle.date , battle.* | ship : ship.lost_in_battle , ship.location , ship.name , ship.id , ship.ship_type , ship.* | death : death.id , death.note , death.killed , death.caused_by_ship_id , death.injured , death.*",
    "output_sequence": " | ",
    "tc_original": [
      "battle.bulgarian_commander",
      "battle.name",
      "battle.result",
      "battle.id",
      "battle.date",
      "battle.*",
      "ship.lost_in_battle",
      "ship.location",
      "ship.name",
      "ship.id",
      "ship.ship_type",
      "ship.*",
      "death.id",
      "death.note",
      "death.killed",
      "death.caused_by_ship_id",
      "death.injured",
      "death.*"
    ]
  },
  {
    "db_id": "battle_death",
    "input_sequence": "包含文本为'东'的死亡事件的注解是什么？ | death : death.note , death.killed , death.injured , death.caused_by_ship_id , death.id , death.* | ship : ship.name , ship.id , ship.location , ship.tonnage , ship.ship_type , ship.* | battle : battle.name , battle.id , battle.date , battle.result , battle.bulgarian_commander , battle.*",
    "output_sequence": " | ",
    "tc_original": [
      "death.note",
      "death.killed",
      "death.injured",
      "death.caused_by_ship_id",
      "death.id",
      "death.*",
      "ship.name",
      "ship.id",
      "ship.location",
      "ship.tonnage",
      "ship.ship_type",
      "ship.*",
      "battle.name",
      "battle.id",
      "battle.date",
      "battle.result",
      "battle.bulgarian_commander",
      "battle.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "包括第一行和第二行的所有地址是什么？ | addresses : addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.address_id , addresses.other_address_details , addresses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.other_address_details",
      "addresses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "所有地址的第一和第二行是什么？ | addresses : addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.other_address_details , addresses.address_id , addresses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.other_address_details",
      "addresses.address_id",
      "addresses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "总共列出了多少门课程？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | addresses : addresses.city , addresses.country , addresses.state_province_county , addresses.line_1 , addresses.zip_postcode , addresses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.zip_postcode",
      "addresses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "有多少门课？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.other_address_details , addresses.line_1 , addresses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.middle_name , students.last_name , students.first_name , students.other_student_details , students.student_id , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.middle_name",
      "students.last_name",
      "students.first_name",
      "students.other_student_details",
      "students.student_id",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "'数学'课程是怎样描述的？ | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | addresses : addresses.city , addresses.country , addresses.state_province_county , addresses.line_1 , addresses.line_2 , addresses.* | sections : sections.section_description , sections.section_name , sections.course_id , sections.other_details , sections.section_id , sections.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_description",
      "courses.course_name",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "sections.section_description",
      "sections.section_name",
      "sections.course_id",
      "sections.other_details",
      "sections.section_id",
      "sections.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "所有数学课程的描述是什么？ | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.state_province_county , addresses.address_id , addresses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.middle_name , students.student_id , students.first_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_description",
      "courses.course_name",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.state_province_county",
      "addresses.address_id",
      "addresses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.middle_name",
      "students.student_id",
      "students.first_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "'大连'城市的邮政编码是什么？ | addresses : addresses.zip_postcode , addresses.city , addresses.address_id , addresses.state_province_county , addresses.other_address_details , addresses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.zip_postcode",
      "addresses.city",
      "addresses.address_id",
      "addresses.state_province_county",
      "addresses.other_address_details",
      "addresses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "'大连'的邮政编码是什么？ | addresses : addresses.zip_postcode , addresses.city , addresses.state_province_county , addresses.other_address_details , addresses.address_id , addresses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.zip_postcode",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.other_address_details",
      "addresses.address_id",
      "addresses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "哪个学院授予的学位最多？列出学院名称和ID。 | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "对于每个学院ID，学位数目最多的学院的名称是什么？ | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "有多少学院可以授予学位？ | degree_programs : degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.state_province_county , addresses.* | students : students.middle_name , students.last_name , students.student_id , students.first_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.state_province_county",
      "addresses.*",
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "有多少不同的学院可以授予学位？ | degree_programs : degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.country , addresses.city , addresses.address_id , addresses.line_1 , addresses.zip_postcode , addresses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "addresses.country",
      "addresses.city",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.zip_postcode",
      "addresses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "有多少个不同的学位名称？ | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.line_1 , addresses.other_address_details , addresses.* | students : students.middle_name , students.first_name , students.last_name , students.student_id , students.email_address , students.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.other_address_details",
      "addresses.*",
      "students.middle_name",
      "students.first_name",
      "students.last_name",
      "students.student_id",
      "students.email_address",
      "students.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "授予多少个不同的学位？ | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.degree_program_id , degree_programs.other_details , degree_programs.* | addresses : addresses.state_province_county , addresses.country , addresses.city , addresses.line_1 , addresses.zip_postcode , addresses.* | departments : departments.department_name , departments.department_description , departments.other_details , departments.department_id , departments.* | students : students.middle_name , students.last_name , students.first_name , students.email_address , students.other_student_details , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "addresses.state_province_county",
      "addresses.country",
      "addresses.city",
      "addresses.line_1",
      "addresses.zip_postcode",
      "addresses.*",
      "departments.department_name",
      "departments.department_description",
      "departments.other_details",
      "departments.department_id",
      "departments.*",
      "students.middle_name",
      "students.last_name",
      "students.first_name",
      "students.email_address",
      "students.other_student_details",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "'工程'学院提供多少学位？ | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.state_province_county , addresses.* | students : students.middle_name , students.student_id , students.first_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.state_province_county",
      "addresses.*",
      "students.middle_name",
      "students.student_id",
      "students.first_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "'工程'学院有多少学位？ | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | degree_programs : degree_programs.department_id , degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.state_province_county , addresses.other_address_details , addresses.* | students : students.middle_name , students.student_id , students.first_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "degree_programs.department_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.state_province_county",
      "addresses.other_address_details",
      "addresses.*",
      "students.middle_name",
      "students.student_id",
      "students.first_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "所有章节的名称和描述是什么？ | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.section_id",
      "sections.course_id",
      "sections.other_details",
      "sections.*",
      "courses.course_description",
      "courses.course_name",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "所有章节的名称和描述是什么？ | sections : sections.section_name , sections.section_description , sections.section_id , sections.course_id , sections.other_details , sections.* | courses : courses.course_description , courses.course_name , courses.course_id , courses.other_details , courses.* | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_description",
      "sections.section_id",
      "sections.course_id",
      "sections.other_details",
      "sections.*",
      "courses.course_description",
      "courses.course_name",
      "courses.course_id",
      "courses.other_details",
      "courses.*",
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最多有2个章节的课程的名称和ID是什么？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "每个少于2个章节的课程的名字和ID是什么？ | sections : sections.course_id , sections.section_id , sections.section_name , sections.section_description , sections.other_details , sections.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.student_id , students.first_name , students.middle_name , students.last_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.course_id",
      "sections.section_id",
      "sections.section_name",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "以逆向词典顺序列出章节名称。 | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.state_province_county , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_id",
      "sections.course_id",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*",
      "addresses.city",
      "addresses.country",
      "addresses.state_province_county",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "按逆字母顺序排列的章节的名称是什么？ | sections : sections.section_name , sections.section_id , sections.course_id , sections.section_description , sections.other_details , sections.* | courses : courses.course_name , courses.other_details , courses.course_id , courses.course_description , courses.* | students : students.middle_name , students.last_name , students.student_id , students.first_name , students.email_address , students.* | departments : departments.department_name , departments.department_description , departments.other_details , departments.department_id , departments.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_name",
      "sections.section_id",
      "sections.course_id",
      "sections.section_description",
      "sections.other_details",
      "sections.*",
      "courses.course_name",
      "courses.other_details",
      "courses.course_id",
      "courses.course_description",
      "courses.*",
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "students.email_address",
      "students.*",
      "departments.department_name",
      "departments.department_description",
      "departments.other_details",
      "departments.department_id",
      "departments.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最多学生注册的学期是哪一学期？显示名称和ID。 | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.date_first_registered , students.other_student_details , students.first_name , students.last_name , students.* | departments : departments.department_name , departments.department_id , departments.department_description , departments.other_details , departments.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "students.student_id",
      "students.date_first_registered",
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.*",
      "departments.department_name",
      "departments.department_id",
      "departments.department_description",
      "departments.other_details",
      "departments.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "对于每个学期，注册学生最多的那个学期的名字和id是什么？ | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.date_first_registered , students.other_student_details , students.first_name , students.middle_name , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "students.student_id",
      "students.date_first_registered",
      "students.other_student_details",
      "students.first_name",
      "students.middle_name",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "名字里含有子串为'计算机'的学院的描述是什么？ | departments : departments.department_description , departments.department_name , departments.department_id , departments.other_details , departments.* | students : students.last_name , students.student_id , students.first_name , students.middle_name , students.email_address , students.* | addresses : addresses.city , addresses.country , addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_description",
      "departments.department_name",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "students.middle_name",
      "students.email_address",
      "students.*",
      "addresses.city",
      "addresses.country",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "那个名字里有'计算机'的学院的描述是什么？ | departments : departments.department_name , departments.department_description , departments.department_id , departments.other_details , departments.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_3 , addresses.address_id , addresses.* | students : students.middle_name , students.student_id , students.first_name , students.last_name , students.email_address , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.other_details",
      "departments.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_3",
      "addresses.address_id",
      "addresses.*",
      "students.middle_name",
      "students.student_id",
      "students.first_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "谁在一个学期内修读了2个学位课程？列出名字、中间名、姓氏和ID。 | students : students.middle_name , students.last_name , students.first_name , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.middle_name",
      "students.last_name",
      "students.first_name",
      "students.student_id",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "在一学期内修读2个学位课程的所有学生的名字、中间名、姓氏和id是什么？ | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.student_id",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.*",
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "谁在攻读'学士'学位课程？列出名字，中间名字，姓氏。 | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.other_student_details , students.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_program_id , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.student_id",
      "students.other_student_details",
      "students.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_description",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "申请'学士'学位的每个人的名字、中间名、姓氏是什么？ | students : students.first_name , students.middle_name , students.last_name , students.student_id , students.other_student_details , students.* | student_enrolment : student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.* | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.other_student_details",
      "students.*",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.*",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "找到最多数学生报名参加的项目？ | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | students : students.other_student_details , students.student_id , students.last_name , students.date_first_registered , students.first_name , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "students.other_student_details",
      "students.student_id",
      "students.last_name",
      "students.date_first_registered",
      "students.first_name",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "申请学生人数最多的学位摘要名称是什么？ | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.department_id , degree_programs.degree_program_id , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | students : students.student_id , students.other_student_details , students.first_name , students.middle_name , students.last_name , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "找出最多数学生报名参加的项目。列出ID和摘要。 | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_description , courses.course_name , courses.other_details , courses.* | degree_programs : degree_programs.department_id , degree_programs.degree_program_id , degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.other_details , degree_programs.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.degree_program_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "courses.course_id",
      "courses.course_description",
      "courses.course_name",
      "courses.other_details",
      "courses.*",
      "degree_programs.department_id",
      "degree_programs.degree_program_id",
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.other_details",
      "degree_programs.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最多数学生申请的学位的项目编号和学位摘要是什么？ | degree_programs : degree_programs.degree_summary_name , degree_programs.degree_summary_description , degree_programs.degree_program_id , degree_programs.department_id , degree_programs.other_details , degree_programs.* | student_enrolment : student_enrolment.degree_program_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.other_student_details , students.student_id , students.last_name , students.first_name , students.middle_name , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "degree_programs.degree_summary_name",
      "degree_programs.degree_summary_description",
      "degree_programs.degree_program_id",
      "degree_programs.department_id",
      "degree_programs.other_details",
      "degree_programs.*",
      "student_enrolment.degree_program_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.other_student_details",
      "students.student_id",
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "哪些学生报名参加任何项目的次数最多？列出id、名字、中间名、姓氏、参加次数和学生id。 | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.date_first_registered , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.student_id",
      "students.date_first_registered",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "参与任何一个课程次数最多的学生的姓名、中间名、姓氏、id和参与次数是多少？ | students : students.first_name , students.last_name , students.middle_name , students.student_id , students.permanent_address_id , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.student_id",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "哪些学期没有录取学生？列出学期名称。 | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | students : students.student_id , students.other_student_details , students.first_name , students.middle_name , students.last_name , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "没有学生入学的学期名称是什么？ | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | students : students.student_id , students.other_student_details , students.first_name , students.middle_name , students.last_name , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "有学生参加过的所有课程的名称是什么？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.* | students : students.student_id , students.other_student_details , students.first_name , students.last_name , students.date_first_registered , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.date_first_registered",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "有学生注册过的所有课程的名称是什么？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.course_id , student_enrolment_courses.* | students : students.date_first_registered , students.student_id , students.other_student_details , students.first_name , students.last_name , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.*",
      "students.date_first_registered",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "注册人数最多的课程名称是什么？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | students : students.date_first_registered , students.student_id , students.other_student_details , students.first_name , students.last_name , students.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "students.date_first_registered",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最多人数注册的课程名称是什么？ | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.* | students : students.date_first_registered , students.student_id , students.other_student_details , students.first_name , students.last_name , students.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.degree_program_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "students.date_first_registered",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.degree_program_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "查找目前居住在'湖北'，但没有注册任何学位课程的学生的姓氏。 | addresses : addresses.state_province_county , addresses.country , addresses.address_id , addresses.city , addresses.other_address_details , addresses.* | students : students.last_name , students.current_address_id , students.date_first_registered , students.student_id , students.permanent_address_id , students.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.state_province_county",
      "addresses.country",
      "addresses.address_id",
      "addresses.city",
      "addresses.other_address_details",
      "addresses.*",
      "students.last_name",
      "students.current_address_id",
      "students.date_first_registered",
      "students.student_id",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "那些住在'湖北'但没有注册任何学位课程的学生的姓氏是什么？ | addresses : addresses.state_province_county , addresses.address_id , addresses.city , addresses.country , addresses.other_address_details , addresses.* | students : students.last_name , students.first_name , students.student_id , students.date_first_registered , students.permanent_address_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.semester_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.state_province_county",
      "addresses.address_id",
      "addresses.city",
      "addresses.country",
      "addresses.other_address_details",
      "addresses.*",
      "students.last_name",
      "students.first_name",
      "students.student_id",
      "students.date_first_registered",
      "students.permanent_address_id",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.semester_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "显示至少包括2个课程成绩的成绩单的日期和id。 | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "transcript_contents.student_course_id",
      "transcript_contents.transcript_id",
      "transcript_contents.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "至少有2个课程的成绩单的日期和id是什么？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "transcript_contents.student_course_id",
      "transcript_contents.transcript_id",
      "transcript_contents.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "名字是'钟'、姓氏是'睿'的人的电话号码是多少？ | students : students.cell_mobile_number , students.last_name , students.first_name , students.middle_name , students.student_id , students.* | addresses : addresses.country , addresses.city , addresses.line_1 , addresses.state_province_county , addresses.address_id , addresses.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.cell_mobile_number",
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.student_id",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.line_1",
      "addresses.state_province_county",
      "addresses.address_id",
      "addresses.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "叫'钟睿'的学生的手机号码是多少？ | students : students.cell_mobile_number , students.first_name , students.last_name , students.middle_name , students.student_id , students.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | addresses : addresses.country , addresses.city , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.cell_mobile_number",
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.student_id",
      "students.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "addresses.country",
      "addresses.city",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "谁是第一个注册的学生？列出名字、中间名和姓氏。 | students : students.last_name , students.first_name , students.middle_name , students.date_first_registered , students.student_id , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.last_name",
      "students.first_name",
      "students.middle_name",
      "students.date_first_registered",
      "students.student_id",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "第一个注册的学生的名字、中间名和姓氏是什么？ | students : students.first_name , students.last_name , students.middle_name , students.date_first_registered , students.other_student_details , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.other_details , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.last_name",
      "students.middle_name",
      "students.date_first_registered",
      "students.other_student_details",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.other_details",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "谁是学校最早毕业的学生？列出名字、中间名和姓氏。 | students : students.first_name , students.middle_name , students.last_name , students.date_first_registered , students.date_left , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.date_first_registered",
      "students.date_left",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最早的学校毕业生的名字、中间名和姓氏是什么？ | students : students.first_name , students.middle_name , students.last_name , students.date_first_registered , students.date_left , students.* | student_enrolment : student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.other_details , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.middle_name",
      "students.last_name",
      "students.date_first_registered",
      "students.date_left",
      "students.*",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.other_details",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "谁的永久地址不同于他或她的当前地址？列出他或她的名字。 | students : students.first_name , students.permanent_address_id , students.current_address_id , students.last_name , students.student_id , students.* | addresses : addresses.other_address_details , addresses.address_id , addresses.country , addresses.line_1 , addresses.city , addresses.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.permanent_address_id",
      "students.current_address_id",
      "students.last_name",
      "students.student_id",
      "students.*",
      "addresses.other_address_details",
      "addresses.address_id",
      "addresses.country",
      "addresses.line_1",
      "addresses.city",
      "addresses.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "永久地址与当前地址不同的学生的名字是什么？ | students : students.first_name , students.permanent_address_id , students.current_address_id , students.last_name , students.student_id , students.* | addresses : addresses.address_id , addresses.country , addresses.other_address_details , addresses.city , addresses.line_1 , addresses.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.permanent_address_id",
      "students.current_address_id",
      "students.last_name",
      "students.student_id",
      "students.*",
      "addresses.address_id",
      "addresses.country",
      "addresses.other_address_details",
      "addresses.city",
      "addresses.line_1",
      "addresses.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "目前哪个地址包含的学生最多？列出地址ID和地址的第1行和第2行。 | addresses : addresses.line_1 , addresses.address_id , addresses.line_2 , addresses.line_3 , addresses.other_address_details , addresses.* | students : students.current_address_id , students.student_id , students.permanent_address_id , students.other_student_details , students.first_name , students.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.line_1",
      "addresses.address_id",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.other_address_details",
      "addresses.*",
      "students.current_address_id",
      "students.student_id",
      "students.permanent_address_id",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "包含最多数学生的地址的ID、第1行和第2行是什么？ | addresses : addresses.address_id , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.other_address_details , addresses.* | students : students.student_id , students.current_address_id , students.permanent_address_id , students.other_student_details , students.first_name , students.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "addresses.address_id",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.other_address_details",
      "addresses.*",
      "students.student_id",
      "students.current_address_id",
      "students.permanent_address_id",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "平均来说，成绩单是什么时候印的？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.date_left , students.date_first_registered , students.other_student_details , students.student_id , students.middle_name , students.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.line_1 , addresses.line_2 , addresses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.date_left",
      "students.date_first_registered",
      "students.other_student_details",
      "students.student_id",
      "students.middle_name",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "成绩单的平均日期是什么？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.date_first_registered , students.date_left , students.other_student_details , students.student_id , students.middle_name , students.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.line_1 , addresses.line_3 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.date_first_registered",
      "students.date_left",
      "students.other_student_details",
      "students.student_id",
      "students.middle_name",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.line_3",
      "addresses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "第一份成绩单是什么时候发布的？列出日期和细节。 | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | students : students.date_first_registered , students.other_student_details , students.date_left , students.student_id , students.middle_name , students.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.other_address_details , addresses.line_1 , addresses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.*",
      "students.date_first_registered",
      "students.other_student_details",
      "students.date_left",
      "students.student_id",
      "students.middle_name",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "发布最早的成绩单的日期是什么？你能告诉我什么细节？ | transcripts : transcripts.transcript_date , transcripts.other_details , transcripts.transcript_id , transcripts.* | students : students.date_first_registered , students.other_student_details , students.date_left , students.student_id , students.last_name , students.* | student_enrolment : student_enrolment.other_details , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.line_1 , addresses.other_address_details , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.*",
      "students.date_first_registered",
      "students.other_student_details",
      "students.date_left",
      "students.student_id",
      "students.last_name",
      "students.*",
      "student_enrolment.other_details",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.other_address_details",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "发布多少成绩单？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.state_province_county , addresses.country , addresses.city , addresses.other_address_details , addresses.line_1 , addresses.* | students : students.last_name , students.middle_name , students.other_student_details , students.student_id , students.first_name , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "addresses.state_province_county",
      "addresses.country",
      "addresses.city",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.*",
      "students.last_name",
      "students.middle_name",
      "students.other_student_details",
      "students.student_id",
      "students.first_name",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "列出了多少个成绩单？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.last_name , students.ssn , students.student_id , students.middle_name , students.other_student_details , students.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.other_address_details , addresses.line_1 , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.last_name",
      "students.ssn",
      "students.student_id",
      "students.middle_name",
      "students.other_student_details",
      "students.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最后一份成绩单发布日期是什么？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.date_left , students.date_first_registered , students.other_student_details , students.last_name , students.student_id , students.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.line_1 , addresses.address_id , addresses.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.date_left",
      "students.date_first_registered",
      "students.other_student_details",
      "students.last_name",
      "students.student_id",
      "students.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.address_id",
      "addresses.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "最后一份成绩单是什么时候发布的？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.date_left , students.date_first_registered , students.other_student_details , students.middle_name , students.last_name , students.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | addresses : addresses.country , addresses.city , addresses.state_province_county , addresses.line_1 , addresses.other_address_details , addresses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.date_left",
      "students.date_first_registered",
      "students.other_student_details",
      "students.middle_name",
      "students.last_name",
      "students.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "addresses.country",
      "addresses.city",
      "addresses.state_province_county",
      "addresses.line_1",
      "addresses.other_address_details",
      "addresses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "一个课程的注册结果最多能在不同的成绩单显示多少次？同时显示课程注册ID。 | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.student_course_id , transcript_contents.transcript_id , transcript_contents.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.*",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.student_course_id",
      "transcript_contents.transcript_id",
      "transcript_contents.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "一个课程在不同成绩单中出现的最大次数是多少？该课程的注册号是多少？ | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | transcripts : transcripts.transcript_id , transcripts.transcript_date , transcripts.other_details , transcripts.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | courses : courses.course_name , courses.course_id , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.other_details",
      "transcripts.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "courses.course_name",
      "courses.course_id",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "显示成绩数量最少的成绩单的日期，并列出ID。 | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.date_first_registered , students.student_id , students.date_left , students.other_student_details , students.first_name , students.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.date_first_registered",
      "students.student_id",
      "students.date_left",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "成绩数量最少的成绩单的日期和id是什么？ | transcripts : transcripts.transcript_date , transcripts.transcript_id , transcripts.other_details , transcripts.* | students : students.date_first_registered , students.date_left , students.student_id , students.other_student_details , students.middle_name , students.* | transcript_contents : transcript_contents.transcript_id , transcript_contents.student_course_id , transcript_contents.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "transcripts.transcript_date",
      "transcripts.transcript_id",
      "transcripts.other_details",
      "transcripts.*",
      "students.date_first_registered",
      "students.date_left",
      "students.student_id",
      "students.other_student_details",
      "students.middle_name",
      "students.*",
      "transcript_contents.transcript_id",
      "transcript_contents.student_course_id",
      "transcript_contents.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "找到'硕士生'和'本科生'都有注册的那个学期。 | student_enrolment : student_enrolment.semester_id , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | students : students.date_first_registered , students.student_id , students.other_student_details , students.first_name , students.last_name , students.* | semesters : semesters.semester_name , semesters.semester_id , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "student_enrolment.semester_id",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "students.date_first_registered",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.last_name",
      "students.*",
      "semesters.semester_name",
      "semesters.semester_id",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "同时招收了'硕士生'和'本科生'的学期的id是什么？ | semesters : semesters.semester_id , semesters.semester_name , semesters.semester_description , semesters.other_details , semesters.* | student_enrolment : student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.student_id , student_enrolment.degree_program_id , student_enrolment.other_details , student_enrolment.* | student_enrolment_courses : student_enrolment_courses.student_enrolment_id , student_enrolment_courses.course_id , student_enrolment_courses.student_course_id , student_enrolment_courses.* | students : students.student_id , students.middle_name , students.last_name , students.other_student_details , students.first_name , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "semesters.semester_id",
      "semesters.semester_name",
      "semesters.semester_description",
      "semesters.other_details",
      "semesters.*",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.student_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.other_details",
      "student_enrolment.*",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*",
      "students.student_id",
      "students.middle_name",
      "students.last_name",
      "students.other_student_details",
      "students.first_name",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "学生现在有多少不同的住址？ | students : students.current_address_id , students.permanent_address_id , students.student_id , students.other_student_details , students.first_name , students.* | addresses : addresses.other_address_details , addresses.line_1 , addresses.address_id , addresses.line_2 , addresses.country , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.current_address_id",
      "students.permanent_address_id",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.address_id",
      "addresses.line_2",
      "addresses.country",
      "addresses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "学生现在居住的不同地址有哪些？ | students : students.current_address_id , students.permanent_address_id , students.student_id , students.other_student_details , students.first_name , students.* | addresses : addresses.line_1 , addresses.other_address_details , addresses.line_2 , addresses.address_id , addresses.line_3 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.current_address_id",
      "students.permanent_address_id",
      "students.student_id",
      "students.other_student_details",
      "students.first_name",
      "students.*",
      "addresses.line_1",
      "addresses.other_address_details",
      "addresses.line_2",
      "addresses.address_id",
      "addresses.line_3",
      "addresses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "按照字母顺序倒序列出所有学生的详细资料。 | students : students.other_student_details , students.first_name , students.student_id , students.last_name , students.middle_name , students.* | student_enrolment : student_enrolment.other_details , student_enrolment.student_id , student_enrolment.semester_id , student_enrolment.student_enrolment_id , student_enrolment.degree_program_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.state_province_county , addresses.address_id , addresses.line_1 , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.other_student_details",
      "students.first_name",
      "students.student_id",
      "students.last_name",
      "students.middle_name",
      "students.*",
      "student_enrolment.other_details",
      "student_enrolment.student_id",
      "student_enrolment.semester_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.state_province_county",
      "addresses.address_id",
      "addresses.line_1",
      "addresses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "按字母顺序逆序排列，你能告诉我学生其他的一些细节吗？ | students : students.other_student_details , students.first_name , students.student_id , students.last_name , students.email_address , students.* | student_enrolment : student_enrolment.other_details , student_enrolment.student_id , student_enrolment.student_enrolment_id , student_enrolment.semester_id , student_enrolment.degree_program_id , student_enrolment.* | addresses : addresses.city , addresses.country , addresses.other_address_details , addresses.line_1 , addresses.state_province_county , addresses.* | departments : departments.other_details , departments.department_name , departments.department_description , departments.department_id , departments.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.other_student_details",
      "students.first_name",
      "students.student_id",
      "students.last_name",
      "students.email_address",
      "students.*",
      "student_enrolment.other_details",
      "student_enrolment.student_id",
      "student_enrolment.student_enrolment_id",
      "student_enrolment.semester_id",
      "student_enrolment.degree_program_id",
      "student_enrolment.*",
      "addresses.city",
      "addresses.country",
      "addresses.other_address_details",
      "addresses.line_1",
      "addresses.state_province_county",
      "addresses.*",
      "departments.other_details",
      "departments.department_name",
      "departments.department_description",
      "departments.department_id",
      "departments.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "描述'第三'章节。 | sections : sections.section_description , sections.section_name , sections.section_id , sections.course_id , sections.other_details , sections.* | addresses : addresses.city , addresses.country , addresses.line_1 , addresses.line_2 , addresses.line_3 , addresses.* | courses : courses.course_description , courses.course_name , courses.other_details , courses.course_id , courses.* | students : students.middle_name , students.last_name , students.student_id , students.first_name , students.email_address , students.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_description",
      "sections.section_name",
      "sections.section_id",
      "sections.course_id",
      "sections.other_details",
      "sections.*",
      "addresses.city",
      "addresses.country",
      "addresses.line_1",
      "addresses.line_2",
      "addresses.line_3",
      "addresses.*",
      "courses.course_description",
      "courses.course_name",
      "courses.other_details",
      "courses.course_id",
      "courses.*",
      "students.middle_name",
      "students.last_name",
      "students.student_id",
      "students.first_name",
      "students.email_address",
      "students.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "'第三'章节的描述是什么？ | sections : sections.section_description , sections.section_name , sections.section_id , sections.other_details , sections.course_id , sections.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | students : students.middle_name , students.student_id , students.first_name , students.last_name , students.email_address , students.* | courses : courses.course_description , courses.course_name , courses.other_details , courses.course_id , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "sections.section_description",
      "sections.section_name",
      "sections.section_id",
      "sections.other_details",
      "sections.course_id",
      "sections.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "students.middle_name",
      "students.student_id",
      "students.first_name",
      "students.last_name",
      "students.email_address",
      "students.*",
      "courses.course_description",
      "courses.course_name",
      "courses.other_details",
      "courses.course_id",
      "courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "找到永久居住在'海地'或手机电话号码是'09700166582'的学生的名字。 | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.last_name , students.current_address_id , students.* | addresses : addresses.state_province_county , addresses.country , addresses.city , addresses.other_address_details , addresses.address_id , addresses.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.* | student_enrolment_courses : student_enrolment_courses.course_id , student_enrolment_courses.student_enrolment_id , student_enrolment_courses.student_course_id , student_enrolment_courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.cell_mobile_number",
      "students.permanent_address_id",
      "students.last_name",
      "students.current_address_id",
      "students.*",
      "addresses.state_province_county",
      "addresses.country",
      "addresses.city",
      "addresses.other_address_details",
      "addresses.address_id",
      "addresses.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*",
      "student_enrolment_courses.course_id",
      "student_enrolment_courses.student_enrolment_id",
      "student_enrolment_courses.student_course_id",
      "student_enrolment_courses.*"
    ]
  },
  {
    "db_id": "student_transcripts_tracking",
    "input_sequence": "永久居住在'海地'或手机号码是'09700166582'的学生的名字是什么？ | students : students.first_name , students.cell_mobile_number , students.permanent_address_id , students.current_address_id , students.last_name , students.* | addresses : addresses.state_province_county , addresses.country , addresses.city , addresses.other_address_details , addresses.address_id , addresses.* | transcripts : transcripts.other_details , transcripts.transcript_id , transcripts.transcript_date , transcripts.* | courses : courses.course_id , courses.course_name , courses.course_description , courses.other_details , courses.*",
    "output_sequence": " | ",
    "tc_original": [
      "students.first_name",
      "students.cell_mobile_number",
      "students.permanent_address_id",
      "students.current_address_id",
      "students.last_name",
      "students.*",
      "addresses.state_province_county",
      "addresses.country",
      "addresses.city",
      "addresses.other_address_details",
      "addresses.address_id",
      "addresses.*",
      "transcripts.other_details",
      "transcripts.transcript_id",
      "transcripts.transcript_date",
      "transcripts.*",
      "courses.course_id",
      "courses.course_name",
      "courses.course_description",
      "courses.other_details",
      "courses.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "按字母顺序列出所有卡通的标题。 | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.id , tv_series.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "按字母顺序排列，卡通的标题是什么？ | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.id , tv_series.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出所有由'黄伟明'导演的卡通。 | cartoon : cartoon.directed_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.rating , tv_series.channel , tv_series.id , tv_series.episode , tv_series.share , tv_series.* | tv_channel : tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'黄伟明'导演的卡通作品的名字是什么？ | cartoon : cartoon.directed_by , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.id , tv_series.* | tv_channel : tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.id",
      "cartoon.*",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'李辉'写了多少动画片？ | cartoon : cartoon.written_by , cartoon.directed_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'李辉'导演的动画片的数量是多少？ | cartoon : cartoon.directed_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出所有的卡通片的名字和他们的导演。 | cartoon : cartoon.directed_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.id , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "按照播出日期排序，所有卡通的名字和导演是什么？ | cartoon : cartoon.directed_by , cartoon.title , cartoon.original_air_date , cartoon.channel , cartoon.id , cartoon.* | tv_series : tv_series.air_date , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.title",
      "cartoon.original_air_date",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.*",
      "tv_series.air_date",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出'黄伟明'或'姜文'导演的所有卡通片的标题。 | cartoon : cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.channel , cartoon.id , cartoon.* | tv_series : tv_series.rating , tv_series.channel , tv_series.id , tv_series.episode , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.*",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'黄伟明'或'姜文'导演的卡通作品的标题是什么？ | cartoon : cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.channel , cartoon.id , cartoon.* | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.*",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "哪个国家拥有最多的电视频道？列出这些国家和它们所拥有的电视频道的数量。 | tv_channel : tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视频道最多的国家是什么？它们有多少个频道？ | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出电视频道表中不同的系列名称的数量和不同内容的数量。 | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视频道表中列出了多少个不同的系列和内容？ | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视频道播出的连续剧'潜伏'的内容是什么？ | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.language , tv_channel.country , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.country",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "连续剧'潜伏'的内容是什么？ | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.* | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.rating , tv_series.channel , tv_series.share , tv_series.id , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "播出电视连续剧'潜伏'的电视频道的套餐选项是什么？ | tv_channel : tv_channel.package_option , tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "包含了连续剧'潜伏'的电视频道有哪些套餐选择？ | tv_channel : tv_channel.package_option , tv_channel.series_name , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "有多少电视频道使用语言为'英语'？ | tv_channel : tv_channel.language , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.channel , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "使用'英语'的电视频道有多少？ | tv_channel : tv_channel.language , tv_channel.country , tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出使用语言数量最少的电视频道所使用的语言和这些电视频道的数量。 | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.hight_definition_tv , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.channel , cartoon.id , cartoon.title , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.hight_definition_tv",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视频道使用的最少的语言是什么？有多少频道使用它？ | tv_channel : tv_channel.language , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.package_option , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.package_option",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出每种语言和使用它的电视频道的数量。 | tv_channel : tv_channel.language , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "对于每种语言，列出使用它的电视频道的数量。 | tv_channel : tv_channel.language , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.channel , cartoon.id , cartoon.title , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "播放卡通'黑猫警长'的电视频道是什么？列出电视频道的连续剧的名称。 | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.* | tv_series : tv_series.channel , tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "放映卡通片'黑猫警长'的电视频道播放的连续剧名称是什么？ | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出播放连续剧'潜伏'的电视频道播出的卡通片名称。 | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.original_air_date , cartoon.* | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.original_air_date",
      "cartoon.*",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "播放连续剧'潜伏'的电视频道播出的卡通片标题是什么？ | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.original_air_date , cartoon.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.original_air_date",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "根据收视率排序列出所有电视剧剧集。 | tv_series : tv_series.rating , tv_series.weekly_rank , tv_series.viewers_m , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.rating",
      "tv_series.weekly_rank",
      "tv_series.viewers_m",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "按照收视率排序的所有剧集是什么？ | tv_series : tv_series.rating , tv_series.weekly_rank , tv_series.viewers_m , tv_series.share , tv_series.id , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.rating",
      "tv_series.weekly_rank",
      "tv_series.viewers_m",
      "tv_series.share",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出收视率排名前3位的电视剧。列出电视连续剧的剧集和收视率。 | tv_series : tv_series.rating , tv_series.weekly_rank , tv_series.episode , tv_series.id , tv_series.18_49_rating_share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.content , tv_channel.language , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.rating",
      "tv_series.weekly_rank",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.18_49_rating_share",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.content",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "在电视连续剧表中收视率最高的3个是什么？收视率是多少？ | tv_series : tv_series.rating , tv_series.weekly_rank , tv_series.id , tv_series.channel , tv_series.episode , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.directed_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.rating",
      "tv_series.weekly_rank",
      "tv_series.id",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视剧的最小和最大份额是多少？ | tv_series : tv_series.share , tv_series.18_49_rating_share , tv_series.channel , tv_series.id , tv_series.episode , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.directed_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.share",
      "tv_series.18_49_rating_share",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视连续剧的最大和最小份额是多少？ | tv_series : tv_series.share , tv_series.18_49_rating_share , tv_series.channel , tv_series.episode , tv_series.id , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | cartoon : cartoon.id , cartoon.channel , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.share",
      "tv_series.18_49_rating_share",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视剧的'大宅门'这一集的播出日期是什么时候？ | tv_series : tv_series.air_date , tv_series.episode , tv_series.channel , tv_series.id , tv_series.rating , tv_series.* | tv_channel : tv_channel.content , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.id , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.air_date",
      "tv_series.episode",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.*",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'大宅门'这一集是什么时候播出的？ | tv_series : tv_series.episode , tv_series.air_date , tv_series.channel , tv_series.id , tv_series.rating , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.* | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.episode",
      "tv_series.air_date",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'一生的爱'这一集的每周排名是多少？ | tv_series : tv_series.weekly_rank , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.directed_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.weekly_rank",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "'大宅门'这一集的每周排名是多少？ | tv_series : tv_series.weekly_rank , tv_series.episode , tv_series.rating , tv_series.channel , tv_series.id , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.content , tv_channel.id , tv_channel.series_name , tv_channel.country , tv_channel.language , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.weekly_rank",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "电视连续剧剧集'大宅门'播出的电视频道是什么？列出这个电视频道的连续剧名称。 | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.channel , cartoon.id , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "包含'大宅门'这一集的电视剧所在的电视频道的连续剧的名字是什么？ | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.episode , tv_series.channel , tv_series.id , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.directed_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.episode",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "列出播出电视剧'潜伏'的电视频道所播出的所有电视剧的剧集。 | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.directed_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.directed_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "播出电视连续剧'潜伏'的电视频道的剧集是什么？ | tv_channel : tv_channel.series_name , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.rating , tv_series.id , tv_series.share , tv_series.* | cartoon : cartoon.title , cartoon.id , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.id",
      "tv_series.share",
      "tv_series.*",
      "cartoon.title",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找出每个列出来的导演所导演的卡通作品的数量。 | cartoon : cartoon.directed_by , cartoon.id , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.* | tv_series : tv_series.id , tv_series.rating , tv_series.channel , tv_series.episode , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.package_option , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.package_option",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "每个导演创作了多少动画片？ | cartoon : cartoon.directed_by , cartoon.channel , cartoon.production_code , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.id , tv_series.rating , tv_series.channel , tv_series.episode , tv_series.share , tv_series.* | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.production_code",
      "cartoon.title",
      "cartoon.id",
      "cartoon.*",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找到最近播出的卡通片的制作代码和频道。 | cartoon : cartoon.production_code , cartoon.channel , cartoon.original_air_date , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.channel , tv_series.air_date , tv_series.episode , tv_series.id , tv_series.rating , tv_series.* | tv_channel : tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.country , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.production_code",
      "cartoon.channel",
      "cartoon.original_air_date",
      "cartoon.title",
      "cartoon.id",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.air_date",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.*",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "最新的动画片的制作代码和频道是什么？ | cartoon : cartoon.production_code , cartoon.channel , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | tv_channel : tv_channel.language , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.series_name , tv_channel.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.production_code",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.series_name",
      "tv_channel.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找到高清晰度电视频道的套餐选择和系列节目名称。 | tv_channel : tv_channel.series_name , tv_channel.package_option , tv_channel.hight_definition_tv , tv_channel.pixel_aspect_ratio_par , tv_channel.id , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.package_option",
      "tv_channel.hight_definition_tv",
      "tv_channel.pixel_aspect_ratio_par",
      "tv_channel.id",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "支持高清电视的电视频道的套餐选项和系列节目名称是什么？ | tv_channel : tv_channel.package_option , tv_channel.series_name , tv_channel.hight_definition_tv , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.title , cartoon.channel , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.series_name",
      "tv_channel.hight_definition_tv",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "哪些国家的电视频道在播放'白英'写的漫画？ | cartoon : cartoon.written_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.id , tv_channel.series_name , tv_channel.language , tv_channel.content , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "在电视上播放'白英'写的漫画的国家有哪些？ | cartoon : cartoon.written_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.id , tv_channel.series_name , tv_channel.language , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.channel , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.channel",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "哪些国家的电视频道没有播放'白英'写的漫画？ | cartoon : cartoon.written_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "没有播放'白英'写的漫画的国家有哪些？ | cartoon : cartoon.written_by , cartoon.title , cartoon.channel , cartoon.id , cartoon.directed_by , cartoon.* | tv_channel : tv_channel.country , tv_channel.id , tv_channel.series_name , tv_channel.language , tv_channel.content , tv_channel.* | tv_series : tv_series.id , tv_series.episode , tv_series.channel , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.written_by",
      "cartoon.title",
      "cartoon.channel",
      "cartoon.id",
      "cartoon.directed_by",
      "cartoon.*",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.series_name",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.channel",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找到正在播放由'黄伟明'和'杨洁'执导的卡通片的电视频道的系列名称和国家。 | cartoon : cartoon.directed_by , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.id , cartoon.* | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | tv_series : tv_series.channel , tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.id",
      "cartoon.*",
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "所有播放由'黄伟明'和'杨洁'导演的卡通片的电视频道的系列名称和国家是什么？ | tv_channel : tv_channel.series_name , tv_channel.country , tv_channel.id , tv_channel.language , tv_channel.content , tv_channel.* | cartoon : cartoon.directed_by , cartoon.channel , cartoon.written_by , cartoon.title , cartoon.id , cartoon.* | tv_series : tv_series.channel , tv_series.episode , tv_series.id , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.series_name",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.written_by",
      "cartoon.title",
      "cartoon.id",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.id",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找出不使用'英语'的电视频道的像素纵横比和国家。 | tv_channel : tv_channel.pixel_aspect_ratio_par , tv_channel.country , tv_channel.language , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.pixel_aspect_ratio_par",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "不使用'英语'的所有电视频道的像素宽高比和国家是多少？ | tv_channel : tv_channel.pixel_aspect_ratio_par , tv_channel.language , tv_channel.country , tv_channel.id , tv_channel.content , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.pixel_aspect_ratio_par",
      "tv_channel.language",
      "tv_channel.country",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "有两个以上电视频道的国家的电视频道的ID。 | tv_channel : tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.content , tv_channel.series_name , tv_channel.* | tv_series : tv_series.id , tv_series.channel , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.production_code , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.content",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.id",
      "tv_series.channel",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.production_code",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "拥有超过2个电视频道的所有电视频道的ID是什么？ | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.hight_definition_tv , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.* | cartoon : cartoon.id , cartoon.channel , cartoon.title , cartoon.directed_by , cartoon.written_by , cartoon.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.hight_definition_tv",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.directed_by",
      "cartoon.written_by",
      "cartoon.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找到没有播放'黄伟明'导演的卡通片的电视频道的ID。 | cartoon : cartoon.directed_by , cartoon.id , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "没有播放'黄伟明'导演的卡通片的电视频道id是什么？ | cartoon : cartoon.directed_by , cartoon.id , cartoon.channel , cartoon.title , cartoon.written_by , cartoon.* | tv_channel : tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.series_name , tv_channel.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "cartoon.directed_by",
      "cartoon.id",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.written_by",
      "cartoon.*",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.series_name",
      "tv_channel.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "找到没有播放'黄伟明'导演的任何卡通片的电视频道的套餐选项。 | tv_channel : tv_channel.package_option , tv_channel.content , tv_channel.id , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.directed_by , cartoon.channel , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.content",
      "tv_channel.id",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "tvshow",
    "input_sequence": "目前没有播放'黄伟明'导演的卡通片的所有电视频道的套餐选择是什么？ | tv_channel : tv_channel.package_option , tv_channel.id , tv_channel.content , tv_channel.country , tv_channel.language , tv_channel.* | cartoon : cartoon.directed_by , cartoon.channel , cartoon.title , cartoon.id , cartoon.written_by , cartoon.* | tv_series : tv_series.channel , tv_series.id , tv_series.episode , tv_series.rating , tv_series.share , tv_series.*",
    "output_sequence": " | ",
    "tc_original": [
      "tv_channel.package_option",
      "tv_channel.id",
      "tv_channel.content",
      "tv_channel.country",
      "tv_channel.language",
      "tv_channel.*",
      "cartoon.directed_by",
      "cartoon.channel",
      "cartoon.title",
      "cartoon.id",
      "cartoon.written_by",
      "cartoon.*",
      "tv_series.channel",
      "tv_series.id",
      "tv_series.episode",
      "tv_series.rating",
      "tv_series.share",
      "tv_series.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "有多少扑克玩家？ | poker_player : poker_player.poker_player_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.people_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.people_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "计算扑克玩家的数量。 | poker_player : poker_player.poker_player_id , poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "按降序排列列出扑克玩家的收入。 | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "按价值降序排序的扑克玩家的收入是什么？ | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "列出决赛牌桌和扑克玩家的最佳表现。 | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.people_id , poker_player.money_rank , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.money_rank",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "所有扑克玩家的决赛牌桌和最佳表现是什么？ | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.people_id , poker_player.money_rank , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.money_rank",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "扑克玩家的平均收入是多少？ | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.people_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.people_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回所有扑克玩家的平均收入。 | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "收入最高的扑克玩家的财富级别是多少？ | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.best_finish , poker_player.poker_player_id , poker_player.final_table_made , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回收入最高的玩家的财富级别。 | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.best_finish , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "在收入少于200000的扑克玩家中，决赛牌桌的最大数量是多少？ | poker_player : poker_player.earnings , poker_player.final_table_made , poker_player.money_rank , poker_player.best_finish , poker_player.people_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.final_table_made",
      "poker_player.money_rank",
      "poker_player.best_finish",
      "poker_player.people_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回所有收入低于200000的扑克玩家的决赛牌桌。 | poker_player : poker_player.final_table_made , poker_player.earnings , poker_player.money_rank , poker_player.best_finish , poker_player.people_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.final_table_made",
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.best_finish",
      "poker_player.people_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "扑克玩家的名字是什么？ | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.poker_player_id , poker_player.best_finish , poker_player.final_table_made , poker_player.money_rank , poker_player.earnings , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.poker_player_id",
      "poker_player.best_finish",
      "poker_player.final_table_made",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回所有扑克玩家的名字。 | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.best_finish , poker_player.poker_player_id , poker_player.final_table_made , poker_player.money_rank , poker_player.people_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.money_rank",
      "poker_player.people_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "收入在300000以上的扑克玩家的名字是什么？ | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.poker_player_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "给我收入在300000以上的扑克玩家的名字。 | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.poker_player_id , poker_player.final_table_made , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "列出按升序排列的决赛牌桌的扑克玩家的姓名。 | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.money_rank , poker_player.poker_player_id , poker_player.earnings , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.poker_player_id",
      "poker_player.earnings",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "按照所在的决赛牌桌的数量升序排列的扑克玩家的姓名是什么？ | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.people_id , poker_player.money_rank , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.money_rank",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "收入最低的扑克玩家的出生日期是什么？ | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.best_finish , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.birth_date , people.name , people.height , people.people_id , people.nationality , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.*",
      "people.birth_date",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回收入最低的扑克玩家的出生日期。 | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.best_finish , poker_player.poker_player_id , poker_player.people_id , poker_player.* | people : people.birth_date , people.name , people.height , people.people_id , people.nationality , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.people_id",
      "poker_player.*",
      "people.birth_date",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "身高最高的扑克玩家的财富等级是多少？ | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.best_finish , poker_player.poker_player_id , poker_player.final_table_made , poker_player.* | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.*",
      "people.height",
      "people.name",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回身高最高的扑克玩家的财富等级。 | poker_player : poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.best_finish , poker_player.people_id , poker_player.* | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.best_finish",
      "poker_player.people_id",
      "poker_player.*",
      "people.height",
      "people.name",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "身高在200以上的扑克玩家的平均收入是多少？ | people : people.height , people.name , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.people_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.height",
      "people.name",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.people_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "给出高于200的扑克玩家的平均收入。 | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.people_id , poker_player.* | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.*",
    "output_sequence": " | ",
    "tc_original": [
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.people_id",
      "poker_player.*",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "按照收入降序排列的扑克玩家的名字是什么？ | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.best_finish , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.best_finish",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回按照收入降序排列的扑克玩家的名字。 | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.earnings , poker_player.money_rank , poker_player.final_table_made , poker_player.poker_player_id , poker_player.best_finish , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.earnings",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.poker_player_id",
      "poker_player.best_finish",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "有哪些不同的民族，来自每个民族的相应人数是多少？ | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "每个民族有多少人？ | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "最常见的国籍是什么？ | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "给我在所有人中最常见的国籍。 | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "至少有两个人共同所属的名族有哪些？ | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.earnings , poker_player.poker_player_id , poker_player.final_table_made , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.final_table_made",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "返回有两个或更多人所属的国籍。 | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "按姓名的升序列出所有人的姓名和生日。 | people : people.birth_date , people.name , people.height , people.people_id , people.nationality , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.birth_date",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "按照名字的字母顺序排列，所有人的姓名和生日是什么？ | people : people.birth_date , people.name , people.height , people.people_id , people.nationality , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.birth_date",
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "显示国籍不是'俄罗斯'的人的姓名。 | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "不是来自'俄罗斯'的人的名字是什么？ | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "列出不是扑克玩家的人的名字。 | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.poker_player_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.poker_player_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "不玩扑克的人的名字是什么？ | people : people.name , people.height , people.people_id , people.nationality , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.poker_player_id , poker_player.best_finish , poker_player.money_rank , poker_player.final_table_made , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.name",
      "people.height",
      "people.people_id",
      "people.nationality",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.poker_player_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.final_table_made",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "有多少个不同的民族？ | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "poker_player",
    "input_sequence": "统计不同民族的数量。 | people : people.nationality , people.name , people.height , people.people_id , people.birth_date , people.* | poker_player : poker_player.people_id , poker_player.best_finish , poker_player.money_rank , poker_player.earnings , poker_player.poker_player_id , poker_player.*",
    "output_sequence": " | ",
    "tc_original": [
      "people.nationality",
      "people.name",
      "people.height",
      "people.people_id",
      "people.birth_date",
      "people.*",
      "poker_player.people_id",
      "poker_player.best_finish",
      "poker_player.money_rank",
      "poker_player.earnings",
      "poker_player.poker_player_id",
      "poker_player.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "有多少州？ | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_name , contestants.contestant_number , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "按参赛者的姓名降序排列，列出参赛选手的编号和姓名。 | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "列出投票ID、电话号码和所有投票的州。 | votes : votes.vote_id , votes.phone_number , votes.state , votes.created , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.vote_id",
      "votes.phone_number",
      "votes.state",
      "votes.created",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "区域代码的最大值和最小值是多少？ | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "area_code_state.area_code",
      "area_code_state.state",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "'浙江'省最后的投票创建日期是什么时候？ | votes : votes.created , votes.state , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.created",
      "votes.state",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "那些名字不是'李红'的参赛者的名字是什么？ | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "不同的州和投票的开始时间是什么？ | votes : votes.state , votes.created , votes.vote_id , votes.phone_number , votes.contestant_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.contestant_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "至少有两张选票的参赛者号码和参赛者名字是什么？ | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "votes.contestant_number",
      "votes.created",
      "votes.state",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "在所有得票的参赛者中，得票最少的参赛者的号码和名字是什么？ | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.created , votes.state , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "votes.contestant_number",
      "votes.created",
      "votes.state",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "来自'江苏'州或'浙江'州的票数是多少？ | votes : votes.state , votes.created , votes.vote_id , votes.contestant_number , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.contestant_number",
      "votes.phone_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "有多少参赛者没有被投票？ | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | votes : votes.contestant_number , votes.state , votes.created , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "votes.contestant_number",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "最多选民投票的区号是多少？ | votes : votes.contestant_number , votes.state , votes.created , votes.vote_id , votes.phone_number , votes.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | contestants : contestants.contestant_number , contestants.contestant_name , contestants.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.contestant_number",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*",
      "area_code_state.area_code",
      "area_code_state.state",
      "area_code_state.*",
      "contestants.contestant_number",
      "contestants.contestant_name",
      "contestants.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "名字叫'王伟'的选手的选票创建日期、州和电话号码是什么？ | votes : votes.phone_number , votes.created , votes.state , votes.contestant_number , votes.vote_id , votes.* | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.*",
    "output_sequence": " | ",
    "tc_original": [
      "votes.phone_number",
      "votes.created",
      "votes.state",
      "votes.contestant_number",
      "votes.vote_id",
      "votes.*",
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "列出既投票给选手'王伟'又投票给选手'王芳'的选民的地区代码。 | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.area_code , area_code_state.state , area_code_state.* | votes : votes.contestant_number , votes.state , votes.created , votes.vote_id , votes.phone_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.area_code",
      "area_code_state.state",
      "area_code_state.*",
      "votes.contestant_number",
      "votes.state",
      "votes.created",
      "votes.vote_id",
      "votes.phone_number",
      "votes.*"
    ]
  },
  {
    "db_id": "voter_1",
    "input_sequence": "返回名字中包含子字符串'勇'的参赛者的名字。 | contestants : contestants.contestant_name , contestants.contestant_number , contestants.* | area_code_state : area_code_state.state , area_code_state.area_code , area_code_state.* | votes : votes.state , votes.created , votes.phone_number , votes.vote_id , votes.contestant_number , votes.*",
    "output_sequence": " | ",
    "tc_original": [
      "contestants.contestant_name",
      "contestants.contestant_number",
      "contestants.*",
      "area_code_state.state",
      "area_code_state.area_code",
      "area_code_state.*",
      "votes.state",
      "votes.created",
      "votes.phone_number",
      "votes.vote_id",
      "votes.contestant_number",
      "votes.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "1950年后所有独立的国家的名字是什么？ | country : country.indepyear , country.name , country.localname , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.name",
      "country.localname",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "说出1950后建立的国家的名字。 | country : country.indepyear , country.name , country.governmentform , country.localname , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.name",
      "country.governmentform",
      "country.localname",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "有多少国家拥有'共和制'政体？ | country : country.governmentform , country.name , country.population , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.population",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "有多少国家有'共和制'政府？ | country : country.governmentform , country.name , country.population , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.population",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'加勒比'地区国家的总表面积是多少？ | country : country.surfacearea , country.region , country.name , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.region",
      "country.name",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'加勒比'的国家的覆盖面积是多少？ | country : country.surfacearea , country.region , country.name , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.region",
      "country.name",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'安圭拉'在哪个洲？ | country : country.continent , country.name , country.region , country.population , country.capital , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.name",
      "country.region",
      "country.population",
      "country.capital",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'安圭拉'所在的大陆名称是什么？ | country : country.name , country.continent , country.region , country.population , country.capital , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.capital",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'温州市'的所在地是哪个地区？ | city : city.district , city.name , city.population , city.id , city.countrycode , city.* | country : country.region , country.localname , country.name , country.capital , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.district",
      "city.name",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "country.region",
      "country.localname",
      "country.name",
      "country.capital",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'温州市'在哪个地区？ | city : city.district , city.name , city.population , city.id , city.countrycode , city.* | country : country.region , country.localname , country.name , country.population , country.capital , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.district",
      "city.name",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "country.region",
      "country.localname",
      "country.name",
      "country.population",
      "country.capital",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'阿鲁巴'哪种语言最受欢迎？ | country : country.region , country.name , country.population , country.localname , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | city : city.district , city.name , city.population , city.countrycode , city.id , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.name",
      "country.population",
      "country.localname",
      "country.continent",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "city.district",
      "city.name",
      "city.population",
      "city.countrycode",
      "city.id",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'阿鲁巴'主要讲什么语言？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.localname , country.region , country.population , country.capital , country.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.localname",
      "country.region",
      "country.population",
      "country.capital",
      "country.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'巴西'的人口和预期寿命是多少？ | country : country.lifeexpectancy , country.name , country.population , country.localname , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.population , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.population",
      "country.localname",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.population",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "列举出'巴西'的人口数和预期寿命. | country : country.lifeexpectancy , country.name , country.population , country.code2 , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.population",
      "country.code2",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'安哥拉'的所在区域和人口是多少？ | country : country.region , country.name , country.population , country.code , country.capital , country.* | city : city.district , city.population , city.name , city.countrycode , city.id , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.capital",
      "country.*",
      "city.district",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'安哥拉'属于哪个地区，人口是多少？ | country : country.name , country.region , country.population , country.continent , country.code , country.* | city : city.district , city.population , city.name , city.countrycode , city.id , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.region",
      "country.population",
      "country.continent",
      "country.code",
      "country.*",
      "city.district",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'非洲'中部区域各国的平均预期寿命是多少？ | country : country.lifeexpectancy , country.region , country.continent , country.name , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.district , city.name , city.population , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.district",
      "city.name",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'非洲'中部的平均预期寿命是多少？? | country : country.lifeexpectancy , country.region , country.continent , country.name , country.gnp , country.* | city : city.district , city.name , city.population , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.region",
      "country.continent",
      "country.name",
      "country.gnp",
      "country.*",
      "city.district",
      "city.name",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'亚洲'预期寿命最短的国家是什么？ | country : country.lifeexpectancy , country.region , country.name , country.continent , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.region",
      "country.name",
      "country.continent",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出最短预期寿命的'亚洲'国家名称。 | country : country.lifeexpectancy , country.name , country.region , country.continent , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.region",
      "country.continent",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'亚洲'的总人口数和最大GNP是多少？ | country : country.gnp , country.region , country.population , country.continent , country.name , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.gnp",
      "country.region",
      "country.population",
      "country.continent",
      "country.name",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'亚洲'有多少人，其中最大的GNP是多少？ | country : country.gnp , country.region , country.continent , country.name , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.gnp",
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'非洲''共和制'国家的平均预期寿命是多少？ | country : country.lifeexpectancy , country.governmentform , country.name , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.governmentform",
      "country.name",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出'非洲''共和制'国家的平均预期寿命 | country : country.lifeexpectancy , country.name , country.continent , country.governmentform , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.continent",
      "country.governmentform",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'亚洲'和'欧洲'大陆的总表面积是多少？ | country : country.surfacearea , country.region , country.continent , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.region",
      "country.continent",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出'亚洲'或'欧洲'国家覆盖的总表面积。 | country : country.surfacearea , country.region , country.continent , country.name , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.region",
      "country.continent",
      "country.name",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'西湖'区有多少人居住？ | city : city.district , city.population , city.name , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.population , country.region , country.name , country.capital , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.district",
      "city.population",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.population",
      "country.region",
      "country.name",
      "country.capital",
      "country.code",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'西湖'区的总人口是多少？ | city : city.population , city.district , city.name , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.region , country.population , country.name , country.capital , country.code , country.* | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.district",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.region",
      "country.population",
      "country.name",
      "country.capital",
      "country.code",
      "country.*",
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "政府为'美国属地'的国家的平均GNP和总人口是多少？ | country : country.governmentform , country.gnp , country.population , country.name , country.indepyear , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.gnp",
      "country.population",
      "country.name",
      "country.indepyear",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出被认为是'美国属地'的国家的平均GNP和总人口。 | country : country.gnp , country.population , country.name , country.region , country.indepyear , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.countrycode , city.district , city.id , city.* | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.gnp",
      "country.population",
      "country.name",
      "country.region",
      "country.indepyear",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.district",
      "city.id",
      "city.*",
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "世界上有多少种不同的语言？ | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.continent , country.name , country.region , country.population , country.capital , country.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.continent",
      "country.name",
      "country.region",
      "country.population",
      "country.capital",
      "country.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "世界上使用的不同语言的数量是多少？ | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.continent , country.name , country.region , country.population , country.capital , country.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.continent",
      "country.name",
      "country.region",
      "country.population",
      "country.capital",
      "country.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'非洲'有多少种类型政府？ | country : country.governmentform , country.continent , country.region , country.name , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'非洲'有多少种不同形式的政府？ | country : country.governmentform , country.continent , country.region , country.name , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'阿鲁巴'使用的语言总数是多少？ | country : country.name , country.region , country.localname , country.population , country.capital , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.region",
      "country.localname",
      "country.population",
      "country.capital",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'阿鲁巴'说多少种语言？ | country : country.name , country.region , country.localname , country.population , country.capital , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.region",
      "country.localname",
      "country.population",
      "country.capital",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'阿富汗'有多少官方语言？ | country : country.name , country.region , country.population , country.continent , country.capital , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.region",
      "country.population",
      "country.continent",
      "country.capital",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'阿富汗'有几种官方语言？ | country : country.name , country.region , country.population , country.continent , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.region",
      "country.population",
      "country.continent",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "使用语言数量最多的国家的名字是什么？ | country : country.name , country.population , country.region , country.continent , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出使用最多语言数量的国家的名字。 | country : country.name , country.population , country.region , country.continent , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪一个大陆有最多不同种的语言？ | country : country.continent , country.region , country.name , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪个大陆讲的语言种类最多？ | country : country.continent , country.region , country.name , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "有多少国家既讲'英语'又讲'荷兰语'？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.region , country.continent , country.population , country.localname , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.region",
      "country.continent",
      "country.population",
      "country.localname",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "使用'英语'和'荷兰语'的国家的数量是多少？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.continent , country.region , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "既说'英语'又说'法语'的国家的名字是什么？ | country : country.name , country.localname , country.region , country.continent , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.localname",
      "country.region",
      "country.continent",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出既说'英语'又说'法语'的国家的名字。 | country : country.name , country.localname , country.region , country.continent , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.localname",
      "country.region",
      "country.continent",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'英语'和'法语'都是官方语言的国家的名字是什么？ | country : country.name , country.localname , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.localname",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "以'英语'和'法语'为官方语言的国家名称。 | country : country.name , country.localname , country.continent , country.region , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.localname",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "讲'汉语'的不同洲的数量是多少？ | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | country : country.region , country.continent , country.name , country.population , country.localname , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.localname",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "有多少洲说'汉语'？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.region , country.continent , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "使用'英语'或'荷兰语'的地区是什么？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | city : city.district , city.name , city.population , city.id , city.countrycode , city.* | country : country.region , country.name , country.population , country.localname , country.continent , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "city.district",
      "city.name",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "country.region",
      "country.name",
      "country.population",
      "country.localname",
      "country.continent",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪个地区讲'荷兰语'或'英语'？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | city : city.district , city.name , city.population , city.id , city.countrycode , city.* | country : country.region , country.localname , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "city.district",
      "city.name",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "country.region",
      "country.localname",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'英语'或'荷兰语'是官方语言的国家是什么？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.region , country.continent , country.population , country.governmentform , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.region",
      "country.continent",
      "country.population",
      "country.governmentform",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪些国家以'英语'或'荷兰语'作为官方语言？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.governmentform , country.continent , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.governmentform",
      "country.continent",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'亚洲'大陆最流行哪种语言？ | country : country.region , country.continent , country.name , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'亚洲'国家中使用最多的语言是什么？ | country : country.region , country.continent , country.name , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "只有一个'共和制'国家讲的语言是哪种语言？ | country : country.governmentform , country.name , country.code , country.population , country.headofstate , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.code",
      "country.population",
      "country.headofstate",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪一种语言只由一个'共和制'政府的国家使用？ | country : country.governmentform , country.name , country.headofstate , country.population , country.code , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.headofstate",
      "country.population",
      "country.code",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "找到使用'英语'的人口最多的城市。 | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.capital , country.population , country.name , country.continent , country.region , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.name",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.capital",
      "country.population",
      "country.name",
      "country.continent",
      "country.region",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "说'英语'的人口最多的城市是什么？ | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.capital , country.population , country.name , country.continent , country.code , country.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.name",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.capital",
      "country.population",
      "country.name",
      "country.continent",
      "country.code",
      "country.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "找出面积最大的'亚洲'国家的名称、人口和预期寿命。 | country : country.surfacearea , country.lifeexpectancy , country.name , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.population , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.lifeexpectancy",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.population",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "面积最大的'亚洲'国家的名称、人口和预期寿命是什么？ | country : country.surfacearea , country.lifeexpectancy , country.name , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.lifeexpectancy",
      "country.name",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'英语'不是官方语言的国家中，平均预期寿命是多少？ | country : country.lifeexpectancy , country.name , country.gnp , country.localname , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.name",
      "country.gnp",
      "country.localname",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出'英语'不'是'官方语言国家的平均预期寿命。 | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.lifeexpectancy , country.name , country.gnp , country.indepyear , country.continent , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.lifeexpectancy",
      "country.name",
      "country.gnp",
      "country.indepyear",
      "country.continent",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "生活在不使用'英语'的国家的总人数是多少？ | country : country.population , country.name , country.region , country.localname , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.population",
      "country.name",
      "country.region",
      "country.localname",
      "country.continent",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "有多少人生活在不讲'英语'的国家？ | country : country.population , country.name , country.region , country.continent , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.countrycode , city.district , city.population , city.id , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.population",
      "country.name",
      "country.region",
      "country.continent",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.countrycode",
      "city.district",
      "city.population",
      "city.id",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "国家元首是'布什'的国家的官方语言是什么？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.headofstate , country.name , country.governmentform , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.headofstate",
      "country.name",
      "country.governmentform",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "国家元首是'布什'的国家使用的官方语言是什么？ | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.headofstate , country.name , country.governmentform , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.headofstate",
      "country.name",
      "country.governmentform",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在1930年前建立的国家中，使用不同的官方语言的总数是多少？ | country : country.indepyear , country.name , country.governmentform , country.population , country.continent , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.name",
      "country.governmentform",
      "country.population",
      "country.continent",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "对于1930年以前成立的国家来说，不同官方语言的总数是多少？ | country : country.indepyear , country.gnpold , country.name , country.governmentform , country.population , country.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.indepyear",
      "country.gnpold",
      "country.name",
      "country.governmentform",
      "country.population",
      "country.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪些国家的表面积比'欧洲'任何国家都大？ | country : country.surfacearea , country.name , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.continent",
      "country.region",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "面积比'欧洲'任何一个国家都大的是哪个国家？ | country : country.surfacearea , country.name , country.continent , country.region , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.continent",
      "country.region",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪些'非洲'国家的人口比'亚洲'任何国家都少? | country : country.continent , country.region , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.countrycode , city.id , city.district , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.district",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "人口比'亚洲'任何国家都少的'非洲'国家有哪些？ | country : country.continent , country.region , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.countrycode , city.id , city.district , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.district",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪些'亚洲'国家的人口比'非洲'任何一个国家都多？ | country : country.continent , country.region , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.countrycode , city.district , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.district",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "人口比'非洲'任何一个国家都多的'亚洲'国家有哪些？ | country : country.continent , country.region , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.continent",
      "country.region",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "不讲'英语'的国家的国家代码是什么？ | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.code2 , country.region , country.population , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.name , city.id , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.code2",
      "country.region",
      "country.population",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回哪些不讲'英语'国家的国家代码。 | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.code2 , country.region , country.continent , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.name , city.id , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.code2",
      "country.region",
      "country.continent",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "人们使用'英语'以外的语言的国家的国家代码是什么？ | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.population , country.continent , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.countrycode , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.population",
      "country.continent",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.countrycode",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出那些不使用'英语'语言的国家的国家代码。 | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.code2 , country.region , country.continent , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.id , city.name , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.code2",
      "country.region",
      "country.continent",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "不讲'英语'且政府形式不是'共和制'的国家的国家代码有哪些？ | country : country.governmentform , country.name , country.code , country.code2 , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.name , city.id , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.name",
      "country.code",
      "country.code2",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回那些不讲'英语'且没有'共和制'政府的国家的代码。 | country : country.governmentform , country.code2 , country.name , country.code , country.indepyear , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.id , city.name , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.code2",
      "country.name",
      "country.code",
      "country.indepyear",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在'欧洲'国家，哪些城市不是以'英语'为官方语言？ | city : city.name , city.countrycode , city.district , city.population , city.id , city.* | countrylanguage : countrylanguage.isofficial , countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.continent , country.region , country.localname , country.capital , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.countrycode",
      "city.district",
      "city.population",
      "city.id",
      "city.*",
      "countrylanguage.isofficial",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.continent",
      "country.region",
      "country.localname",
      "country.capital",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "哪些'欧洲'国家的城市不把'英文'为其官方语言？ | city : city.name , city.countrycode , city.district , city.population , city.id , city.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | country : country.name , country.continent , country.region , country.localname , country.capital , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.countrycode",
      "city.district",
      "city.population",
      "city.id",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.continent",
      "country.region",
      "country.localname",
      "country.capital",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "在官方语言是'中文'的'亚洲'国家有哪些不同的城市？ | country : country.region , country.capital , country.continent , country.name , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.* | city : city.name , city.countrycode , city.district , city.population , city.id , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.capital",
      "country.continent",
      "country.name",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "city.name",
      "city.countrycode",
      "city.district",
      "city.population",
      "city.id",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回在'亚洲'，以'中文'为官方语言的城市的不同名称。 | city : city.name , city.district , city.countrycode , city.population , city.id , city.* | country : country.region , country.continent , country.localname , country.name , country.population , country.* | countrylanguage : countrylanguage.language , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.district",
      "city.countrycode",
      "city.population",
      "city.id",
      "city.*",
      "country.region",
      "country.continent",
      "country.localname",
      "country.name",
      "country.population",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "人口最少的国家的名称、独立年份和表面积是多少？ | country : country.surfacearea , country.indepyear , country.name , country.population , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.indepyear",
      "country.name",
      "country.population",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出人口最少的国家的名称、独立年份和表面积。 | country : country.surfacearea , country.indepyear , country.name , country.population , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.indepyear",
      "country.name",
      "country.population",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "面积最大的国家的人口、名字和领导人是什么？ | country : country.surfacearea , country.name , country.population , country.headofstate , country.localname , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.population , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.population",
      "country.headofstate",
      "country.localname",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.population",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出面积最大的国家的名称、人口和领导人。 | country : country.surfacearea , country.name , country.population , country.headofstate , country.governmentform , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.population",
      "country.headofstate",
      "country.governmentform",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回至少使用3种语言的不同国家名称和语言数量。 | country : country.name , country.region , country.continent , country.population , country.localname , country.* | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.region",
      "country.continent",
      "country.population",
      "country.localname",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "讲2种以上语言的国家的名称是什么，以及它们讲多少种语言？ | country : country.name , country.population , country.region , country.localname , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.region",
      "country.localname",
      "country.continent",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "找出每个地区其人口大于城市平均人口的城市数量。 | city : city.population , city.district , city.name , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.region , country.population , country.name , country.code , country.capital , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.district",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.region",
      "country.population",
      "country.name",
      "country.code",
      "country.capital",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "每个地区有多少城市的人口高于所有城市的平均人口？ | city : city.population , city.district , city.name , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.population , country.region , country.code , country.name , country.capital , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.district",
      "city.name",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.population",
      "country.region",
      "country.code",
      "country.name",
      "country.capital",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "找出每个平均预期寿命超过72岁的政府形式的名称及其对应的总人口。 | country : country.governmentform , country.lifeexpectancy , country.population , country.gnpold , country.name , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.lifeexpectancy",
      "country.population",
      "country.gnpold",
      "country.name",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "平均预期寿命大于72岁的政府形式及其总人口是多少？ | country : country.governmentform , country.lifeexpectancy , country.population , country.gnpold , country.gnp , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.governmentform",
      "country.lifeexpectancy",
      "country.population",
      "country.gnpold",
      "country.gnp",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "找出平均预期寿命短于72岁的每个大洲的平均预期寿命和总人口。 | country : country.lifeexpectancy , country.continent , country.population , country.region , country.gnpold , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.id , city.name , city.population , city.district , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.continent",
      "country.population",
      "country.region",
      "country.gnpold",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.id",
      "city.name",
      "city.population",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "对于平均预期寿命小于72的大洲，不同的大洲以及相应的人口总数和平均预期寿命是什么？ | country : country.lifeexpectancy , country.region , country.continent , country.population , country.name , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.lifeexpectancy",
      "country.region",
      "country.continent",
      "country.population",
      "country.name",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "世界排名前5大面积的国家的名称和国家地区是什么？ | country : country.surfacearea , country.name , country.region , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.district , city.name , city.id , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.region",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.district",
      "city.name",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回最大5个国家的名称和表面积。 | country : country.surfacearea , country.name , country.region , country.code , country.continent , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.name",
      "country.region",
      "country.code",
      "country.continent",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "人口前3多的国家的名字是什么？ | country : country.population , country.name , country.region , country.localname , country.code , country.* | city : city.population , city.name , city.countrycode , city.id , city.district , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.population",
      "country.name",
      "country.region",
      "country.localname",
      "country.code",
      "country.*",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.district",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回人口前3多的国家的名字。 | country : country.name , country.population , country.localname , country.code2 , country.region , country.* | city : city.population , city.name , city.countrycode , city.id , city.district , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.localname",
      "country.code2",
      "country.region",
      "country.*",
      "city.population",
      "city.name",
      "city.countrycode",
      "city.id",
      "city.district",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "3个最少人口的国家的名字是什么？ | country : country.name , country.population , country.region , country.code2 , country.localname , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.population , city.countrycode , city.district , city.id , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.region",
      "country.code2",
      "country.localname",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.population",
      "city.countrycode",
      "city.district",
      "city.id",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回3个人口最少的国家的名字。 | country : country.name , country.population , country.localname , country.region , country.code2 , country.* | sqlite_sequence : sqlite_sequence.name , sqlite_sequence.seq , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.countrycode , city.population , city.id , city.district , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.localname",
      "country.region",
      "country.code2",
      "country.*",
      "sqlite_sequence.name",
      "sqlite_sequence.seq",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.countrycode",
      "city.population",
      "city.id",
      "city.district",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'亚洲'有多少国家？ | country : country.region , country.continent , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.district , city.population , city.id , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "统计'亚洲'国家的数量。 | country : country.region , country.continent , country.name , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.region",
      "country.continent",
      "country.name",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "'欧洲'大陆有'80000'人口的国家叫什么名字？ | country : country.name , country.continent , country.region , country.population , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.continent",
      "country.region",
      "country.population",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.population",
      "city.name",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出'欧洲'人口数是'80000'的国家的名字。 | country : country.name , country.population , country.region , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "面积大于3000的'北美'洲国家的总人口数和平均表面积是多少？ | country : country.surfacearea , country.region , country.continent , country.population , country.name , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.region",
      "country.continent",
      "country.population",
      "country.name",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出面积大于3000的'北美'洲国家的总人口数和平均表面积。 | country : country.surfacearea , country.region , country.continent , country.population , country.name , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | city : city.name , city.population , city.id , city.district , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "country.surfacearea",
      "country.region",
      "country.continent",
      "country.population",
      "country.name",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "city.name",
      "city.population",
      "city.id",
      "city.district",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "人口在160000到900000之间的城市是什么？ | city : city.population , city.name , city.district , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.capital , country.population , country.name , country.code , country.continent , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.population",
      "city.name",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.capital",
      "country.population",
      "country.name",
      "country.code",
      "country.continent",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回人口在160000到900000之间的城市的名字。 | city : city.name , city.population , city.district , city.id , city.countrycode , city.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.population , country.capital , country.name , country.continent , country.region , country.* | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.*",
    "output_sequence": " | ",
    "tc_original": [
      "city.name",
      "city.population",
      "city.district",
      "city.id",
      "city.countrycode",
      "city.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.population",
      "country.capital",
      "country.name",
      "country.continent",
      "country.region",
      "country.*",
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "那个语言被最多的国家使用？ | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.region , country.continent , country.capital , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.capital",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "给出最多国家使用的语言。 | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | country : country.name , country.population , country.region , country.continent , country.capital , country.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.capital",
      "country.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "每个国家中最大比例的人所讲的语言是什么？ | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.region , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.district , city.id , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.district",
      "city.id",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "不同国家的国家代码是什么？每个国家被最多数人讲的语言是什么？ | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.code , country.population , country.code2 , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.population",
      "country.code2",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "讲'西班牙语'的人口比例最大的国家的总数是多少？ | countrylanguage : countrylanguage.percentage , countrylanguage.language , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.population , country.region , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.name , city.id , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.percentage",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "计算以讲'西班牙语'为主的国家的数目。 | countrylanguage : countrylanguage.language , countrylanguage.percentage , countrylanguage.isofficial , countrylanguage.countrycode , countrylanguage.* | country : country.name , country.population , country.region , country.continent , country.code , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.id , city.name , city.district , city.population , city.countrycode , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.percentage",
      "countrylanguage.isofficial",
      "countrylanguage.countrycode",
      "countrylanguage.*",
      "country.name",
      "country.population",
      "country.region",
      "country.continent",
      "country.code",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.id",
      "city.name",
      "city.district",
      "city.population",
      "city.countrycode",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "讲'西班牙语'的人口比例最大的国家的代码是什么？ | countrylanguage : countrylanguage.percentage , countrylanguage.countrycode , countrylanguage.language , countrylanguage.isofficial , countrylanguage.* | country : country.name , country.population , country.code , country.code2 , country.region , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.name , city.district , city.population , city.id , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.percentage",
      "countrylanguage.countrycode",
      "countrylanguage.language",
      "countrylanguage.isofficial",
      "countrylanguage.*",
      "country.name",
      "country.population",
      "country.code",
      "country.code2",
      "country.region",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.name",
      "city.district",
      "city.population",
      "city.id",
      "city.*"
    ]
  },
  {
    "db_id": "world_1",
    "input_sequence": "返回以'西班牙语'为主的国家的代码。 | countrylanguage : countrylanguage.language , countrylanguage.countrycode , countrylanguage.isofficial , countrylanguage.percentage , countrylanguage.* | country : country.name , country.code , country.code2 , country.region , country.continent , country.* | sqlite_sequence : sqlite_sequence.seq , sqlite_sequence.name , sqlite_sequence.* | city : city.countrycode , city.name , city.id , city.district , city.population , city.*",
    "output_sequence": " | ",
    "tc_original": [
      "countrylanguage.language",
      "countrylanguage.countrycode",
      "countrylanguage.isofficial",
      "countrylanguage.percentage",
      "countrylanguage.*",
      "country.name",
      "country.code",
      "country.code2",
      "country.region",
      "country.continent",
      "country.*",
      "sqlite_sequence.seq",
      "sqlite_sequence.name",
      "sqlite_sequence.*",
      "city.countrycode",
      "city.name",
      "city.id",
      "city.district",
      "city.population",
      "city.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "那里有多少个指挥家？ | conductor : conductor.name , conductor.year_of_work , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.performance_id , show.if_first_show , show.attendance , show.* | performance : performance.date , performance.type , performance.share , performance.performance_id , performance.orchestra_id , performance.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.attendance",
      "show.*",
      "performance.date",
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "计算指挥家的数量。 | conductor : conductor.name , conductor.year_of_work , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.attendance , show.performance_id , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.attendance",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "列出按年限升序排列的指挥家的名字。 | conductor : conductor.name , conductor.year_of_work , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "按年龄顺序排列的指挥家名字是什么？ | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.year_of_work , conductor.nationality , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.nationality",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "国籍不是'美国'的指挥家的名字是什么？ | conductor : conductor.nationality , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.conductor_id , orchestra.orchestra_id , orchestra.orchestra , orchestra.record_company , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "返回不是'美国'国籍的指挥人员的姓名。 | conductor : conductor.nationality , conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "按创立年份的降序排列的管弦乐队唱片公司是哪些？ | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "返回按创立年份降序排列的乐团唱片公司的名称。 | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "表演的平均出席率是多少？ | show : show.attendance , show.performance_id , show.show_id , show.result , show.if_first_show , show.* | performance : performance.share , performance.type , performance.date , performance.weekly_rank , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.result",
      "show.if_first_show",
      "show.*",
      "performance.share",
      "performance.type",
      "performance.date",
      "performance.weekly_rank",
      "performance.performance_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "返回所有表演的平均出席率。 | show : show.attendance , show.performance_id , show.show_id , show.result , show.if_first_show , show.* | performance : performance.type , performance.share , performance.date , performance.weekly_rank , performance.performance_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "show.attendance",
      "show.performance_id",
      "show.show_id",
      "show.result",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.share",
      "performance.date",
      "performance.weekly_rank",
      "performance.performance_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "不是'决赛直播'类型的最大和最小份额的表现类型是什么。 | performance : performance.share , performance.type , performance.date , performance.performance_id , performance.official_ratings_(millions) , performance.* | show : show.if_first_show , show.result , show.show_id , show.performance_id , show.attendance , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "performance.share",
      "performance.type",
      "performance.date",
      "performance.performance_id",
      "performance.official_ratings_(millions)",
      "performance.*",
      "show.if_first_show",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "返回不是'决赛直播'类型的表演的最大和最小份额。 | performance : performance.share , performance.type , performance.official_ratings_(millions) , performance.date , performance.performance_id , performance.* | show : show.if_first_show , show.result , show.performance_id , show.show_id , show.attendance , show.* | conductor : conductor.name , conductor.age , conductor.nationality , conductor.conductor_id , conductor.year_of_work , conductor.* | orchestra : orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "performance.share",
      "performance.type",
      "performance.official_ratings_(millions)",
      "performance.date",
      "performance.performance_id",
      "performance.*",
      "show.if_first_show",
      "show.result",
      "show.performance_id",
      "show.show_id",
      "show.attendance",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.nationality",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "orchestra.orchestra_id",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "指挥家有多少个不同的国籍？ | conductor : conductor.nationality , conductor.name , conductor.age , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "统计指挥家不同的国籍数量。 | conductor : conductor.nationality , conductor.name , conductor.age , conductor.conductor_id , conductor.year_of_work , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.date , performance.type , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.nationality",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.date",
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "按照工作年限的降序顺序列出指挥家的名字。 | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "按工作年限降序排列的指挥家的名字是什么？ | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "列出工作年限最长的指挥家的姓名。 | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "那位工作时间最长的指挥家叫什么名字？ | conductor : conductor.year_of_work , conductor.name , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.date , performance.type , performance.share , performance.performance_id , performance.orchestra_id , performance.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.record_company , orchestra.orchestra_id , orchestra.major_record_format , orchestra.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.year_of_work",
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.date",
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.major_record_format",
      "orchestra.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "显示指挥家的名字和他们指挥的管弦乐队的名字。 | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | performance : performance.type , performance.date , performance.share , performance.orchestra_id , performance.performance_id , performance.* | show : show.result , show.show_id , show.performance_id , show.if_first_show , show.attendance , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.year_of_work",
      "conductor.nationality",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.attendance",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "指挥家的名字以及他们指挥的管弦乐队叫什么？ | conductor : conductor.name , conductor.conductor_id , conductor.age , conductor.year_of_work , conductor.nationality , conductor.* | orchestra : orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.performance_id , show.if_first_show , show.attendance , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.year_of_work",
      "conductor.nationality",
      "conductor.*",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.attendance",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "显示指挥过超过一支管弦乐队的指挥家的名字。 | conductor : conductor.name , conductor.conductor_id , conductor.year_of_work , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "指挥过超过一个管弦乐队的指挥家的名字是什么？ | conductor : conductor.name , conductor.conductor_id , conductor.year_of_work , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.major_record_format , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.major_record_format",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "显示指挥过最多的管弦乐队的指挥家的名字。 | conductor : conductor.name , conductor.conductor_id , conductor.year_of_work , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.major_record_format , orchestra.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.major_record_format",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "指挥过最多的管弦乐队的指挥家叫什么名字？ | conductor : conductor.name , conductor.conductor_id , conductor.year_of_work , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.major_record_format , orchestra.* | performance : performance.type , performance.date , performance.share , performance.orchestra_id , performance.performance_id , performance.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.conductor_id",
      "conductor.year_of_work",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.major_record_format",
      "orchestra.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "请显示指挥过2008年后成立的管弦乐队的指挥家姓名。 | conductor : conductor.name , conductor.year_of_work , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.year_of_founded , orchestra.conductor_id , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | performance : performance.date , performance.type , performance.share , performance.performance_id , performance.orchestra_id , performance.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.year_of_founded",
      "orchestra.conductor_id",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "performance.date",
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "指挥过2008年后成立的管弦乐队的指挥家叫什么名字？ | conductor : conductor.name , conductor.year_of_work , conductor.conductor_id , conductor.age , conductor.nationality , conductor.* | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.conductor_id , orchestra.orchestra_id , orchestra.record_company , orchestra.* | show : show.result , show.attendance , show.show_id , show.performance_id , show.if_first_show , show.* | performance : performance.date , performance.type , performance.share , performance.performance_id , performance.orchestra_id , performance.*",
    "output_sequence": " | ",
    "tc_original": [
      "conductor.name",
      "conductor.year_of_work",
      "conductor.conductor_id",
      "conductor.age",
      "conductor.nationality",
      "conductor.*",
      "orchestra.year_of_founded",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.*",
      "show.result",
      "show.attendance",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "performance.date",
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "请显示不同唱片公司及相应管弦乐队的数量。 | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.attendance , show.performance_id , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.attendance",
      "show.performance_id",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "每家唱片公司管理多少支管弦乐队？ | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "请以数量升序显示管弦乐队的唱片格式。 | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.record_company , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "按频率排列的管弦乐队的主要唱片格式是什么？ | orchestra : orchestra.major_record_format , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "列出被最多数量的管弦乐队共享的唱片公司。 | orchestra : orchestra.record_company , orchestra.orchestra_id , orchestra.orchestra , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | performance : performance.share , performance.type , performance.date , performance.orchestra_id , performance.performance_id , performance.* | show : show.result , show.show_id , show.performance_id , show.if_first_show , show.attendance , show.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra_id",
      "orchestra.orchestra",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "performance.share",
      "performance.type",
      "performance.date",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.if_first_show",
      "show.attendance",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "管弦乐队使用最多的唱片公司是什么？ | orchestra : orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "列出没有演出过的管弦乐队的名称。 | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.year_of_founded , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.performance_id , performance.type , performance.share , performance.date , performance.* | show : show.performance_id , show.result , show.show_id , show.if_first_show , show.attendance , show.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.year_of_founded",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.type",
      "performance.share",
      "performance.date",
      "performance.*",
      "show.performance_id",
      "show.result",
      "show.show_id",
      "show.if_first_show",
      "show.attendance",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "没有演出的管弦乐队是什么？ | orchestra : orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.year_of_founded , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.type , performance.share , performance.performance_id , performance.date , performance.* | show : show.performance_id , show.result , show.show_id , show.if_first_show , show.attendance , show.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.type",
      "performance.share",
      "performance.performance_id",
      "performance.date",
      "performance.*",
      "show.performance_id",
      "show.result",
      "show.show_id",
      "show.if_first_show",
      "show.attendance",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "显示2003年前和2003年后成立的管弦乐队所共享的唱片公司。 | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.share , performance.type , performance.date , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.share",
      "performance.type",
      "performance.date",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "2003年之前成立的和2003年以后成立的乐团都使用的唱片公司有哪些？ | orchestra : orchestra.year_of_founded , orchestra.record_company , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.record_company",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "找到记录格式为'CD'或'DVD'的管弦乐队的数量。 | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "计算以'CD'或'DVD'作为记录格式的管弦乐队的数量。 | orchestra : orchestra.major_record_format ( CD , DVD ) , orchestra.orchestra , orchestra.orchestra_id , orchestra.record_company , orchestra.conductor_id , orchestra.* | show : show.result , show.show_id , show.performance_id , show.attendance , show.if_first_show , show.* | performance : performance.type , performance.date , performance.share , performance.performance_id , performance.orchestra_id , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.major_record_format",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.record_company",
      "orchestra.conductor_id",
      "orchestra.*",
      "show.result",
      "show.show_id",
      "show.performance_id",
      "show.attendance",
      "show.if_first_show",
      "show.*",
      "performance.type",
      "performance.date",
      "performance.share",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "显示不止一次演出的管弦乐队成立的年份。 | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | show : show.if_first_show , show.performance_id , show.result , show.show_id , show.attendance , show.* | performance : performance.performance_id , performance.orchestra_id , performance.type , performance.share , performance.date , performance.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.*",
      "show.if_first_show",
      "show.performance_id",
      "show.result",
      "show.show_id",
      "show.attendance",
      "show.*",
      "performance.performance_id",
      "performance.orchestra_id",
      "performance.type",
      "performance.share",
      "performance.date",
      "performance.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "orchestra",
    "input_sequence": "拥有超过一次演出经历的管弦乐队的创立年份是什么？ | orchestra : orchestra.year_of_founded , orchestra.orchestra , orchestra.orchestra_id , orchestra.conductor_id , orchestra.record_company , orchestra.* | performance : performance.orchestra_id , performance.performance_id , performance.share , performance.type , performance.date , performance.* | show : show.performance_id , show.if_first_show , show.result , show.show_id , show.attendance , show.* | conductor : conductor.name , conductor.age , conductor.conductor_id , conductor.nationality , conductor.year_of_work , conductor.*",
    "output_sequence": " | ",
    "tc_original": [
      "orchestra.year_of_founded",
      "orchestra.orchestra",
      "orchestra.orchestra_id",
      "orchestra.conductor_id",
      "orchestra.record_company",
      "orchestra.*",
      "performance.orchestra_id",
      "performance.performance_id",
      "performance.share",
      "performance.type",
      "performance.date",
      "performance.*",
      "show.performance_id",
      "show.if_first_show",
      "show.result",
      "show.show_id",
      "show.attendance",
      "show.*",
      "conductor.name",
      "conductor.age",
      "conductor.conductor_id",
      "conductor.nationality",
      "conductor.year_of_work",
      "conductor.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有多少高中生？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "统计高中生的人数。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示每个高中学生的姓名和年级。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "每个高中生的名字和年级是什么？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示所有高中生的年级。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "每个高中生的年级是多少？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "'小军'在几年级？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "返回高中生'小军'的年级。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示10年级所有高中生的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "10年级所有高中生的名字是什么？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示名字叫'小军'的高中学生的ID。 | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "'小军'的id是什么？ | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "9年级或10年级有多少高中生？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "计算9年级或10年级的高中生人数。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示每个年级的高中生人数。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "每个年级有多少高中生？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "哪个年级的学生最多？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "返回高中人数最多的年级。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示所有至少有4名学生的年级。 | highschooler : highschooler.grade , highschooler.id , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.id",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "哪一个年级有4个或更多的高中生？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示学生ID和其对应的朋友数量。 | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "每个学生有多少个朋友？ | friend : friend.student_id , friend.friend_id , friend.* | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示高中生的名字和他们相应的朋友数量。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "高中生的名字是什么，每个人有多少朋友？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "拥有最多人数朋友的高中生的名字是什么？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "返回有最多朋友数量的高中生的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示至少有3个朋友的高中生的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有3个或更多朋友的高中生的名字是什么？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示高中学生'小军'的所有朋友的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "返回名字是'小军'高中学生的朋友的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "高中生'小军'有多少个朋友？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "统计下'小军'的朋友数。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示所有没有朋友的学生的id。 | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "没有朋友的高中生的id是什么？ | highschooler : highschooler.id , highschooler.grade , highschooler.name , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.grade",
      "highschooler.name",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示所有没有任何朋友的高中生的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "没有朋友的学生的名字是什么？ | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "展示一下那些有朋友而且被别人喜欢的高中生的id。 | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "既有朋友又被人喜欢的学生的id是什么？ | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.*",
    "output_sequence": " | ",
    "tc_original": [
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示所有有朋友和被别人喜欢的学生的名字。 | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "那些既有朋友又有人喜欢的高中生的名字是什么？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "针对每个学生ID，统计其对应的喜欢数量。 | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有每个学生id对应的喜欢数有多少？ | likes : likes.student_id , likes.liked_id , likes.* | highschooler : highschooler.id , highschooler.name , highschooler.grade , highschooler.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "highschooler.id",
      "highschooler.name",
      "highschooler.grade",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示有喜欢的高中学生的名字，以及每个人喜欢的数量。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有喜欢的高中生叫什么名字？每人有多少喜欢的？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有最多喜欢数的高中生叫什么名字？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "给出有最多喜欢数的学生的名字。 | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示至少有2个喜欢的学生的名字。 | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有2个或更多喜欢的学生的名字是什么？ | highschooler : highschooler.name , highschooler.id , highschooler.grade , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.id",
      "highschooler.grade",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "显示年级高于5级且至少有2个朋友的学生的名字。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "那些年级在5岁以上且有2个或更多朋友的高中生叫什么名字？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "'小军'有多少喜欢？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "返回高中生'小军'的喜欢数。 | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | likes : likes.student_id , likes.liked_id , likes.* | friend : friend.student_id , friend.friend_id , friend.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "找出所有有朋友的学生的平均年级。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "有朋友的学生的平均年级是多少？ | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.friend_id , friend.student_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.friend_id",
      "friend.student_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "找出没有朋友的学生的最低年级。 | highschooler : highschooler.grade , highschooler.name , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.grade",
      "highschooler.name",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "network_1",
    "input_sequence": "没有任何朋友的最低年级学生是谁？ | highschooler : highschooler.name , highschooler.grade , highschooler.id , highschooler.* | friend : friend.student_id , friend.friend_id , friend.* | likes : likes.student_id , likes.liked_id , likes.*",
    "output_sequence": " | ",
    "tc_original": [
      "highschooler.name",
      "highschooler.grade",
      "highschooler.id",
      "highschooler.*",
      "friend.student_id",
      "friend.friend_id",
      "friend.*",
      "likes.student_id",
      "likes.liked_id",
      "likes.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些州既有主人又有专家居住？ | owners : owners.state , owners.first_name , owners.owner_id , owners.city , owners.street , owners.* | professionals : professionals.state , professionals.role_code , professionals.professional_id , professionals.last_name , professionals.first_name , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.city",
      "owners.street",
      "owners.*",
      "professionals.state",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.first_name",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出既有主人又有专家居住的州。 | professionals : professionals.state , professionals.role_code , professionals.professional_id , professionals.last_name , professionals.first_name , professionals.* | owners : owners.state , owners.owner_id , owners.first_name , owners.city , owners.street , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.state",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.first_name",
      "professionals.*",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.city",
      "owners.street",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "经过治疗的狗的平均年龄是多少？ | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.breed_code , dogs.dog_id , dogs.* | treatments : treatments.treatment_type_code , treatments.date_of_treatment , treatments.dog_id , treatments.cost_of_treatment , treatments.treatment_id , treatments.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.breed_code",
      "dogs.dog_id",
      "dogs.*",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.dog_id",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出经过治疗的狗的平均年龄。 | dogs : dogs.age , dogs.date_of_birth , dogs.breed_code , dogs.name , dogs.dog_id , dogs.* | treatments : treatments.treatment_type_code , treatments.dog_id , treatments.treatment_id , treatments.date_of_treatment , treatments.cost_of_treatment , treatments.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.breed_code",
      "dogs.name",
      "dogs.dog_id",
      "dogs.*",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.date_of_treatment",
      "treatments.cost_of_treatment",
      "treatments.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些专家住在印第安纳州，或者已经做过两次以上的治疗？列出他或她的ID、姓和手机。 | professionals : professionals.first_name , professionals.last_name , professionals.professional_id , professionals.state , professionals.cell_number , professionals.* | treatments : treatments.professional_id , treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | owners : owners.last_name , owners.state , owners.home_phone , owners.owner_id , owners.cell_number , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.professional_id",
      "professionals.state",
      "professionals.cell_number",
      "professionals.*",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "owners.last_name",
      "owners.state",
      "owners.home_phone",
      "owners.owner_id",
      "owners.cell_number",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出居住在印第安纳州且曾做过两次以上治疗的专家的ID、姓氏和手机。 | professionals : professionals.last_name , professionals.professional_id , professionals.cell_number , professionals.home_phone , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.treatment_type_code , treatments.* | owners : owners.last_name , owners.owner_id , owners.state , owners.home_phone , owners.cell_number , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.last_name",
      "professionals.professional_id",
      "professionals.cell_number",
      "professionals.home_phone",
      "professionals.state",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.treatment_type_code",
      "treatments.*",
      "owners.last_name",
      "owners.owner_id",
      "owners.state",
      "owners.home_phone",
      "owners.cell_number",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些狗没有花费他们的主人超过1000元的治疗费？列出狗的名字。 | dogs : dogs.name , dogs.owner_id , dogs.dog_id , dogs.breed_code , dogs.age , dogs.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.professional_id , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.state , owners.city , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.breed_code",
      "dogs.age",
      "dogs.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "owners.first_name",
      "owners.owner_id",
      "owners.last_name",
      "owners.state",
      "owners.city",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "主人花了1000元以上来治疗的狗的名字是什么？ | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.age , dogs.gender , dogs.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | owners : owners.first_name , owners.last_name , owners.state , owners.owner_id , owners.city , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "owners.first_name",
      "owners.last_name",
      "owners.state",
      "owners.owner_id",
      "owners.city",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些名字可用于专家或主人，但不用作狗的名字？ | professionals : professionals.first_name , professionals.role_code , professionals.last_name , professionals.state , professionals.professional_id , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.weight , dogs.* | owners : owners.first_name , owners.owner_id , owners.last_name , owners.state , owners.street , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.role_code",
      "professionals.last_name",
      "professionals.state",
      "professionals.professional_id",
      "professionals.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "owners.first_name",
      "owners.owner_id",
      "owners.last_name",
      "owners.state",
      "owners.street",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出专业人士或主人使用的名字，但不用作狗名的名字。 | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.state , professionals.professional_id , professionals.* | dogs : dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.weight , dogs.* | owners : owners.first_name , owners.last_name , owners.owner_id , owners.state , owners.street , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.state",
      "professionals.professional_id",
      "professionals.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "owners.first_name",
      "owners.last_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些专家没有对狗进行任何治疗？列出专业人员的id、角色和电子邮件。 | professionals : professionals.role_code , professionals.professional_id , professionals.email_address , professionals.first_name , professionals.cell_number , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.dog_id , dogs.age , dogs.gender , dogs.weight , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.email_address",
      "professionals.first_name",
      "professionals.cell_number",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.cost_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "请告诉我没有对狗进行任何治疗的专家的id、角色和电子邮件。 | professionals : professionals.role_code , professionals.email_address , professionals.professional_id , professionals.first_name , professionals.last_name , professionals.* | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | dogs : dogs.dog_id , dogs.owner_id , dogs.name , dogs.age , dogs.gender , dogs.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.email_address , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.role_code",
      "professionals.email_address",
      "professionals.professional_id",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.email_address",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "那个主人拥有最多的狗？列出主人的ID、名字和姓氏。 | owners : owners.last_name , owners.first_name , owners.owner_id , owners.street , owners.state , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.breed_code , dogs.size_code , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.street",
      "owners.state",
      "owners.*",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "返回拥有最多狗的主人的ID、名字和姓氏。 | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.street , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.breed_code , dogs.size_code , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.state , professionals.street , professionals.city , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.state",
      "professionals.street",
      "professionals.city",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些专家至少做过两次治疗？列出专业人员的ID、角色和名字。 | professionals : professionals.first_name , professionals.role_code , professionals.professional_id , professionals.last_name , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.state",
      "professionals.*",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "进行过两次或更多次治疗的专家的ID、角色和名字是什么？ | professionals : professionals.first_name , professionals.role_code , professionals.professional_id , professionals.last_name , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.last_name",
      "professionals.state",
      "professionals.*",
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "被养最多数量狗的品种名称叫什么？ | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.name , dogs.breed_code , dogs.owner_id , dogs.dog_id , dogs.date_adopted , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.date_adopted",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "被喂养最多数量的狗都有哪些品种？给我这个品种的名字。 | breeds : breeds.breed_name , breeds.breed_code , breeds.* | dogs : dogs.name , dogs.breed_code , dogs.owner_id , dogs.dog_id , dogs.abandoned_yn , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.owner_id , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.abandoned_yn",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪一位主人为他或她的狗支付了最多的治疗费？列出主人的ID和姓氏。 | owners : owners.last_name , owners.owner_id , owners.first_name , owners.state , owners.street , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.professional_id , treatments.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.owner_id",
      "owners.first_name",
      "owners.state",
      "owners.street",
      "owners.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.professional_id",
      "treatments.*",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "告诉我花在他或她的狗身上最多治疗费的主人的ID和姓氏。 | owners : owners.last_name , owners.owner_id , owners.first_name , owners.state , owners.street , owners.* | treatments : treatments.cost_of_treatment , treatments.dog_id , treatments.treatment_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.breed_code , dogs.age , dogs.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.owner_id",
      "owners.first_name",
      "owners.state",
      "owners.street",
      "owners.*",
      "treatments.cost_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.breed_code",
      "dogs.age",
      "dogs.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "总花费最少的治疗类型的描述是什么？ | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "请给我描述一下总花费最低的治疗类型。 | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.professional_id , treatments.dog_id , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪一个主人为他们的狗支付了最多的钱？显示主人的ID和邮政编码。 | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.email_address , owners.last_name , owners.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | treatments : treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "owners.zip_code",
      "owners.owner_id",
      "owners.first_name",
      "owners.email_address",
      "owners.last_name",
      "owners.*",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出总计为他或她的狗花了最多钱的主人的ID和邮政编码。 | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | dogs : dogs.owner_id , dogs.dog_id , dogs.name , dogs.age , dogs.gender , dogs.* | owners : owners.zip_code , owners.owner_id , owners.first_name , owners.email_address , owners.state , owners.* | treatments : treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "owners.zip_code",
      "owners.owner_id",
      "owners.first_name",
      "owners.email_address",
      "owners.state",
      "owners.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些专家至少做过两种治疗？列出他们的专业ID和手机号码。 | treatments : treatments.professional_id , treatments.treatment_id , treatments.dog_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.cell_number , professionals.professional_id , professionals.home_phone , professionals.first_name , professionals.last_name , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.home_phone , owners.cell_number , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "professionals.cell_number",
      "professionals.professional_id",
      "professionals.home_phone",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.home_phone",
      "owners.cell_number",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出做过两种或更多种治疗的专业人员的ID和手机号码。 | treatments : treatments.professional_id , treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.date_of_treatment , treatments.* | professionals : professionals.cell_number , professionals.home_phone , professionals.professional_id , professionals.first_name , professionals.last_name , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.cell_number , owners.owner_id , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.date_of_treatment",
      "treatments.*",
      "professionals.cell_number",
      "professionals.home_phone",
      "professionals.professional_id",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.cell_number",
      "owners.owner_id",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "治疗费用低于平均的专家的名字和姓氏是什么？ | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.city , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.* | charges : charges.charge_amount , charges.charge_id , charges.charge_type , charges.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.last_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.city",
      "professionals.*",
      "treatments.cost_of_treatment",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.charge_type",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.last_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些专家的治疗费用低于平均水平？给出名字和姓氏。 | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.street , professionals.* | treatments : treatments.cost_of_treatment , treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | owners : owners.first_name , owners.last_name , owners.street , owners.city , owners.state , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.street",
      "professionals.*",
      "treatments.cost_of_treatment",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "owners.first_name",
      "owners.last_name",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出每个治疗的日期，以及操作它的专业人员的名字。 | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.treatment_id , treatments.cost_of_treatment , treatments.treatment_type_code , treatments.* | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.state , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.date_of_treatment",
      "treatments.professional_id",
      "treatments.treatment_id",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.*",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.state",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每次治疗的日期和操作专业人员的名字是什么？ | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.state , professionals.* | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.cost_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.state",
      "professionals.*",
      "treatments.date_of_treatment",
      "treatments.professional_id",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出每种治疗的费用和相应的治疗类型描述。 | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每个治疗的费用和治疗类型描述是什么？ | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出每个主人的名字、姓氏和他的狗的大小。 | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.street , owners.* | dogs : dogs.name , dogs.size_code , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.* | sizes : sizes.size_code , sizes.size_description , sizes.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "dogs.name",
      "dogs.size_code",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.*",
      "sizes.size_code",
      "sizes.size_description",
      "sizes.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每个主人的名字、姓氏和他们的狗的大小是什么？ | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.street , owners.* | dogs : dogs.size_code , dogs.name , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.* | sizes : sizes.size_code , sizes.size_description , sizes.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "dogs.size_code",
      "dogs.name",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.*",
      "sizes.size_code",
      "sizes.size_description",
      "sizes.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出主人的名字和狗的名字对。 | owners : owners.first_name , owners.last_name , owners.owner_id , owners.state , owners.street , owners.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.state , professionals.street , professionals.city , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.state",
      "professionals.street",
      "professionals.city",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每个主人的名字和他们的狗的名字是什么？ | owners : owners.first_name , owners.last_name , owners.owner_id , owners.state , owners.city , owners.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.owner_id",
      "owners.state",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出最稀有品种的狗的名字和它们的治疗日期。 | dogs : dogs.name , dogs.breed_code , dogs.dog_id , dogs.age , dogs.gender , dogs.* | treatments : treatments.date_of_treatment , treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.cost_of_treatment , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.breed_code",
      "dogs.dog_id",
      "dogs.age",
      "dogs.gender",
      "dogs.*",
      "treatments.date_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪种狗最稀有？显示他们的名字和治疗日期。 | treatments : treatments.date_of_treatment , treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.dog_id , dogs.age , dogs.size_code , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.date_of_treatment",
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.dog_id",
      "dogs.age",
      "dogs.size_code",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些狗是在'山西'的人拥有的？列出主人的名字和狗的名字。 | owners : owners.first_name , owners.state , owners.last_name , owners.owner_id , owners.city , owners.* | dogs : dogs.name , dogs.dog_id , dogs.breed_code , dogs.owner_id , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.state",
      "owners.last_name",
      "owners.owner_id",
      "owners.city",
      "owners.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.breed_code",
      "dogs.owner_id",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出居住在'山西'的主人的名字和他们拥有的狗的名字。 | owners : owners.first_name , owners.state , owners.last_name , owners.city , owners.owner_id , owners.* | dogs : dogs.name , dogs.dog_id , dogs.owner_id , dogs.breed_code , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.state",
      "owners.last_name",
      "owners.city",
      "owners.owner_id",
      "owners.*",
      "dogs.name",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "接受治疗的狗的住院日期和出院日期是什么？ | dogs : dogs.date_departed , dogs.date_arrived , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.* | treatments : treatments.date_of_treatment , treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.* | charges : charges.charge_type , charges.charge_id , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_departed",
      "dogs.date_arrived",
      "dogs.date_adopted",
      "dogs.name",
      "dogs.dog_id",
      "dogs.*",
      "treatments.date_of_treatment",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_type",
      "charges.charge_id",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出接受治疗的狗的住院日期和出院日期。 | dogs : dogs.date_departed , dogs.date_arrived , dogs.date_adopted , dogs.name , dogs.breed_code , dogs.* | treatments : treatments.date_of_treatment , treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.* | charges : charges.charge_type , charges.charge_id , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_departed",
      "dogs.date_arrived",
      "dogs.date_adopted",
      "dogs.name",
      "dogs.breed_code",
      "dogs.*",
      "treatments.date_of_treatment",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_type",
      "charges.charge_id",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出拥有年纪最小的狗的主人的姓氏。 | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.street , owners.* | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.owner_id , dogs.dog_id , dogs.* | charges : charges.charge_type , charges.charge_id , charges.charge_amount , charges.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.owner_id",
      "dogs.dog_id",
      "dogs.*",
      "charges.charge_type",
      "charges.charge_id",
      "charges.charge_amount",
      "charges.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "谁拥有年纪最小的狗？给我他或她的姓氏。 | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.dog_id , dogs.gender , dogs.* | owners : owners.last_name , owners.first_name , owners.owner_id , owners.state , owners.street , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.dog_id",
      "dogs.gender",
      "dogs.*",
      "owners.last_name",
      "owners.first_name",
      "owners.owner_id",
      "owners.state",
      "owners.street",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出居住在'台湾'省或'福建'省的专家的电子邮件。 | professionals : professionals.email_address , professionals.state , professionals.first_name , professionals.last_name , professionals.role_code , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.state , owners.street , owners.city , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.email_address",
      "professionals.state",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "居住在'台湾'省或'福建'省的专家的电子邮件是什么？ | professionals : professionals.email_address , professionals.state , professionals.last_name , professionals.first_name , professionals.role_code , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.state , owners.street , owners.city , owners.owner_id , owners.first_name , owners.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.email_address",
      "professionals.state",
      "professionals.last_name",
      "professionals.first_name",
      "professionals.role_code",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "所有狗的住院日期和出院日期是什么？ | dogs : dogs.date_departed , dogs.date_arrived , dogs.date_adopted , dogs.name , dogs.abandoned_yn , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.cost_of_treatment , treatments.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_departed",
      "dogs.date_arrived",
      "dogs.date_adopted",
      "dogs.name",
      "dogs.abandoned_yn",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出所有狗的住院日期和出院日期。 | dogs : dogs.date_departed , dogs.date_arrived , dogs.date_adopted , dogs.name , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | treatments : treatments.date_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.cost_of_treatment , treatments.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.date_departed",
      "dogs.date_arrived",
      "dogs.date_adopted",
      "dogs.name",
      "dogs.dog_id",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "有多少狗经过治疗？ | treatments : treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.date_of_treatment , treatments.professional_id , treatments.* | dogs : dogs.breed_code , dogs.name , dogs.dog_id , dogs.size_code , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.date_of_treatment",
      "treatments.professional_id",
      "treatments.*",
      "dogs.breed_code",
      "dogs.name",
      "dogs.dog_id",
      "dogs.size_code",
      "dogs.age",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "计算经过治疗的狗的数量。 | treatments : treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.cost_of_treatment , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.size_code , dogs.dog_id , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.cost_of_treatment",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.dog_id",
      "dogs.age",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "有多少专家对狗进行过治疗？ | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.dog_id , treatments.date_of_treatment , treatments.cost_of_treatment , treatments.* | professionals : professionals.last_name , professionals.first_name , professionals.role_code , professionals.state , professionals.professional_id , professionals.* | dogs : dogs.name , dogs.breed_code , dogs.age , dogs.gender , dogs.weight , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.cost_of_treatment",
      "treatments.*",
      "professionals.last_name",
      "professionals.first_name",
      "professionals.role_code",
      "professionals.state",
      "professionals.professional_id",
      "professionals.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出曾经治疗过狗的专业人员的数量。 | treatments : treatments.professional_id , treatments.date_of_treatment , treatments.treatment_type_code , treatments.dog_id , treatments.treatment_id , treatments.* | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.state , professionals.* | dogs : dogs.name , dogs.breed_code , dogs.age , dogs.gender , dogs.weight , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.professional_id",
      "treatments.date_of_treatment",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.*",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.state",
      "professionals.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些专家居住在一个包含'西'字的城市？列出他或她的角色，街道，城市和州。 | professionals : professionals.first_name , professionals.street , professionals.state , professionals.city , professionals.role_code , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.owner_id , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.street",
      "professionals.state",
      "professionals.city",
      "professionals.role_code",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出居住在包含子字符串'西'的城市的专家的角色，街道，城市和州。 | professionals : professionals.street , professionals.state , professionals.city , professionals.role_code , professionals.first_name , professionals.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.street",
      "professionals.state",
      "professionals.city",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "哪些主人居住在名称中包含子字符串'北'的州？列出他的名字、姓氏和电子邮件。 | owners : owners.last_name , owners.first_name , owners.state , owners.email_address , owners.cell_number , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.city , professionals.state , professionals.street , professionals.last_name , professionals.professional_id , professionals.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.first_name",
      "owners.state",
      "owners.email_address",
      "owners.cell_number",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.last_name",
      "professionals.professional_id",
      "professionals.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "返回居住在名称包含子字符串'北'的州的所有者的姓氏、姓氏和电子邮件。 | owners : owners.last_name , owners.email_address , owners.first_name , owners.state , owners.cell_number , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.state , professionals.street , professionals.city , professionals.last_name , professionals.email_address , professionals.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.last_name",
      "owners.email_address",
      "owners.first_name",
      "owners.state",
      "owners.cell_number",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.state",
      "professionals.street",
      "professionals.city",
      "professionals.last_name",
      "professionals.email_address",
      "professionals.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "有多少狗的年龄低于平均年龄？ | dogs : dogs.age , dogs.name , dogs.date_of_birth , dogs.breed_code , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.state , owners.street , owners.city , owners.first_name , owners.last_name , owners.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.date_of_birth",
      "dogs.breed_code",
      "dogs.dog_id",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.state",
      "owners.street",
      "owners.city",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "计算年龄低于平均的狗的数量。 | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.breed_code , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.first_name , owners.last_name , owners.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.breed_code",
      "dogs.dog_id",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "最近的治疗费用是多少？ | treatments : treatments.cost_of_treatment , treatments.date_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.cost_of_treatment",
      "treatments.date_of_treatment",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "给我看看最近执行的治疗费用。 | treatments : treatments.date_of_treatment , treatments.cost_of_treatment , treatments.treatment_id , treatments.treatment_type_code , treatments.dog_id , treatments.* | charges : charges.charge_amount , charges.charge_type , charges.charge_id , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.date_of_treatment",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_amount",
      "charges.charge_type",
      "charges.charge_id",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "有多少狗没有经过任何治疗？ | dogs : dogs.breed_code , dogs.name , dogs.size_code , dogs.dog_id , dogs.owner_id , dogs.* | treatments : treatments.dog_id , treatments.treatment_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.date_of_treatment , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | treatment_types : treatment_types.treatment_type_code , treatment_types.treatment_type_description , treatment_types.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.breed_code",
      "dogs.name",
      "dogs.size_code",
      "dogs.dog_id",
      "dogs.owner_id",
      "dogs.*",
      "treatments.dog_id",
      "treatments.treatment_id",
      "treatments.treatment_type_code",
      "treatments.cost_of_treatment",
      "treatments.date_of_treatment",
      "treatments.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "treatment_types.treatment_type_code",
      "treatment_types.treatment_type_description",
      "treatment_types.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "告诉我接受治疗的狗的数量。 | treatments : treatments.dog_id , treatments.treatment_type_code , treatments.treatment_id , treatments.professional_id , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.size_code , dogs.dog_id , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "treatments.dog_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.professional_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.dog_id",
      "dogs.age",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "有多少主人暂时没有狗？ | dogs : dogs.abandoned_yn , dogs.owner_id , dogs.breed_code , dogs.name , dogs.dog_id , dogs.* | owners : owners.state , owners.first_name , owners.owner_id , owners.city , owners.street , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.abandoned_yn",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.name",
      "dogs.dog_id",
      "dogs.*",
      "owners.state",
      "owners.first_name",
      "owners.owner_id",
      "owners.city",
      "owners.street",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找到在现在不拥有任何狗的主人。 | owners : owners.first_name , owners.last_name , owners.state , owners.owner_id , owners.city , owners.* | dogs : dogs.owner_id , dogs.breed_code , dogs.name , dogs.abandoned_yn , dogs.size_code , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "owners.first_name",
      "owners.last_name",
      "owners.state",
      "owners.owner_id",
      "owners.city",
      "owners.*",
      "dogs.owner_id",
      "dogs.breed_code",
      "dogs.name",
      "dogs.abandoned_yn",
      "dogs.size_code",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "有多少专家没有对狗进行任何治疗？ | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.cost_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.size_code , dogs.dog_id , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.state",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.cost_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.dog_id",
      "dogs.age",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出没有治疗过狗的专家的数量。 | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.state , professionals.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.date_of_treatment , treatments.* | dogs : dogs.name , dogs.breed_code , dogs.size_code , dogs.dog_id , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.state",
      "professionals.*",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.date_of_treatment",
      "treatments.*",
      "dogs.name",
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.dog_id",
      "dogs.age",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出被遗弃的狗的名字、年龄和体重。1代表是，0代表不。 | dogs : dogs.name , dogs.age , dogs.weight , dogs.abandoned_yn , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.last_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.name",
      "dogs.age",
      "dogs.weight",
      "dogs.abandoned_yn",
      "dogs.dog_id",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "被遗弃的狗的名字、年龄和体重是多少？注意在表中1表示是，0表示不。 | dogs : dogs.age , dogs.weight , dogs.name , dogs.abandoned_yn , dogs.dog_id , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.street , owners.city , owners.state , owners.first_name , owners.last_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.weight",
      "dogs.name",
      "dogs.abandoned_yn",
      "dogs.dog_id",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "所有狗的平均年龄是多少？ | dogs : dogs.age , dogs.name , dogs.date_of_birth , dogs.breed_code , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.city , owners.state , owners.street , owners.first_name , owners.last_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.date_of_birth",
      "dogs.breed_code",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.first_name",
      "owners.last_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "计算所有狗的平均年龄。 | dogs : dogs.age , dogs.name , dogs.breed_code , dogs.date_of_birth , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.city , owners.state , owners.street , owners.first_name , owners.last_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.name",
      "dogs.breed_code",
      "dogs.date_of_birth",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.first_name",
      "owners.last_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "最老的狗的年龄是多少？ | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.dog_id , dogs.gender , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.first_name , owners.last_name , owners.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.dog_id",
      "dogs.gender",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "告诉我最老的狗的年龄。 | dogs : dogs.age , dogs.date_of_birth , dogs.name , dogs.dog_id , dogs.breed_code , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | owners : owners.city , owners.state , owners.street , owners.first_name , owners.last_name , owners.* | professionals : professionals.city , professionals.state , professionals.street , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.age",
      "dogs.date_of_birth",
      "dogs.name",
      "dogs.dog_id",
      "dogs.breed_code",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.first_name",
      "owners.last_name",
      "owners.*",
      "professionals.city",
      "professionals.state",
      "professionals.street",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每个收费类型要多少钱？列出费用类型及其金额。 | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_type",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出每个费用类型及其金额。 | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | treatments : treatments.treatment_type_code , treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.professional_id , professionals.role_code , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_type",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.*",
      "treatments.treatment_type_code",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.professional_id",
      "professionals.role_code",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "最贵的收费类型要多少钱？ | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.treatment_type_code , treatments.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | owners : owners.city , owners.state , owners.street , owners.owner_id , owners.first_name , owners.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_type",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.owner_id",
      "owners.first_name",
      "owners.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "最贵的收费类型的金额是多少？ | charges : charges.charge_type , charges.charge_amount , charges.charge_id , charges.* | treatments : treatments.cost_of_treatment , treatments.treatment_type_code , treatments.treatment_id , treatments.dog_id , treatments.professional_id , treatments.* | owners : owners.street , owners.city , owners.state , owners.owner_id , owners.first_name , owners.* | professionals : professionals.street , professionals.city , professionals.state , professionals.role_code , professionals.first_name , professionals.*",
    "output_sequence": " | ",
    "tc_original": [
      "charges.charge_type",
      "charges.charge_amount",
      "charges.charge_id",
      "charges.*",
      "treatments.cost_of_treatment",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.dog_id",
      "treatments.professional_id",
      "treatments.*",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.owner_id",
      "owners.first_name",
      "owners.*",
      "professionals.street",
      "professionals.city",
      "professionals.state",
      "professionals.role_code",
      "professionals.first_name",
      "professionals.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出所有专家的电子邮件、手机号码和家庭电话。 | professionals : professionals.email_address , professionals.home_phone , professionals.cell_number , professionals.first_name , professionals.last_name , professionals.* | owners : owners.home_phone , owners.street , owners.city , owners.state , owners.cell_number , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.email_address",
      "professionals.home_phone",
      "professionals.cell_number",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "owners.home_phone",
      "owners.street",
      "owners.city",
      "owners.state",
      "owners.cell_number",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每个专家的电子邮件、手机号码和家庭电话是什么？ | professionals : professionals.email_address , professionals.home_phone , professionals.cell_number , professionals.first_name , professionals.last_name , professionals.* | owners : owners.home_phone , owners.city , owners.state , owners.street , owners.cell_number , owners.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.* | dogs : dogs.name , dogs.age , dogs.gender , dogs.weight , dogs.dog_id , dogs.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.email_address",
      "professionals.home_phone",
      "professionals.cell_number",
      "professionals.first_name",
      "professionals.last_name",
      "professionals.*",
      "owners.home_phone",
      "owners.city",
      "owners.state",
      "owners.street",
      "owners.cell_number",
      "owners.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*",
      "dogs.name",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.dog_id",
      "dogs.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "所有品种类型和大小的组合是什么？ | breeds : breeds.breed_name , breeds.breed_code , breeds.* | sizes : sizes.size_code , sizes.size_description , sizes.* | dogs : dogs.name , dogs.size_code , dogs.age , dogs.gender , dogs.weight , dogs.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "sizes.size_code",
      "sizes.size_description",
      "sizes.*",
      "dogs.name",
      "dogs.size_code",
      "dogs.age",
      "dogs.gender",
      "dogs.weight",
      "dogs.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "找出不同的狗品种类型和体型的组合。 | dogs : dogs.breed_code , dogs.size_code , dogs.name , dogs.weight , dogs.age , dogs.* | breeds : breeds.breed_name , breeds.breed_code , breeds.* | sizes : sizes.size_description , sizes.size_code , sizes.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "dogs.breed_code",
      "dogs.size_code",
      "dogs.name",
      "dogs.weight",
      "dogs.age",
      "dogs.*",
      "breeds.breed_name",
      "breeds.breed_code",
      "breeds.*",
      "sizes.size_description",
      "sizes.size_code",
      "sizes.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "列出所有专家的名字以及他们已经做治疗的描述。 | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.city , professionals.* | treatments : treatments.date_of_treatment , treatments.professional_id , treatments.treatment_type_code , treatments.cost_of_treatment , treatments.treatment_id , treatments.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | sizes : sizes.size_description , sizes.size_code , sizes.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.city",
      "professionals.*",
      "treatments.date_of_treatment",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.cost_of_treatment",
      "treatments.treatment_id",
      "treatments.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "sizes.size_description",
      "sizes.size_code",
      "sizes.*"
    ]
  },
  {
    "db_id": "dog_kennels",
    "input_sequence": "每个专家的名字和所实施的治疗的描述是什么？ | professionals : professionals.first_name , professionals.last_name , professionals.role_code , professionals.professional_id , professionals.state , professionals.* | treatment_types : treatment_types.treatment_type_description , treatment_types.treatment_type_code , treatment_types.* | treatments : treatments.professional_id , treatments.treatment_type_code , treatments.treatment_id , treatments.date_of_treatment , treatments.dog_id , treatments.* | charges : charges.charge_id , charges.charge_type , charges.charge_amount , charges.*",
    "output_sequence": " | ",
    "tc_original": [
      "professionals.first_name",
      "professionals.last_name",
      "professionals.role_code",
      "professionals.professional_id",
      "professionals.state",
      "professionals.*",
      "treatment_types.treatment_type_description",
      "treatment_types.treatment_type_code",
      "treatment_types.*",
      "treatments.professional_id",
      "treatments.treatment_type_code",
      "treatments.treatment_id",
      "treatments.date_of_treatment",
      "treatments.dog_id",
      "treatments.*",
      "charges.charge_id",
      "charges.charge_type",
      "charges.charge_amount",
      "charges.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "有多少歌手？ | singer : singer.name , singer.net_worth_millions , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.net_worth_millions",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "歌手的总数是多少？ | singer : singer.name , singer.net_worth_millions , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.singer_id , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.net_worth_millions",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.singer_id",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "按净资产升序排列歌手姓名。 | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "按净资产升序排序的歌手的名字是什么？ | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.birth_year , singer.citizenship , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.citizenship",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "歌手的出生年份和国籍是什么？ | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "歌手的出生年份和国籍是什么？ | singer : singer.birth_year , singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "列出国籍不是'巴黎'的歌手的名字。 | singer : singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "那些不是'法国'公民的歌手的名字是什么？ | singer : singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.* | song : song.title , song.sales , song.singer_id , song.highest_position , song.song_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.singer_id",
      "song.highest_position",
      "song.song_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示出生年份是1948年或1949年的歌手的名字 | singer : singer.birth_year , singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "1948年或1949年出生的歌手的名字是什么？ | singer : singer.birth_year , singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "拥有最大净资产的歌手叫什么名字？ | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "最富裕的歌手叫什么名字？ | singer : singer.net_worth_millions , singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.net_worth_millions",
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示歌手的不同国籍和每个国籍的歌手人数。 | singer : singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "对于每一个国籍，有多少歌手来自那个国家？ | singer : singer.citizenship , singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "请显示歌手最常见的国籍。 | singer : singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.birth_year , singer.* | song : song.sales , song.title , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.net_worth_millions",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.sales",
      "song.title",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "歌手最常见的国籍是什么？ | singer : singer.citizenship , singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.* | song : song.sales , song.title , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*",
      "song.sales",
      "song.title",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示不同的国籍和每个国籍歌手的最大净资产。 | singer : singer.citizenship , singer.net_worth_millions , singer.name , singer.singer_id , singer.birth_year , singer.* | song : song.sales , song.title , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.net_worth_millions",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.*",
      "song.sales",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "对于每个国籍来说，最大的净资产是多少？ | singer : singer.citizenship , singer.net_worth_millions , singer.name , singer.birth_year , singer.singer_id , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.citizenship",
      "singer.net_worth_millions",
      "singer.name",
      "singer.birth_year",
      "singer.singer_id",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示歌曲名和歌手的名字。 | song : song.title , song.song_id , song.sales , song.singer_id , song.highest_position , song.* | singer : singer.name , singer.singer_id , singer.citizenship , singer.birth_year , singer.net_worth_millions , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "song.title",
      "song.song_id",
      "song.sales",
      "song.singer_id",
      "song.highest_position",
      "song.*",
      "singer.name",
      "singer.singer_id",
      "singer.citizenship",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "歌曲名和歌手名字是什么？ | song : song.title , song.sales , song.song_id , song.singer_id , song.highest_position , song.* | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.citizenship , singer.birth_year , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "song.title",
      "song.sales",
      "song.song_id",
      "song.singer_id",
      "song.highest_position",
      "song.*",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.birth_year",
      "singer.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示销量超过300000首的不同歌手的名字。 | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.citizenship , singer.* | song : song.sales , song.singer_id , song.title , song.highest_position , song.song_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.citizenship",
      "singer.*",
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.highest_position",
      "song.song_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "销售超过300000的歌手的不同的名字是什么？ | singer : singer.name , singer.net_worth_millions , singer.singer_id , singer.birth_year , singer.citizenship , singer.* | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.net_worth_millions",
      "singer.singer_id",
      "singer.birth_year",
      "singer.citizenship",
      "singer.*",
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示有不止一首歌曲的歌手的名字。 | singer : singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.citizenship , singer.* | song : song.singer_id , song.title , song.song_id , song.sales , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.sales",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "那些有不止一首歌的歌手的名字是什么？ | singer : singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.citizenship , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示歌手的名字和他们的歌曲的总销售。 | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.* | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.citizenship , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.*",
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.citizenship",
      "singer.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "对于每个歌手的名字，他们的歌曲的总销量是多少？ | song : song.sales , song.singer_id , song.title , song.song_id , song.highest_position , song.* | singer : singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.citizenship , singer.*",
    "output_sequence": " | ",
    "tc_original": [
      "song.sales",
      "song.singer_id",
      "song.title",
      "song.song_id",
      "song.highest_position",
      "song.*",
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "列出没有歌曲的歌手的名字。 | singer : singer.name , singer.singer_id , singer.birth_year , singer.net_worth_millions , singer.citizenship , singer.* | song : song.singer_id , song.title , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.birth_year",
      "singer.net_worth_millions",
      "singer.citizenship",
      "singer.*",
      "song.singer_id",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "没有任何歌曲的歌手的名字是什么？ | singer : singer.name , singer.singer_id , singer.net_worth_millions , singer.birth_year , singer.citizenship , singer.* | song : song.title , song.singer_id , song.sales , song.song_id , song.highest_position , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.name",
      "singer.singer_id",
      "singer.net_worth_millions",
      "singer.birth_year",
      "singer.citizenship",
      "singer.*",
      "song.title",
      "song.singer_id",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "显示1945年前和1955年后出生的歌手所共有的国籍。 | singer : singer.birth_year , singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.* | song : song.title , song.sales , song.highest_position , song.song_id , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.net_worth_millions",
      "singer.singer_id",
      "singer.*",
      "song.title",
      "song.sales",
      "song.highest_position",
      "song.song_id",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "singer",
    "input_sequence": "在1945年之前和1955年之后出生的歌手所共有的国籍是什么？ | singer : singer.birth_year , singer.citizenship , singer.name , singer.net_worth_millions , singer.singer_id , singer.* | song : song.title , song.sales , song.song_id , song.highest_position , song.singer_id , song.*",
    "output_sequence": " | ",
    "tc_original": [
      "singer.birth_year",
      "singer.citizenship",
      "singer.name",
      "singer.net_worth_millions",
      "singer.singer_id",
      "singer.*",
      "song.title",
      "song.sales",
      "song.song_id",
      "song.highest_position",
      "song.singer_id",
      "song.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "一共有多少个可用的特性？ | other_available_features : other_available_features.feature_name , other_available_features.feature_type_code , other_available_features.feature_description , other_available_features.feature_id , other_available_features.* | other_property_features : other_property_features.feature_id , other_property_features.property_feature_description , other_property_features.property_id , other_property_features.* | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | properties : properties.property_name , properties.other_property_details , properties.property_address , properties.shp_feature_1 , properties.shp_feature_3 , properties.*",
    "output_sequence": " | ",
    "tc_original": [
      "other_available_features.feature_name",
      "other_available_features.feature_type_code",
      "other_available_features.feature_description",
      "other_available_features.feature_id",
      "other_available_features.*",
      "other_property_features.feature_id",
      "other_property_features.property_feature_description",
      "other_property_features.property_id",
      "other_property_features.*",
      "ref_feature_types.feature_type_name",
      "ref_feature_types.feature_type_code",
      "ref_feature_types.*",
      "properties.property_name",
      "properties.other_property_details",
      "properties.property_address",
      "properties.shp_feature_1",
      "properties.shp_feature_3",
      "properties.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "'春秋航空公司'的特征类型名称是什么？ | properties : properties.property_name , properties.property_type_code , properties.property_id , properties.property_address , properties.other_property_details , properties.* | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | other_available_features : other_available_features.feature_name , other_available_features.feature_description , other_available_features.feature_type_code , other_available_features.feature_id , other_available_features.* | other_property_features : other_property_features.property_feature_description , other_property_features.feature_id , other_property_features.property_id , other_property_features.*",
    "output_sequence": " | ",
    "tc_original": [
      "properties.property_name",
      "properties.property_type_code",
      "properties.property_id",
      "properties.property_address",
      "properties.other_property_details",
      "properties.*",
      "ref_feature_types.feature_type_name",
      "ref_feature_types.feature_type_code",
      "ref_feature_types.*",
      "other_available_features.feature_name",
      "other_available_features.feature_description",
      "other_available_features.feature_type_code",
      "other_available_features.feature_id",
      "other_available_features.*",
      "other_property_features.property_feature_description",
      "other_property_features.feature_id",
      "other_property_features.property_id",
      "other_property_features.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "显示属于该代码的属性的属性类型说明。 | ref_property_types : ref_property_types.property_type_description , ref_property_types.property_type_code , ref_property_types.* | ref_feature_types : ref_feature_types.feature_type_code , ref_feature_types.feature_type_name , ref_feature_types.* | other_property_features : other_property_features.property_feature_description , other_property_features.feature_id , other_property_features.property_id , other_property_features.* | other_available_features : other_available_features.feature_description , other_available_features.feature_type_code , other_available_features.feature_name , other_available_features.feature_id , other_available_features.*",
    "output_sequence": " | ",
    "tc_original": [
      "ref_property_types.property_type_description",
      "ref_property_types.property_type_code",
      "ref_property_types.*",
      "ref_feature_types.feature_type_code",
      "ref_feature_types.feature_type_name",
      "ref_feature_types.*",
      "other_property_features.property_feature_description",
      "other_property_features.feature_id",
      "other_property_features.property_id",
      "other_property_features.*",
      "other_available_features.feature_description",
      "other_available_features.feature_type_code",
      "other_available_features.feature_name",
      "other_available_features.feature_id",
      "other_available_features.*"
    ]
  },
  {
    "db_id": "real_estate_properties",
    "input_sequence": "超过1个房间的'房子'或'公寓'的属性名称是什么？ | properties : properties.room_count , properties.property_name , properties.apt_feature_1 , properties.property_type_code , properties.property_id , properties.* | ref_feature_types : ref_feature_types.feature_type_name , ref_feature_types.feature_type_code , ref_feature_types.* | other_available_features : other_available_features.feature_name , other_available_features.feature_description , other_available_features.feature_type_code , other_available_features.feature_id , other_available_features.* | other_property_features : other_property_features.property_feature_description , other_property_features.feature_id , other_property_features.property_id , other_property_features.*",
    "output_sequence": " | ",
    "tc_original": [
      "properties.room_count",
      "properties.property_name",
      "properties.apt_feature_1",
      "properties.property_type_code",
      "properties.property_id",
      "properties.*",
      "ref_feature_types.feature_type_name",
      "ref_feature_types.feature_type_code",
      "ref_feature_types.*",
      "other_available_features.feature_name",
      "other_available_features.feature_description",
      "other_available_features.feature_type_code",
      "other_available_features.feature_id",
      "other_available_features.*",
      "other_property_features.property_feature_description",
      "other_property_features.feature_id",
      "other_property_features.property_id",
      "other_property_features.*"
    ]
  }
]