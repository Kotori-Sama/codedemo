[
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### How many singers do we have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the total number of singers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show name, country, age for all singers ordered by age from the oldest to the youngest.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names, countries, and ages for every singer in descending order of age?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the average, minimum, and maximum age of all singers from France?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the average, minimum, and maximum age for all French singers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show the name and the release year of the song by the youngest singer.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names and release years for all the songs of the youngest singer?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are all distinct countries where singers above age 20 are from?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are  the different countries with singers above age 20?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show all countries and the number of singers in each country.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### How many singers are from each country?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### List all song names by singers above the average age.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are all the song names by singers who are older than average?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show location and name for all stadiums with a capacity between 5000 and 10000.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the locations and names of all stations with capacity between 5000 and 10000?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the maximum capacity and the average of all stadiums ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the average and maximum capacities for all stadiums ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the name and capacity for the stadium with highest average attendance?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the name and capacity for the stadium with the highest average attendance?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### How many concerts are there in year 2014 or 2015?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### How many concerts occurred in 2014 or 2015?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show the stadium name and the number of concerts in each stadium.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### For each stadium, how many concerts play there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show the stadium name and capacity with most number of concerts in year 2014 or after.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the name and capacity of the stadium with the most concerts after 2013 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Which year has most number of concerts?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the year that had the most concerts?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show the stadium names without any concert.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names of the stadiums without any concerts?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show countries where a singer above age 40 and a singer below 30 are from.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show names for all stadiums except for stadiums having a concert in year 2014.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names of all stadiums that did not have a concert in 2014?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Show the name and theme for all concerts and the number of singers in each concert.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names , themes , and number of singers for every concert ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### List singer names and number of concerts for each singer.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names of the singers and number of concerts for each person?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### List all singer names in concerts in year 2014.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names of the singers who performed in a concert in 2014?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### what is the name and nation of the singer who have a song having 'Hey' in its name?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### Find the number of concerts happened in the stadium with the highest capacity .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## stadium(Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average)# singer(Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male)# concert(concert_ID,concert_Name,Theme,Stadium_ID,Year)# singer_in_concert(concert_ID,Singer_ID)#### What are the number of concerts that occurred in the stadium with the largest capacity ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the number of pets whose weight is heavier than 10.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### How many pets have a greater weight than 10?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the weight of the youngest dog.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### How much does the youngest dog weigh?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the maximum weight for each type of pet. List the maximum weight and pet type.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### List the maximum weight and type for each type of pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find number of pets owned by students who are older than 20.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### How many pets are owned by students that have an age greater than 20?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the number of dog pets that are raised by female students (with sex F).\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### How many dog pets are raised by female students?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the number of distinct type of pets.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### How many different types of pet are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the first name of students who have cat or dog pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What are the first names of every student who has a cat or dog as a pet?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the first name of students who have both cat and dog pets .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What are the students' first names who have both cats and dogs as pets?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the major and age of students who do not have a cat pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What major is every student who does not own a cat as a pet, and also how old are they?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the id of students who do not have a cat pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What are the ids of the students who do not own cats as pets?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the first name and age of students who have a dog but do not have a cat as a pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the first name of every student who has a dog but does not have a cat?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the type and weight of the youngest pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What type of pet is the youngest animal, and how much does it weigh?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the id and weight of all pets whose age is older than 1.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the id and weight of every pet who is older than 1?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the average and maximum age for each type of pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the average and maximum age for each pet type?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the average weight for each pet type.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the average weight for each type of pet?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the first name and age of students who have a pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What are the different first names and ages of the students who do have pets?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the id of the pet owned by student whose last name is ‘Smith’.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the id of the pet owned by the student whose last name is 'Smith'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the number of pets for each student who has any pet and student id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### For students who have pets , how many pets does each student have ? list their ids instead of names .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the first name and gender of student who have more than one pet.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the first name and gender of the all the students who have more than one pet?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the last name of the student who has a cat that is age 3.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the last name of the student who has a cat that is 3 years old?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### Find the average age of students who do not have any pet .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Student(StuID,LName,Fname,Age,Sex,Major,Advisor,city_code)# Has_Pet(StuID,PetID)# Pets(PetID,PetType,pet_age,weight)#### What is the average age for all students who do not own any pets ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many continents are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of continents?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many countries does each continent have? List the continent id, continent name and the number of countries.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### For each continent, list its id, name, and how many countries it has?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many countries are listed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many countries exist?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many models does each car maker produce? List maker full name, id and the number.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the full name of each car maker, along with its id and how many models it produces?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which model of the car has the minimum horsepower?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the model of the car with the smallest amount of horsepower?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Find the model of the car whose weight is below the average weight.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the model for the car with a weight smaller than the average?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Find the name of the makers that produced some cars in the year of 1970?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the name of the different car makers who produced a car in 1970?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Find the make and production time of the cars that were produced in the earliest year?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the maker of the carr produced in the earliest year and what year was it?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which distinct car models are the produced after 1980?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the different models for the cards produced after 1980?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many car makers are there in each continents? List the continent name and the count.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the name of each continent and how many car makers are there in each one?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which of the countries has the most car makers? List the country name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the name of the country with the most car makers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many car models are produced by each maker ? Only list the count and the maker full name .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of car models that are produced by each maker and what is the id and full name of each maker?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the accelerate of the car make amc hornet sportabout (sw)?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How much does the car accelerate that makes amc hornet sportabout (sw)?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many car makers are there in france?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of makers of care in France?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many car models are produced in the usa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the count of the car models produced in the United States?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average miles per gallon(mpg) of the cars with 4 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average miles per gallon of all the cards with 4 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the smallest weight of the car produced with 8 cylinders on 1974 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the minimum weight of the car with 8 cylinders produced in 1974 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are all the makers and models?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the makers and models?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the countries having at least one car maker? List name and id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the names and ids of all countries with at least one car maker?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of the cars with horsepower more than 150?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of cars with a horsepower greater than 150?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average weight of cars each year?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average weight and year for each year?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which countries in europe have at least 3 car manufacturers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the names of all European countries with at least 3 manufacturers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the maximum horsepower and the make of the car models with 3 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the largest amount of horsepower for the models with 3 cylinders and what make is it?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which model saves the most gasoline? That is to say, have the maximum miles per gallon.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the car model with the highest mpg ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average horsepower of the cars before 1980?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average horsepower for all cars produced before 1980 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average edispl of the cars of model volvo?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the average edispl for all volvos?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the maximum accelerate for different number of cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the maximum accelerate for all the different cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which model has the most version(make) of cars?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What model has the most different versions?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many cars have more than 4 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of cars with more than 4 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### how many cars were produced in 1980?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### In 1980, how many cars were made?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many car models were produced by the maker with full name American Motor Company?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of car models created by the car maker American Motor Company?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which makers designed more than 3 car models? List full name and the id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the names and ids of all makers with more than 3 models?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the different models created by either the car maker General Motors or weighed more than 3500?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### In which years cars were produced weighing no less than 3000 and no more than 4000 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the horsepower of the car with the largest accelerate?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the horsepower of the car with the greatest accelerate?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### For model volvo, how many cylinders does the car with the least accelerate have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### For a volvo model, how many cylinders does the version with least accelerate have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many cars have a larger accelerate than the car with the largest horsepower?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of cars with a greater accelerate than the one with the most horsepower?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many countries has more than 2 car makers ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of countries with more than 2 car makers ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### How many cars has over 6 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the number of carsw ith over 6 cylinders?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### For the cars with 4 cylinders, which model has the largest horsepower?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### For all of the 4 cylinder cars, which model has the most horsepower?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which models are lighter than 3500 but not built by the 'Ford Motor Company'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the name of the countries where there is not a single car maker?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the names of the countries with no car makers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## continents(ContId,Continent)# countries(CountryId,CountryName,Continent)# car_makers(Id,Maker,FullName,Country)# model_list(ModelId,Maker,Model)# car_names(MakeId,Model,Make)# cars_data(Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year)#### What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which country does Airline \"JetBlue Airways\" belong to?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What country is Jetblue Airways affiliated with?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the abbreviation of Airline \"JetBlue Airways\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which abbreviation corresponds to Jetblue Airways?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### List all airline names and their abbreviations in \"USA\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are the airline names and abbreviations for airlines in the USA?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### List the airport code and name in the city of Anthony.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the airport code and airport name corresonding to the city Anthony.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many airlines do we have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the total number of airlines?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many airports do we have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the number of  airports.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights do we have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the number of flights.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airline has abbreviation 'UAL'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the airline with abbreviation 'UAL'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many airlines are from USA?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the number of airlines in the USA.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which city and country is the Alton airport at?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the city and country for the Alton airport.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the airport name for airport 'AKO'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the name of the airport with code 'AKO'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are airport names at City 'Aberdeen'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are the names of airports in Aberdeen?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights depart from 'APG'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Count the number of flights departing from 'APG'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights have destination ATO?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Count the number of flights into ATO.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights depart from City Aberdeen?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the number of flights departing from Aberdeen.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights arriving in Aberdeen city?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the number of flights arriving in Aberdeen.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights fly from Aberdeen to Ashley?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights does airline 'JetBlue Airways' have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the number of Jetblue Airways flights.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many 'United Airlines' flights go to Airport 'ASY'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Count the number of United Airlines flights arriving in ASY Airport.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many 'United Airlines' flights depart from Airport 'AHD'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Return the number of United Airlines flights leaving from AHD Airport.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many United Airlines flights go to City 'Aberdeen'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Count the number of United Airlines flights that arrive in Aberdeen.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which city has most number of arriving flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which city has the most frequent destination airport?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which city has most number of departing flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which city is the most frequent source airport?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the code of airport that has the highest number of flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the airport code of the airport with the most flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the code of airport that has fewest number of flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the code of the airport with the least flights.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airline has most number of flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What airline serves the most flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find the abbreviation and country of the airline that has fewest number of flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What is the abbreviation of the airilne has the fewest flights and what country is it in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are airlines that have some flight departing from airport 'AHD'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airlines have a flight with source airport AHD?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are airlines that have flights arriving at airport 'AHD'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airlines have a flight with destination airport AHD?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find all airlines that have flights from both airports 'APG' and 'CVO'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airlines have departing flights from both APG and CVO airports?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find all airlines that have flights from airport 'CVO' but not from 'APG'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airlines have departures from CVO but not from APG airports?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find all airlines that have at least 10 flights.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airlines have at least 10 flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find all airlines that have fewer than 200 flights.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airlines have less than 200 flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are flight numbers of Airline \"United Airlines\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which flight numbers correspond to United Airlines flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are flight numbers of flights departing from Airport \"APG\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the flight numbers of flights leaving from APG.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are flight numbers of flights arriving at Airport \"APG\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the flight numbers of flights landing at APG.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are flight numbers of flights departing from City \"Aberdeen \"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the flight numbers of flights leaving from Aberdeen.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### What are flight numbers of flights arriving at City \"Aberdeen\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Give the flight numbers of flights arriving in Aberdeen.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find the number of flights landing in the city of Aberdeen or Abilene.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### How many flights land in Aberdeen or Abilene?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Find the name of airports which do not have any flight in and out.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## airlines(uid,Airline,Abbreviation,Country)# airports(City,AirportCode,AirportName,Country,CountryAbbrev)# flights(Airline,FlightNo,SourceAirport,DestAirport)#### Which airports do not have departing or arriving flights?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### How many employees are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Count the number of employees\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Sort employee names by their age in ascending order.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### List the names of employees and sort in ascending order of age.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What is the number of employees from each city?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Count the number of employees for each city.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which cities do more than one employee under age 30 come from?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the cities that have more than one employee under age 30.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the number of shops in each location.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### How many shops are there in each location?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the manager name and district of the shop whose number of products is the largest.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What are the manager name and district of the shop that sells the largest number of products?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### find the minimum and maximum number of products of all stores.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What are the minimum and maximum number of products across all the shops?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Return the name, location and district of all shops in descending order of number of products.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Sort all the shops by number products in descending order, and return the name, location and district of each shop.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the names of stores whose number products is more than the average number of products.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which shops' number products is above the average? Give me the shop names.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### find the name of employee who was awarded the most times in the evaluation.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which employee received the most awards in evaluations? Give me the employee name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the name of the employee who got the highest one time bonus.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which employee received the biggest bonus? Give me the employee name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the names of employees who never won any award in the evaluation.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What are the names of the employees who never received any evaluation?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What is the name of the shop that is hiring the largest number of employees?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which shop has the most employees? Give me the shop name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the name of the shops that do not hire any employee.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which shops run with no employees? Find the shop names\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the number of employees hired in each shop; show the shop name as well.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### For each shop, return the number of employees working there and the name of the shop.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What is total bonus given in all evaluations?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the total amount of bonus given in all the evaluations.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Give me all the information about hiring.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### What is all the information about hiring?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Which district has both stores with less than 3000 products and stores with more than 10000 products?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### How many different store locations are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## employee(Employee_ID,Name,Age,City)# shop(Shop_ID,Name,Location,District,Number_products,Manager_name)# hiring(Shop_ID,Employee_ID,Start_from,Is_full_time)# evaluation(Employee_ID,Year_awarded,Bonus)#### Count the number of distinct store locations.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many documents do we have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of documents.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### List document IDs, document names, and document descriptions for all documents.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids, names, and descriptions for all documents?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the document name and template id for document with description with the letter 'w' in it?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the names and template ids for documents that contain the letter w in their description.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the document id, template id and description for document named \"Robbin CV\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the document id, template id, and description for the document with the name Robbin CV.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many different templates do all document use?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of different templates used for documents.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many documents are using the template with type code 'PPT'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of documents that use the PPT template type.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all template ids and number of documents using each template.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are all different template ids used for documents, and how many times were each of them used?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the id and type code for the template used by the most documents?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the id and type code of the template that is used for the greatest number of documents.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show ids for all templates that are used by more than one document.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the template ids of any templates used in more than a single document?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show ids for all templates not used by any document.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids for templates that are not used in any documents?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many templates do we have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of templates.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show template ids, version numbers, and template type codes for all templates.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids, version numbers, and type codes for each template?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all distinct template type codes for all templates.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the different template type codes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids of templates with template type code PP or PPT?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the ids of templates that have the code PP or PPT.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many templates have template type code CV?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of templates of the type CV.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the version number and template type code for the template with version number later than 5?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the version numbers and template type codes of templates with a version number greater than 5.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all template type codes and number of templates for each.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the different template type codes, and how many templates correspond to each?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Which template type code has most number of templates?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the type code of the template type that the most templates belong to.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all template type codes with less than three templates.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the codes of template types that have fewer than 3 templates?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What the smallest version number and its template type code?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the lowest version number, along with its corresponding template type code.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the template type code of the template used by document with the name \"Data base\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the template type code of the template that is used by a document named Data base.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all document names using templates with template type code BK.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the names of documents that use templates with the code BK?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all template type codes and the number of documents using each type.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the different template type codes, and how many documents use each type?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Which template type code is used by most number of documents?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the code of the template type that is most commonly used in documents.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all template type codes that are not used by any document.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the codes of template types that are not used for any document?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all template type codes and descriptions.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the type codes and descriptions for all template types?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the template type descriptions for template type code \"AD\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the template type description of the template type with the code AD.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the template type code for template type description \"Book\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the type code of the template type with the description \"Book\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the distinct template type descriptions for the templates ever used by any document?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the different descriptions for templates that have been used in a document.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the template ids with template type description \"Presentation\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the ids corresponding to templates with the description 'Presentation'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many paragraphs in total?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of paragraphs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### How many paragraphs for the document with name 'Summer Show'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Count the number of paragraphs in the document named 'Summer Show'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show paragraph details for paragraph with text 'Korea ' .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the details for the paragraph that includes the text 'Korea ' ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all paragraph ids and texts for the document with name 'Welcome to NY'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all paragraph texts for the document \"Customer reviews\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the paragraph texts for the document with the name 'Customer reviews'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all document ids and the number of paragraphs in each document. Order by document id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show all document ids, names and the number of paragraphs in each document.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids and names of each document, as well as the number of paragraphs in each?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### List all document ids with at least two paragraphs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids of documents that have 2 or more paragraphs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the document id and name with greatest number of paragraphs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the id and name of the document with the most paragraphs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the document id with least number of paragraphs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Return the id of the document with the fewest paragraphs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What is the document id with 1 to 2 paragraphs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Give the ids of documents that have between one and two paragraphs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### Show the document id with paragraph text 'Brazil' and 'Ireland'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Template_Types(Template_Type_Code,Template_Type_Description)# Templates(Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details)# Documents(Document_ID,Template_ID,Document_Name,Document_Description,Other_Details)# Paragraphs(Paragraph_ID,Document_ID,Paragraph_Text,Other_Details)#### What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### How many teachers are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What is the total count of teachers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### List the names of teachers in ascending order of age.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers ordered by ascending age?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the age and hometown of teachers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What is the age and hometown of every teacher?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### List the name of teachers whose hometown is not `` Little Lever Urban District '' .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show the name of teachers aged either 32 or 33?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers who are aged either 32 or 33?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What is the hometown of the youngest teacher?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Where is the youngest teacher from?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show different hometown of teachers and the number of teachers from each hometown.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### For each hometown, how many teachers are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### List the most common hometown of teachers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What is the most commmon hometowns for teachers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show the hometowns shared by at least two teachers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the towns from which at least two teachers come from?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show names of teachers and the courses they are arranged to teach.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What is the name of each teacher and what course they teach?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show the name of the teacher for the math course.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the people who teach math courses?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show names of teachers and the number of courses they teach.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers and how many courses do they teach?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### Show names of teachers that teach at least two courses.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers who teach at least two courses?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### List the names of teachers who have not been arranged to teach courses.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## course(Course_ID,Staring_Date,Course)# teacher(Teacher_ID,Name,Age,Hometown)# course_arrange(Course_ID,Teacher_ID,Grade)#### What are the names of the teachers whose courses have not been arranged?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### How many visitors below age 30 are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What is the average age of the visitors whose membership level is not higher than 4?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### Find the id and name of the museum that has the most staff members?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### Find the average number of staff working for the museums that were open before 2009.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What are the opening year and staff number of the museum named Plaza Museum?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### find the id, name and age for visitors who visited some museums more than once.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What are the id and name of the museum visited most times?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What is the name of the museum that had no visitor yet?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### Find the name and age of the visitor who bought the most tickets at once.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What are the average and maximum number of tickets bought in all visits?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What is the total ticket expense of the visitors whose membership level is 1?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### Find the number of visitors who did not visit any museum opened after 2010.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## museum(Museum_ID,Name,Num_of_Staff,Open_Year)# visitor(ID,Name,Level_of_membership,Age)# visit(Museum_ID,visitor_ID,Num_of_Ticket,Total_spent)#### How many museums were opened after 2013 or before 2008?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the total number of players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many players are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the total number of matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Count the number of matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### List the first name and birth date of all players from the country with code USA.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the first names and birth dates of players from the USA?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the average age of losers and winners of all matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the average ages of losers and winners across matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the average rank of winners in all matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the average rank for winners in all matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the highest rank of losers in all matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the best rank of losers across all matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### find the number of distinct country codes of all players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many distinct countries do players come from?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the number of distinct name of losers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many different loser names are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the name of tourney that has more than 10 matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the names of tournaments that have more than 10 matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### List the names of all winners who played in both 2013 and 2016.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the names of players who won in both 2013 and 2016?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### List the number of all matches who played in years of 2013 or 2016.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many matches were played in 2013 or 2016?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the first names and country codes for players who won both the WTA Championships and the Australian Open?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the first name and country code of the oldest player.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the first name and country code of the oldest player?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### List the first and last name of all players in the order of birth date.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the full names of all players, sorted by birth date?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### List the first and last name of all players who are left / L hand in the order of birth date.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the full names of all left handed players, in order of birth date?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the first name and country code of the player who did the most number of tours.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the first name and country code of the player with the most tours?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the year that has the most number of matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Which year had the most matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the name and rank points of the winner who won the most times.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the name of the winner who has won the most matches, and how many rank points does this player have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the name of the winner with the most rank points who participated in the Australian Open tournament?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### find the names of loser and winner who played in the match with greatest number of minutes.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the names of the winner and loser who played in the longest match?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the average ranking for each player and their first name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the first names of all players, and their average rankings?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the total ranking points for each player and their first name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the first names of all players, and their total ranking points?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### find the number of players for each country.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many players are from each country?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### find the code of the country where has the greatest number of players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the code of the country with the most players?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the codes of countries that have more than 50 players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the codes of countries with more than 50 players?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the total number of tours for each ranking date.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many total tours were there for each ranking date?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the number of matches happened in each year.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many matches were played in each year?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the name and rank of the 3 youngest winners across all matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What are the names and ranks of the three youngest winners across all matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many different winners both participated in the WTA Championships and were left handed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the number of left handed winners who participated in the WTA Championships.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the first name, country code and birth date of the winner who has the highest rank points in all matches.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### What is the first name, country code, and birth date of the player with the most winner rank points across all matches?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### Find the number of players for each hand type.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## players(player_id,first_name,last_name,hand,birth_date,country_code)# matches(best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year)# rankings(ranking_date,ranking,player_id,ranking_points,tours)#### How many players are there for each hand type?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### How many ships ended up being 'Captured'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### List the name and tonnage ordered by in descending alphaetical order for the names.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### List the name, date and result of each battle.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What is maximum and minimum death toll caused each time?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What is the average number of injuries caused each time?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What are the death and injury situations caused by the ship with tonnage 't'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What are the name and results of the battles when the bulgarian commander is not 'Boril'\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What are the different ids and names of the battles that lost any 'Brig' type shipes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What are the ids and names of the battles that led to more than 10 people killed in total.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What is the ship id and name that caused most total injuries?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### How many different results are there for the battles?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### How many battles did not lose any ship with tonnage '225'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## battle(id,name,date,bulgarian_commander,latin_commander,result)# ship(lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship)# death(caused_by_ship_id,id,note,killed,injured)#### What are the notes of the death events which has substring 'East'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### what are all the addresses including line 1 and line 2?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the first and second line for all addresses?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many courses in total are listed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many courses are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How is the math course described?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the descriptions for all the math courses?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the zip code of the address in the city Port Chelsea?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the zip code for Port Chelsea?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Which department offers the most number of degrees? List department name and id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the name and id of the department with the most number of degrees ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many departments offer any degree?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many different departments offer degrees?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many different degree names are offered?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many different degrees are offered?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many degrees does the engineering department offer?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many degrees does the engineering department have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the names and descriptions of all the sections?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the names and descriptions for all the sections?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the names and id of courses having at most 2 sections?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the names and ids of every course with less than 2 sections?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### List the section_name in reversed lexicographical order.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the names of the sections in reverse alphabetical order?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the semester which most student registered in? Show both the name and the id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### For each semester, what is the name and id of the one with the most students registered?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the description of the department whose name has the substring the computer?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the department description for the one whose name has the word computer?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the first, middle, and last names for everybody enrolled in a Bachelors program?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Find the kind of program which most number of students are enrolled in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the degree summary name that has the most number of students enrolled?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Find the program which most number of students are enrolled in. List both the id and the summary.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the program id and the summary of the degree that has the most students enrolled?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Which semesters do not have any student enrolled? List the semester name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the name of the semester with no students enrolled?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are all the course names of the courses which ever have students enrolled in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the names of all courses that have some students enrolled?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What's the name of the course with most number of enrollments?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the name of the course with the most students enrolled?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the last name of the students who live in North Carolina but have not registered in any degree programs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Show the date and id of the transcript with at least 2 course results.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the date and id of the transcript with at least 2 courses listed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the phone number of the man with the first name Timmothy and the last name Ward?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the mobile phone number of the student named Timmothy Ward ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Who is the first student to register? List the first name, middle name and last name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the first, middle, and last name of the first student to register?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Who is the earliest graduate of the school? List the first name, middle name and last name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the first, middle, and last name of the earliest school graduate?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Whose permanent address is different from his or her current address? List his or her first name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the first name of the student whose permanent address is different from his or her current one?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Which address holds the most number of students currently? List the address id and all lines.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the id, line 1, and line 2 of the address with the most students?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### On average, when were the transcripts printed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the average transcript date?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### When is the first transcript released? List the date and details.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the earliest date of a transcript release, and what details can you tell me?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many transcripts are released?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many transcripts are listed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the last transcript release date?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### When was the last transcript released?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Show the date of the transcript which shows the least number of results, also list the id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the date and id of the transcript with the least number of results?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Find the semester when both Master students and Bachelor students got enrolled in.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the id of the semester that had both Masters and Bachelors students enrolled?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### How many different addresses do the students currently live?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the different addresses that have students living there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### List all the student details in reversed lexicographical order.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What other details can you tell me about students in reverse alphabetical order?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Describe the section h.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What is the description for the section named h?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Addresses(address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details)# Courses(course_id,course_name,course_description,other_details)# Departments(department_id,department_name,department_description,other_details)# Degree_Programs(degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details)# Sections(section_id,course_id,section_name,section_description,other_details)# Semesters(semester_id,semester_name,semester_description,other_details)# Students(student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details)# Student_Enrolment(student_enrolment_id,degree_program_id,semester_id,student_id,other_details)# Student_Enrolment_Courses(student_course_id,course_id,student_enrolment_id)# Transcripts(transcript_id,transcript_date,other_details)# Transcript_Contents(student_course_id,transcript_id)#### What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the title of all cartoons in alphabetical order.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the titles of the cartoons sorted alphabetically?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List all cartoon directed by \"Ben Jones\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the names of all cartoons directed by Ben Jones?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### How many cartoons were written by \"Joseph Kuhr\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the number of cartoones written by Joseph Kuhr?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### list all cartoon titles and their directors ordered by their air date\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the name and directors of all the cartoons that are ordered by air date?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### Which country has the most of TV Channels? List the country and number of TV Channels it has.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the country with the most number of TV Channels and how many does it have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the number of different series names and contents in the TV Channel table.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### How many different series and contents are listed in the TV Channel table?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the content of TV Channel with serial name \"Sky Radio\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the content of the series Sky Radio?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the Package Option of TV Channel with serial name \"Sky Radio\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the Package Options of the TV Channels whose series names are Sky Radio?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### How many TV Channel using language English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### How many TV Channels use the English language?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the language used least number of TV Channel. List language and number of TV Channel.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the languages used by the least number of TV Channels and how many channels use it?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List each language and the number of TV Channels using it.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### For each language, list the number of TV Channels that use it.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the Episode of all TV series sorted by rating.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are all of the episodes ordered by ratings?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List top 3 highest Rating  TV series. List the TV series's Episode and Rating.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are 3 most highly rated episodes in the TV series table and what were those ratings?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is minimum and maximum share of TV series?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the maximum and minimum share for the TV series?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the air date of TV series with Episode \"A Love of a Lifetime\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### When did the episode \"A Love of a Lifetime\" air?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the weekly rank for the episode \"A Love of a Lifetime\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the name of the series that has the episode \"A Love of a Lifetime\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the episode for the TV series named \"Sky Radio\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### Find the number of cartoons directed by each of the listed directors.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### How many cartoons did each director create?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### Find the production code and channel of the most recently aired cartoon .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the produdction code and channel of the most recent cartoon ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### Find the package choice and series name of the TV channel that has high definition TV.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the package options and the name of the series for the TV Channel that supports high definition TV?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### which countries' tv channels are playing some cartoon written by Todd Casey?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the countries that have cartoons on TV that were written by Todd Casey?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### which countries' tv channels are not playing any cartoon written by Todd Casey?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the countries that are not playing cartoons written by Todd Casey?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### find the pixel aspect ratio and nation of the tv channels that do not use English.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What is the pixel aspect ratio and country of origin for all TV channels that do not use English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### find id of the tv channels that from the countries where have more than two tv channels.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the ids of all tv channels that have more than 2 TV channels?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### find the id of tv channels that do not play any cartoon directed by Ben Jones.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### find the package option of the tv channel that do not have any cartoon directed by Ben Jones.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## TV_Channel(id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option)# TV_series(id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel)# Cartoon(id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel)#### What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### How many poker players are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Count the number of poker players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### List the earnings of poker players in descending order.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the earnings of poker players, ordered descending by value?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### List the final tables made and the best finishes of poker players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the final tables made and best finishes for all poker players?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the average earnings of poker players?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the average earnings across all poker players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the money rank of the poker player with the highest earnings?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the money rank of the player with the greatest earnings.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the maximum number of final tables made among poker players with earnings less than 200000?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the maximum final tables made across all poker players who have earnings below 200000.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names of poker players?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the names of all the poker players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names of poker players whose earnings is higher than 300000?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Give the names of poker players who have earnings above 300000.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### List the names of poker players ordered by the final tables made in ascending order.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names of poker players, ordered ascending by the number of final tables they have made?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the birth date of the poker player with the lowest earnings?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the birth date of the poker player with the lowest earnings.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the money rank of the tallest poker player?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the money rank of the poker player with the greatest height.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the average earnings of poker players with height higher than 200?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Give average earnings of poker players who are taller than 200.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names of poker players in descending order of earnings?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the names of poker players sorted by their earnings descending.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are different nationalities of people and the corresponding number of people from each nation?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### How many people are there of each nationality?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What is the most common nationality of people?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Give the nationality that is most common across all people.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the nationalities that are shared by at least two people?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Return the nationalities for which there are two or more people.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### List the names and birth dates of people in ascending alphabetical order of name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names and birth dates of people, ordered by their names in alphabetical order?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Show names of people whose nationality is not \"Russia\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names of people who are not from Russia?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### List the names of people that are not poker players.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### What are the names of people who do not play poker?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### How many distinct nationalities are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## poker_player(Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings)# people(People_ID,Nationality,Name,Birth_Date,Height)#### Count the number of different nationalities.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### How many states are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### List the contestant numbers and names, ordered by contestant name descending.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### List the vote ids, phone numbers and states of all votes.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What are the maximum and minimum values of area codes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What is last date created of votes from the state 'CA'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What are the names of the contestants whose names are not 'Jessie Alloway'\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What are the distinct states and create time of all votes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What are the contestant numbers and names of the contestants who had at least two votes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What are the number of votes from state 'NY' or 'CA'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### How many contestants did not get voted?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What is the area code in which the most voters voted?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## AREA_CODE_STATE(area_code,state)# CONTESTANTS(contestant_number,contestant_name)# VOTES(vote_id,phone_number,state,contestant_number,created)#### Return the names of the contestants whose names contain the substring 'Al' .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of all the countries that became independent after 1950?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the names of the nations that were founded after 1950.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many countries have a republic as their form of government?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many countries have governments that are republics?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total surface area of the countries in the Caribbean region?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How much surface area do the countires in the Carribean cover together?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which continent is Anguilla in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the continent name which Anguilla belongs to?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which region is the city Kabul located in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What region is Kabul in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which language is the most popular in Aruba?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What language is predominantly spoken in Aruba?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the population and life expectancies in Brazil?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give me Brazil’s population and life expectancies.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the region and population of Angola?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What region does Angola belong to and what is its population?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the average expected life expectancy for countries in the region of Central Africa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How long is the people’s average life expectancy in Central Africa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the name of country that has the shortest life expectancy in Asia?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the name of the country in Asia with the lowest life expectancy.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total population and maximum GNP in Asia?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many people live in Asia, and what is the largest GNP among them?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the average life expectancy in African countries that are republics?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the average life expectancy for countries in Africa which are republics?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total surface area of the continents Asia and Europe?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the total surface area covered by countries in Asia or Europe.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many people live in Gelderland district?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total population of Gelderland district?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the average GNP and total population in all nations whose government is US territory?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the mean GNP and total population of nations which are considered US territory.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many unique languages are spoken in the world?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the number of distinct languages used around the world?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many type of governments are in Africa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many different forms of governments are there in Africa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total number of languages used in Aruba?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many languages are spoken in Aruba?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many official languages does Afghanistan have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many official languages are spoken in Afghanistan?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is name of the country that speaks the largest number of languages?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the name of the nation that uses the greatest amount of languages.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which continent has the most diverse languages?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which continent speaks the most languages?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many countries speak both English and Dutch?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the number of nations that use English and Dutch?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of nations speak both English and French?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the names of nations that speak both English and French.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of nations where both English and French are official languages?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the names of countries with English and French as official languages.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the number of distinct continents where Chinese is spoken?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many continents speak Chinese?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the regions that use English or Dutch?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which regions speak Dutch or English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the countries where either English or Dutch is the official language ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which countries have either English or Dutch as an official language?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which language is the most popular on the Asian continent?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the language that is used by the largest number of Asian nations?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which languages are spoken by only one country in republic governments?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What languages are only used by a single country with a republic government?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Find the city with the largest population that uses English.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the most populace city that speaks English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Find the name, population and expected life length of asian country with the largest area?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the name, population, and life expectancy of the largest Asian country by land?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is average life expectancy in the countries where English is not the official language?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the mean life expectancy of countries in which English is not the official language.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total number of people living in the nations that do not use English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many people live in countries that do not speak English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the official language spoken in the country whose head of state is Beatrix?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the official language used in the country the name of whose head of state is Beatrix.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total number of unique official languages spoken in the countries that are founded before 1930?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### For the countries founded before 1930, what is the total number of distinct official languages?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the countries that have greater surface area than any country in Europe?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which countries have greater area than that of any country in Europe?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the African countries that have a  population less than any country in Asia?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which African countries have a smaller population than that of any country in Asia?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which Asian countries have a population that is larger than any country in Africa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the Asian countries which have a population larger than that of any country in Africa?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the country codes for countries that do not speak English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the country codes for countries that do not speak English.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the country codes of countries where people use languages other than English?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the country codes for countries in which people speak langauges that are not English.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the codes of the countries that do not speak English and whose government forms are not Republic?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the codes of countries that do not speak English and do not have Republics for governments.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which cities are in European countries where English is not the official language?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of cities in Europe for which English is not the official language?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which unique cities are in Asian countries where Chinese is the official language ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the different names of cities that are in Asia and for which Chinese is the official language.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the name, independence year, and surface area of the country with the smallest population?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the name, year of independence, and surface area of the country that has the lowest population.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the population, name and leader of the country with the largest area?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the name, population, and head of state for the country that has the largest area.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of countries that speak more than 2 languages, as well as how many languages they speak?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Find the number of cities in each district whose population is greater than the average population of cities?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### How many cities in each district have a population that is above the average population across all cities?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Find the government form name and total population for each government form whose average life expectancy is longer than 72.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names and areas of countries with the top 5 largest area?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the names and surface areas of the 5 largest countries.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are names of countries with the top 3 largest population?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the names of the 3 most populated countries.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of the nations with the 3 lowest populations?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the names of the 3 countries with the fewest people.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### how many countries are in Asia?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Count the number of countries in Asia.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the names of the countries that are in the continent of Europe and have a population of 80000?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the names of countries that are in Europe and have a population equal to 80000.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the cities whose population is between 160000 and 900000?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the names of cities that have a population between 160000 and 900000 .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Which language is spoken by the largest number of countries?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Give the language that is spoken in the most countries.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the language spoken by the largest percentage of people in each country?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What is the total number of countries where Spanish is spoken by the largest percentage of people?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Count the number of countries for which Spanish is the predominantly spoken language.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### What are the codes of countries where Spanish is spoken by the largest percentage of people?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## city(ID,Name,CountryCode,District,Population)# sqlite_sequence(name,seq)# country(Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2)# countrylanguage(CountryCode,Language,IsOfficial,Percentage)#### Return the codes of countries for which Spanish is the predominantly spoken language.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### How many conductors are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Count the number of conductors.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### List the names of conductors in ascending order of age.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the names of conductors, ordered by age?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the names of conductors whose nationalities are not \"USA\"?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Return the names of conductors that do not have the nationality \"USA\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the record companies of orchestras in descending order of years in which they were founded?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Return the record companies of orchestras, sorted descending by the years in which they were founded.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What is the average attendance of shows?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Return the average attendance across all shows.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the maximum and minimum share of performances whose type is not \"Live final\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Return the maximum and minimum shares for performances that do not have the type \"Live final\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### How many different nationalities do conductors have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Count the number of different nationalities of conductors.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### List names of conductors in descending order of years of work.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the names of conductors, sorted descending by the number of years they have worked?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### List the name of the conductor with the most years of work.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What is the name of the conductor who has worked the greatest number of years?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Show the names of conductors and the orchestras they have conducted.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the names of conductors as well as the corresonding orchestras that they have conducted?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Show the names of conductors that have conducted more than one orchestras.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the names of conductors who have conducted at more than one orchestra?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Show the name of the conductor that has conducted the most number of orchestras.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What is the name of the conductor who has conducted the most orchestras?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Please show the name of the conductor that has conducted orchestras founded after 2008.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the names of conductors who have conducted orchestras founded after the year 2008?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Please show the different record companies and the corresponding number of orchestras.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### How many orchestras does each record company manage?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Please show the record formats of orchestras in ascending order of count.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the major record formats of orchestras, sorted by their frequency?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### List the record company shared by the most number of orchestras.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What is the record company used by the greatest number of orchestras?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### List the names of orchestras that have no performance.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the orchestras that do not have any performances?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Show the record companies shared by orchestras founded before 2003 and after 2003.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Find the number of orchestras whose record format is \"CD\" or \"DVD\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Count the number of orchestras that have CD or DVD as their record format.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### Show the years in which orchestras that have given more than one performance are founded.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## conductor(Conductor_ID,Name,Age,Nationality,Year_of_Work)# orchestra(Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format)# performance(Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share)# show(Show_ID,Performance_ID,If_first_show,Result,Attendance)#### What are years of founding for orchestras that have had more than a single performance?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many high schoolers are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Count the number of high schoolers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names and grades of each high schooler.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names and grades for each high schooler?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show all the grades of the high schoolers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What is the grade of each high schooler?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What grade is Kyle in?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Return the grade for the high schooler named Kyle.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of all high schoolers in grade 10.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of all high schoolers in grade 10?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the ID of the high schooler named Kyle.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What is Kyle's id?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many high schoolers are there in grade 9 or 10?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Count the number of high schoolers in grades 9 or 10.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the number of high schoolers for each grade.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many high schoolers are in each grade?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Which grade has the most high schoolers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Return the grade that has the greatest number of high schoolers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show me all grades that have at least 4 students.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Which grades have 4 or more high schoolers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the student IDs and numbers of friends corresponding to each.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many friends does each student have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of high school students and their corresponding number of friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of the high schoolers and how many friends does each have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What is the name of the high schooler who has the greatest number of friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Return the name of the high school student with the most friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of high schoolers who have at least 3 friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of high schoolers who have 3 or more friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of all of the high schooler Kyle's friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Return the names of friends of the high school student Kyle.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many friends does the high school student Kyle have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Count the number of friends Kyle has.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show ids of all students who do not have any friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the ids of high school students who do not have friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show names of all high school students who do not have any friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of students who have no friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the ids of high schoolers who have friends and are also liked by someone else.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the ids of students who both have friends and are liked?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show name of all students who have some friends and also are liked by someone else.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of high schoolers who both have friends and are liked?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Count the number of likes for each student id.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many likes correspond to each student id?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of high schoolers who have likes, and numbers of likes for each.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of high schoolers who have likes, and how many likes does each have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What is the name of the high schooler who has the greatest number of likes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Give the name of the student with the most likes.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of students who have at least 2 likes.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of students who have 2 or more likes?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Show the names of students who have a grade higher than 5 and have at least 2 friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### How many likes does Kyle have?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Return the number of likes that the high schooler named Kyle has.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Find the average grade of all students who have some friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What is the average grade of students who have friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### Find the minimum grade of students who have no friends.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Highschooler(ID,name,grade)# Friend(student_id,friend_id)# Likes(student_id,liked_id)#### What is the lowest grade of students who do not have any friends?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which states have both owners and professionals living there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the states where both owners and professionals live.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What is the average age of the dogs who have gone through any treatments?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the average age of the dogs who went through treatments.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which first names are used for professionals or owners but are not used as dog names?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the first names that are used for professionals or owners but are not used as dog names.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which professional did not operate any treatment on dogs? List the professional's id, role and email.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Give me the id, role and email of the professionals who did not perform any treatment on dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which owner owns the most dogs? List the owner id, first name and last name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Return the owner id, first name and last name of the owner who has the most dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which professionals have done at least two treatments? List the professional's id, role, and first name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the id, role, and first name of the professionals who have performed two or more treatments?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What is the name of the breed with the most dogs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which breed do the most dogs have? Give me the breed name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What is the description of the treatment type that costs the least money in total?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Give me the description of the treatment type whose total cost is the lowest.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which professionals have done at least two types of treatments? List the professional id and cell phone.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the id and cell phone of the professionals who operate two or more types of treatments.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the first name and last name of the professionals who have done treatment with cost below average?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the date of each treatment, together with the first name of the professional who operated it.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the date and the operating professional's first name of each treatment?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the cost of each treatment and the corresponding treatment type description.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the cost and treatment type description of each treatment?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List each owner's first name, last name, and the size of his for her dog.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are each owner's first name, last name, and the size of their dog?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List pairs of the owner's first name and the dogs's name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are each owner's first name and their dogs's name?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the names of the dogs of the rarest breed and the treatment dates of them.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which dogs are of the rarest breed? Show their names and treatment dates.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the first names of owners living in Virginia and the names of dogs they own.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the arriving date and the departing date of the dogs who have gone through a treatment?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the arriving date and the departing date of the dogs that received a treatment.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the last name of the owner owning the youngest dog.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Who owns the youngest dog? Give me his or her last name.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the arriving date and the departing date of all the dogs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the arrival date and the departure date for all the dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How many dogs went through any treatments?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Count the number of dogs that went through a treatment.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How many professionals have performed any treatment to dogs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the number of professionals who have ever treated dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How many dogs have an age below the average?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Count the number of dogs of an age below the average.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How much does the most recent treatment cost?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Show me the cost of the most recently performed treatment.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How many dogs have not gone through any treatment?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Tell me the number of dogs that have not received any treatment .\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How many owners temporarily do not have any dogs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the number of owners who do not own any dogs at this moment.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How many professionals did not operate any treatment on dogs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the number of professionals who have not treated any dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What is the average age of all the dogs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Compute the average age of all the dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What is the age of the oldest dog?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Tell me the age of the oldest dog.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How much does each charge type costs? List both charge type and amount.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List each charge type and its amount.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### How much does the most expensive charge type costs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What is the charge amount of the most expensive charge type?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the email, cell phone and home phone of all the professionals.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are the email, cell phone and home phone of each professional?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are all the possible breed type and size type combinations?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### Find the distinct breed type and size type combinations for dogs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### List the first name of all the professionals along with the description of the treatment they have done.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Breeds(breed_code,breed_name)# Charges(charge_id,charge_type,charge_amount)# Sizes(size_code,size_description)# Treatment_Types(treatment_type_code,treatment_type_description)# Owners(owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number)# Dogs(dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed)# Professionals(professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number)# Treatments(treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment)#### What are each professional's first name and description of the treatment they have performed?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### How many singers are there?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What is the count of singers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### List the name of singers in ascending order of net worth.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the names of singers ordered by ascending net worth?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the birth year and citizenship of singers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the birth years and citizenships of the singers?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### List the name of singers whose citizenship is not \"France\".\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the names of the singers who are not French citizens?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show the name of singers whose birth year is either 1948 or 1949?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the names of the singers whose birth years are either 1948 or 1949?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What is the name of the singer with the largest net worth?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What is the name of the singer who is worth the most?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show different citizenship of singers and the number of singers of each citizenship.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### For each citizenship, how many singers are from that country?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Please show the most common citizenship of singers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What is the most common singer citizenship ?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show different citizenships and the maximum net worth of singers of each citizenship.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### For each citizenship, what is the maximum net worth?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show titles of songs and names of singers.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the song titles and singer names?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show distinct names of singers that have songs with sales more than 300000.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### what are the different names of the singers that have sales more than 300000?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show the names of singers that have more than one song.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the names of the singers that have more than one songs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show the names of singers and the total sales of their songs.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### For each singer name, what is the total sales for their songs?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### List the name of singers that do not have any song.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What is the sname of every sing that does not have any song?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### Show the citizenship shared by singers with birth year before 1945 and after 1955.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## singer(Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship)# song(Song_ID,Title,Singer_ID,Sales,Highest_Position)#### What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Feature_Types(feature_type_code,feature_type_name)# Ref_Property_Types(property_type_code,property_type_description)# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)# Other_Property_Features(property_id,feature_id,property_feature_description)#### How many available features are there in total?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Feature_Types(feature_type_code,feature_type_name)# Ref_Property_Types(property_type_code,property_type_description)# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)# Other_Property_Features(property_id,feature_id,property_feature_description)#### What is the feature type name of feature AirCon?\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Feature_Types(feature_type_code,feature_type_name)# Ref_Property_Types(property_type_code,property_type_description)# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)# Other_Property_Features(property_id,feature_id,property_feature_description)#### Show the property type descriptions of properties belonging to that code.\n",
        "output": ""
    },
    {
        "instruction": "### Complete sqlite SQL query only and with no explanation\n",
        "input": "### SQLite SQL tables , with their properties:## Ref_Feature_Types(feature_type_code,feature_type_name)# Ref_Property_Types(property_type_code,property_type_description)# Other_Available_Features(feature_id,feature_type_code,feature_name,feature_description)# Properties(property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details)# Other_Property_Features(property_id,feature_id,property_feature_description)#### What are the names of properties that are either houses or apartments with more than 1 room?\n",
        "output": ""
    }
]